<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jhmarryme&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangdaye7.github.io/"/>
  <updated>2019-05-20T06:04:19.043Z</updated>
  <id>https://wangdaye7.github.io/</id>
  
  <author>
    <name>Jiahao Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0%E7%95%8C%E9%9D%A2%E5%8F%8A%E9%9D%99%E6%80%81%E5%9B%BE%E7%89%87%E8%AE%BF%E9%97%AE/"/>
    <id>https://wangdaye7.github.io/2019/05/20/微服务/待整理/实时刷新界面及静态图片访问/</id>
    <published>2019-05-20T05:38:26.584Z</published>
    <updated>2019-05-20T06:04:19.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实时刷新问题"><a href="#实时刷新问题" class="headerlink" title="实时刷新问题"></a>实时刷新问题</h1><p>因为访问的路径中带有了9001端口, 所以在nginx中配置manage.leyou.com 9001端口的监听, 代理路径与manage.leyou.com配置一致</p><h1 id="访问虚拟机中静态资源图片的配置"><a href="#访问虚拟机中静态资源图片的配置" class="headerlink" title="访问虚拟机中静态资源图片的配置"></a>访问虚拟机中静态资源图片的配置</h1><p>现在虚拟机中建立相应文件夹 /leyou/static<br>再将图片压缩包<strong>image.zip</strong>导入,之后路径为/leyou/static/images/<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 使9001端口的请求正确到达</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">9001</span>;</span><br><span class="line">    <span class="attribute">server_name</span> manage.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.20.60:9001;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  image.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听域名中带有group的，交给FastDFS模块处理</span></span><br><span class="line">        <span class="attribute">location</span> ~/group([<span class="number">0</span>-<span class="number">9</span>])/ &#123;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监听域名中不带group 访问的是静态资源, 直接代理访问</span></span><br><span class="line">        <span class="attribute">location</span> / &#123; </span><br><span class="line">            <span class="attribute">root</span>   /leyou/static/;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实时刷新问题&quot;&gt;&lt;a href=&quot;#实时刷新问题&quot; class=&quot;headerlink&quot; title=&quot;实时刷新问题&quot;&gt;&lt;/a&gt;实时刷新问题&lt;/h1&gt;&lt;p&gt;因为访问的路径中带有了9001端口, 所以在nginx中配置manage.leyou.com 9001端口的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%AE%9E%E7%8E%B0/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/待整理/图片上传实现/</id>
    <published>2019-05-19T14:46:16.396Z</published>
    <updated>2019-05-20T04:49:33.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-实现图片上传"><a href="#2-实现图片上传" class="headerlink" title="2.实现图片上传"></a>2.实现图片上传</h1><p>刚才的新增实现中，我们并没有上传图片，接下来我们一起完成图片上传逻辑。</p><p>文件的上传并不只是在品牌管理中有需求，以后的其它服务也可能需要，因此我们创建一个独立的微服务，专门处理各种上传。</p><h2 id="2-1-搭建项目"><a href="#2-1-搭建项目" class="headerlink" title="2.1.搭建项目"></a>2.1.搭建项目</h2><h3 id="2-1-1-创建module"><a href="#2-1-1-创建module" class="headerlink" title="2.1.1.创建module"></a>2.1.1.创建module</h3><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526192299113.png" alt="1526192299113"></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526192347113.png" alt="1526192347113"></p><h3 id="2-1-2-依赖"><a href="#2-1-2-依赖" class="headerlink" title="2.1.2.依赖"></a>2.1.2.依赖</h3><p>我们需要EurekaClient和web依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-编写配置"><a href="#2-1-3-编写配置" class="headerlink" title="2.1.3.编写配置"></a>2.1.3.编写配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">upload-service</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    multipart:</span></span><br><span class="line"><span class="attr">      max-file-size:</span> <span class="number">5</span><span class="string">MB</span> <span class="comment"># 限制文件上传的大小</span></span><br><span class="line"><span class="comment"># Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，我们应该添加了限制文件大小的配置</p><h3 id="2-1-4-启动类"><a href="#2-1-4-启动类" class="headerlink" title="2.1.4.启动类"></a>2.1.4.启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUploadService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUploadService.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526192931088.png" alt="1526192931088"></p><h2 id="2-2-编写上传功能"><a href="#2-2-编写上传功能" class="headerlink" title="2.2.编写上传功能"></a>2.2.编写上传功能</h2><h3 id="2-2-1-controller"><a href="#2-2-1-controller" class="headerlink" title="2.2.1.controller"></a>2.2.1.controller</h3><p>编写controller需要知道4个内容：</p><ul><li>请求方式：上传肯定是POST</li><li>请求路径：/upload/image</li><li>请求参数：文件，参数名是file，SpringMVC会封装为一个接口：MultipleFile</li><li>返回结果：上传成功后得到的文件的url路径</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传图片功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"image"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">uploadImage</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">        String url = <span class="keyword">this</span>.uploadService.upload(file);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(url)) &#123;</span><br><span class="line">            <span class="comment">// url为空，证明上传失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回200，并且携带url路径</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-service"><a href="#2-2-2-service" class="headerlink" title="2.2.2.service"></a>2.2.2.service</h3><p>在上传文件过程中，我们需要对上传的内容进行校验：</p><ol><li>校验文件大小</li><li>校验文件的媒体类型</li><li>校验文件的内容</li></ol><p>文件大小在Spring的配置文件中设置，因此已经会被校验，我们不用管。</p><p>具体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UploadController.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持的文件类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; suffixes = Arrays.asList(<span class="string">"image/png"</span>, <span class="string">"image/jpeg"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、图片信息校验</span></span><br><span class="line">            <span class="comment">// 1)校验文件类型</span></span><br><span class="line">            String type = file.getContentType();</span><br><span class="line">            <span class="keyword">if</span> (!suffixes.contains(type)) &#123;</span><br><span class="line">                logger.info(<span class="string">"上传失败，文件类型不匹配：&#123;&#125;"</span>, type);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2)校验图片内容</span></span><br><span class="line">            BufferedImage image = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">"上传失败，文件内容不符合要求"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2、保存图片</span></span><br><span class="line">            <span class="comment">// 2.1、生成保存目录</span></span><br><span class="line">            File dir = <span class="keyword">new</span> File(<span class="string">"D:\\heima\\upload"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2、保存图片</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> File(dir, file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.3、拼接图片地址</span></span><br><span class="line">            String url = <span class="string">"http://image.leyou.com/upload/"</span> + file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> List&lt;String&gt; allowTypes = Arrays.asList(<span class="string">"image/jpeg"</span>, <span class="string">"image/png"</span>, <span class="string">"image/bmp"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//校验文件类型</span></span><br><span class="line">            String contentType = file.getContentType();</span><br><span class="line">            <span class="keyword">if</span> (!allowTypes.contains(contentType)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.FILE_TYPE_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//校验文件内容</span></span><br><span class="line">            BufferedImage image = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.FILE_TYPE_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//准备目标路径</span></span><br><span class="line">            File dest = <span class="keyword">new</span> File(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\初识项目\\leyou_upload"</span>, file.getOriginalFilename());</span><br><span class="line">            <span class="comment">//保存文件到本地</span></span><br><span class="line">            file.transferTo(dest);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//返回文件地址</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"http://image/leyou.com/"</span> + file.getOriginalFilename();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"上传文件失败"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.UPLOAD_FILE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有一个问题：为什么图片地址需要使用另外的url？</p><ul><li>图片不能保存在服务器内部，这样会对服务器产生额外的加载负担</li><li>一般静态资源都应该使用独立域名，这样访问静态资源时不会携带一些不必要的cookie，减小请求的数据量</li></ul><h3 id="2-2-3-测试上传"><a href="#2-2-3-测试上传" class="headerlink" title="2.2.3.测试上传"></a>2.2.3.测试上传</h3><p>我们通过RestClient工具来测试：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526196967376.png" alt="1526196967376"></p><p>结果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526197027688.png" alt="1526197027688"></p><p>去目录下查看：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526197060729.png" alt="1526197060729"></p><p>上传成功！</p><h3 id="2-2-4-绕过网关"><a href="#2-2-4-绕过网关" class="headerlink" title="2.2.4.绕过网关"></a>2.2.4.绕过网关</h3><p>图片上传是文件的传输，如果也经过Zuul网关的代理，文件就会经过多次网路传输，造成不必要的网络负担。在高并发时，可能导致网络阻塞，Zuul网关不可用。这样我们的整个系统就瘫痪了。</p><p>所以，我们上传文件的请求就不经过网关来处理了。</p><h4 id="2-2-4-1-Zuul的路由过滤"><a href="#2-2-4-1-Zuul的路由过滤" class="headerlink" title="2.2.4.1.Zuul的路由过滤"></a>2.2.4.1.Zuul的路由过滤</h4><p>Zuul中提供了一个ignored-patterns属性，用来忽略不希望路由的URL路径，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zuul.ignored-patterns: /upload/**</span><br></pre></td></tr></table></figure><p>路径过滤会对一切微服务进行判定。</p><p>Zuul还提供了<code>ignored-services</code>属性，进行服务过滤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zuul.ignored-services: upload-servie</span><br></pre></td></tr></table></figure><p>我们这里采用忽略服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  ignored-services:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">upload-service</span> <span class="comment"># 忽略upload-service服务</span></span><br></pre></td></tr></table></figure><p>上面的配置采用了集合语法，代表可以配置多个</p><h4 id="2-2-4-2-Nginx的rewrite指令"><a href="#2-2-4-2-Nginx的rewrite指令" class="headerlink" title="2.2.4.2.Nginx的rewrite指令"></a>2.2.4.2.Nginx的rewrite指令</h4><p>现在，我们修改页面的访问路径：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-upload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"brand.image"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">url</span>=<span class="string">"/upload/image"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:multiple</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:pic-width</span>=<span class="string">"250"</span> <span class="attr">:pic-height</span>=<span class="string">"90"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br></pre></td></tr></table></figure><p>查看页面的请求路径：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526196446765.png" alt="1526196446765"></p><p>可以看到这个地址不对，依然是去找Zuul网关，因为我们的系统全局配置了URL地址。怎么办？</p><p>有同学会想：修改页面请求地址不就好了。</p><p>注意：原则上，我们是不能把除了网关以外的服务对外暴露的，不安全。</p><p>既然不能修改页面请求，那么就只能在Nginx反向代理上做文章了。</p><p>我们修改nginx配置，将以/api/upload开头的请求拦截下来，转交到真实的服务地址:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /api/upload &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8082;</span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写大家觉得对不对呢？</p><p>显然是不对的，因为ip和端口虽然对了，但是路径没变，依然是：<a href="http://127.0.0.1:8002/api/upload/image" target="_blank" rel="noopener">http://127.0.0.1:8002/api/upload/image</a></p><p>前面多了一个/api</p><p>Nginx提供了rewrite指令，用于对地址进行重写，语法规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite &quot;用来匹配路径的正则&quot; 重写后的路径 [指令];</span><br></pre></td></tr></table></figure><p>我们的案例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  api.leyou.com;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 上传路径的映射</span></span><br><span class="line"><span class="attribute">location</span> /api/upload &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:8082;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">rewrite</span> <span class="string">"^/api/(.*)$"</span> /<span class="variable">$1</span> <span class="literal">break</span>; </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:10010;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>新:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  api.leyou.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /api/upload &#123;</span><br><span class="line"><span class="attribute">rewrite</span> <span class="string">"^/(.*)$"</span> /zuul/<span class="variable">$1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:10010;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>首先，我们映射路径是/api/upload，而下面一个映射路径是 / ，根据最长路径匹配原则，/api/upload优先级更高。也就是说，凡是以/api/upload开头的路径，都会被第一个配置处理</p></li><li><p><code>proxy_pass</code>：反向代理，这次我们代理到8082端口，也就是upload-service服务</p></li><li><p><code>rewrite &quot;^/api/(.*)$&quot; /$1 break</code>，路径重写：</p><ul><li><p><code>&quot;^/api/(.*)$&quot;</code>：匹配路径的正则表达式，用了分组语法，把<code>/api/</code>以后的所有部分当做1组</p></li><li><p><code>/$1</code>：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始），即<code>/api/</code>后面的所有。这样新的路径就是除去<code>/api/</code>以外的所有，就达到了去除<code>/api</code>前缀的目的</p></li><li><p><code>break</code>：指令，常用的有2个，分别是：last、break</p><ul><li>last：重写路径结束后，将得到的路径重新进行一次路径匹配</li><li>break：重写路径结束后，不再重新匹配路径。</li></ul><p>我们这里不能选择last，否则以新的路径/upload/image来匹配，就不会被正确的匹配到8082端口了</p></li></ul></li></ul><p>修改完成，输入<code>nginx -s reload</code>命令重新加载配置。然后再次上传试试。</p><h3 id="2-2-5-跨域问题"><a href="#2-2-5-跨域问题" class="headerlink" title="2.2.5.跨域问题"></a>2.2.5.跨域问题</h3><p>重启nginx，再次上传，发现报错了：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526200471676.png" alt="1526200471676"></p><p>不过庆幸的是，这个错误已经不是第一次见了，跨域问题。</p><p>我们在upload-service中添加一个CorsFilter即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://manage.leyou.com"</span>);</span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"POST"</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526200606487.png" alt="1526200606487"></p><p>不过，非常遗憾的是，访问图片地址，却没有响应。</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526200927268.png" alt="1526200927268"></p><p>这是因为我们并没有任何服务器对应image.leyou.com这个域名。。</p><p>这个问题，我们暂时放下，回头再来解决。</p><h3 id="2-2-6-之前上传的缺陷"><a href="#2-2-6-之前上传的缺陷" class="headerlink" title="2.2.6.之前上传的缺陷"></a>2.2.6.之前上传的缺陷</h3><p>先思考一下，之前上传的功能，有没有什么问题？</p><p>上传本身没有任何问题，问题出在保存文件的方式，我们是保存在服务器机器，就会有下面的问题：</p><ul><li>单机器存储，存储能力有限</li><li>无法进行水平扩展，因为多台机器的文件无法共享,会出现访问不到的情况</li><li>数据没有备份，有单点故障风险</li><li>并发能力差</li></ul><p>这个时候，最好使用分布式文件存储来代替本地文件存储。</p><h1 id="3-FastDFS"><a href="#3-FastDFS" class="headerlink" title="3.FastDFS"></a>3.FastDFS</h1><h2 id="3-1-什么是分布式文件系统"><a href="#3-1-什么是分布式文件系统" class="headerlink" title="3.1.什么是分布式文件系统"></a>3.1.什么是分布式文件系统</h2><p>分布式文件系统（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。 </p><p>通俗来讲：</p><ul><li>传统文件系统管理的文件就存储在本机。</li><li>分布式文件系统管理的文件存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问</li></ul><h2 id="3-2-什么是FastDFS"><a href="#3-2-什么是FastDFS" class="headerlink" title="3.2.什么是FastDFS"></a>3.2.什么是FastDFS</h2><p>FastDFS是由淘宝的余庆先生所开发的一个轻量级、高性能的开源分布式文件系统。用纯C语言开发，功能丰富：</p><ul><li>文件存储</li><li>文件同步</li><li>文件访问（上传、下载）</li><li>存取负载均衡</li><li>在线扩容</li></ul><p>适合有大容量存储需求的应用或系统。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。</p><h2 id="3-3-FastDFS的架构"><a href="#3-3-FastDFS的架构" class="headerlink" title="3.3.FastDFS的架构"></a>3.3.FastDFS的架构</h2><h3 id="3-3-1-架构图"><a href="#3-3-1-架构图" class="headerlink" title="3.3.1.架构图"></a>3.3.1.架构图</h3><p>先上图：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526205318630.png" alt="1526205318630"></p><p>FastDFS两个主要的角色：Tracker Server 和 Storage Server 。</p><ul><li>Tracker Server：跟踪服务器，主要负责调度storage节点与client通信，在访问上起负载均衡的作用，和记录storage节点的运行状态，是连接client和storage节点的枢纽。 </li><li>Storage Server：存储服务器，保存文件和文件的meta data（元数据），每个storage server会启动一个单独的线程主动向Tracker cluster中每个tracker server报告其状态信息，包括磁盘使用情况，文件同步情况及文件上传下载次数统计等信息</li><li>Group：文件组，多台Storage Server的集群。上传一个文件到同组内的一台机器上后，FastDFS会将该文件即时同步到同组内的其它所有机器上，起到备份的作用。不同组的服务器，保存的数据不同，而且相互独立，不进行通信。 </li><li>Tracker Cluster：跟踪服务器的集群，有一组Tracker Server（跟踪服务器）组成。</li><li>Storage Cluster ：存储集群，有多个Group组成。</li></ul><h3 id="3-3-2-上传和下载流程"><a href="#3-3-2-上传和下载流程" class="headerlink" title="3.3.2.上传和下载流程"></a>3.3.2.上传和下载流程</h3><blockquote><p>上传</p></blockquote><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526205664373.png" alt="1526205664373"></p><ol><li>Client通过Tracker server查找可用的Storage server。</li><li>Tracker server向Client返回一台可用的Storage server的IP地址和端口号。</li><li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并进行文件上传。</li><li>上传完成，Storage server返回Client一个文件ID，文件上传结束。</li></ol><blockquote><p>下载</p></blockquote><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526205705687.png" alt="1526205705687"></p><ol><li>Client通过Tracker server查找要下载文件所在的的Storage server。</li><li>Tracker server向Client返回包含指定文件的某个Storage server的IP地址和端口号。</li><li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并指定要下载文件。</li><li>下载文件成功。</li></ol><h2 id="3-4-安装和使用"><a href="#3-4-安装和使用" class="headerlink" title="3.4.安装和使用"></a>3.4.安装和使用</h2><p>参考课前资料的：《centos安装FastDFS.md》</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526205975025.png" alt="1526205975025"></p><h2 id="3-5-java客户端"><a href="#3-5-java客户端" class="headerlink" title="3.5.java客户端"></a>3.5.java客户端</h2><p>余庆先生提供了一个Java客户端，但是作为一个C程序员，写的java代码可想而知。而且已经很久不维护了。</p><p>这里推荐一个开源的FastDFS客户端，支持最新的SpringBoot2.0。</p><p>配置使用极为简单，支持连接池，支持自动生成缩略图，狂拽酷炫吊炸天啊，有木有。</p><p>地址：<a href="https://github.com/tobato/FastDFS_Client" target="_blank" rel="noopener">tobato/FastDFS_client</a></p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526206304954.png" alt="1526206304954"></p><h3 id="3-5-1-引入依赖"><a href="#3-5-1-引入依赖" class="headerlink" title="3.5.1.引入依赖"></a>3.5.1.引入依赖</h3><p>在父工程中，我们已经管理了依赖，版本为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fastDFS.client.version</span>&gt;</span>1.26.2<span class="tag">&lt;/<span class="name">fastDFS.client.version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此，这里我们直接引入坐标即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-2-引入配置类"><a href="#3-5-2-引入配置类" class="headerlink" title="3.5.2.引入配置类"></a>3.5.2.引入配置类</h3><p>纯java配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@Import</span>(FdfsClientConfig.class)</span><br><span class="line"><span class="comment">// 解决jmx重复注册bean的问题</span></span><br><span class="line"><span class="meta">@EnableMBeanExport</span>(registration = RegistrationPolicy.IGNORE_EXISTING)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastClientImporter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-编写FastDFS属性"><a href="#3-5-3-编写FastDFS属性" class="headerlink" title="3.5.3.编写FastDFS属性"></a>3.5.3.编写FastDFS属性</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line"><span class="attr">  so-timeout:</span> <span class="number">1501</span></span><br><span class="line"><span class="attr">  connect-timeout:</span> <span class="number">601</span></span><br><span class="line"><span class="attr">  thumb-image:</span> <span class="comment"># 缩略图</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">  tracker-list:</span> <span class="comment"># tracker地址</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">192.168</span><span class="number">.20</span><span class="number">.56</span><span class="string">:22122</span></span><br></pre></td></tr></table></figure><h3 id="3-5-4-测试"><a href="#3-5-4-测试" class="headerlink" title="3.5.4.测试"></a>3.5.4.测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = LyUploadService.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FdfsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThumbImageConfig thumbImageConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpload</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\jhmarryme\\Pictures\\Saved Pictures\\doge.jpg"</span>);</span><br><span class="line">        <span class="comment">// 上传并且生成缩略图</span></span><br><span class="line">        StorePath storePath = <span class="keyword">this</span>.storageClient.uploadFile(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(file), file.length(), <span class="string">"jpg"</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">"**************************"</span>);</span><br><span class="line">        System.out.println(FilenameUtils.getExtension(file.getName()));</span><br><span class="line">        <span class="comment">// 带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getFullPath());</span><br><span class="line">        <span class="comment">// 不带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUploadAndCreateThumb</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\jhmarryme\\Pictures\\Saved Pictures\\RAIA([@[IQ&#123;0S67@W42D][M.png"</span>);</span><br><span class="line">        <span class="comment">// 上传并且生成缩略图</span></span><br><span class="line">        StorePath storePath = <span class="keyword">this</span>.storageClient.uploadImageAndCrtThumbImage(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(file), file.length(), <span class="string">"png"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getFullPath());</span><br><span class="line">        <span class="comment">// 不带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getPath());</span><br><span class="line">        <span class="comment">// 获取缩略图路径</span></span><br><span class="line">        String path = thumbImageConfig.getThumbImagePath(storePath.getPath());</span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">group1/M00/00/00/wKg4ZVro5eCAZEMVABfYcN8vzII630.png</span><br><span class="line">M00/00/00/wKg4ZVro5eCAZEMVABfYcN8vzII630.png</span><br><span class="line">M00/00/00/wKg4ZVro5eCAZEMVABfYcN8vzII630_60x60.png</span><br></pre></td></tr></table></figure><p>访问第一个路径：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526215187172.png" alt="1526215187172"></p><p>访问最后一个路径（缩略图路径），注意加组名：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526215257110.png" alt="1526215257110"></p><h3 id="3-5-5-改造上传逻辑"><a href="#3-5-5-改造上传逻辑" class="headerlink" title="3.5.5.改造上传逻辑"></a>3.5.5.改造上传逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(UploadProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadProperties uploadProperties;</span><br><span class="line"><span class="comment">//    public final List&lt;String&gt; allowTypes = Arrays.asList("image/jpeg", "image/png", "image/bmp");</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//校验文件类型</span></span><br><span class="line">            String contentType = file.getContentType();</span><br><span class="line">            <span class="keyword">if</span> (!uploadProperties.getAllowTypes().contains(contentType)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.FILE_TYPE_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//校验文件内容</span></span><br><span class="line">            BufferedImage image = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.FILE_TYPE_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            //准备目标路径</span></span><br><span class="line"><span class="comment">//            File dest = new File("D:\\WJH-workSpace\\code\\java\\new\\初识项目\\leyou_upload", file.getOriginalFilename());</span></span><br><span class="line"><span class="comment">//            //保存文件到本地</span></span><br><span class="line"><span class="comment">//            file.transferTo(dest);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取文件的后缀名</span></span><br><span class="line">            String extension = FilenameUtils.getExtension(file.getOriginalFilename());</span><br><span class="line">            <span class="comment">//上传文件到Fastdfs服务器</span></span><br><span class="line">            StorePath storePath = storageClient.uploadFile(file.getInputStream(), file.getSize(), extension, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//返回文件地址</span></span><br><span class="line">            <span class="keyword">return</span> uploadProperties.getBaseUrl() + storePath.getFullPath();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"上传文件失败"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.UPLOAD_FILE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要把原来保存文件的逻辑去掉，然后上传到FastDFS即可。</p><h3 id="3-5-6-测试"><a href="#3-5-6-测试" class="headerlink" title="3.5.6.测试"></a>3.5.6.测试</h3><p>通过RestClient测试：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526215940805.png" alt="1526215940805"></p><h2 id="3-6-页面测试上传"><a href="#3-6-页面测试上传" class="headerlink" title="3.6.页面测试上传"></a>3.6.页面测试上传</h2><p>发现上传成功：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526216133300.png" alt="1526216133300"></p><p>不过，当我们访问页面时：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526216178123.png" alt="1526216178123"></p><p>这是因为我们图片是上传到虚拟机的，ip为：192.168.56.101</p><p>因此，我们需要将image.leyou.com映射到192.168.56.101</p><p>修改我们的hosts：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526216272835.png" alt="1526216272835"></p><p>再次上传：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526216322359.png" alt="1526216322359"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-实现图片上传&quot;&gt;&lt;a href=&quot;#2-实现图片上传&quot; class=&quot;headerlink&quot; title=&quot;2.实现图片上传&quot;&gt;&lt;/a&gt;2.实现图片上传&lt;/h1&gt;&lt;p&gt;刚才的新增实现中，我们并没有上传图片，接下来我们一起完成图片上传逻辑。&lt;/p&gt;
&lt;p&gt;文件的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E5%93%81%E7%89%8C%E6%96%B0%E5%A2%9E%E5%90%8E%E7%9A%84%E5%85%B3%E9%97%AD%E5%BC%B9%E7%AA%97/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/待整理/品牌新增后的关闭弹窗/</id>
    <published>2019-05-19T14:44:43.384Z</published>
    <updated>2019-05-19T14:48:58.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-4-新增完成后关闭窗口"><a href="#1-4-新增完成后关闭窗口" class="headerlink" title="1.4.新增完成后关闭窗口"></a>1.4.新增完成后关闭窗口</h2><p>我们发现有一个问题：新增不管成功还是失败，窗口都一致在这里，不会关闭。</p><p>这样很不友好，我们希望如果新增失败，窗口保持；但是新增成功，窗口关闭才对。</p><p>因此，我们需要<strong>在新增的ajax请求完成以后，关闭窗口</strong></p><p>但问题在于，控制窗口是否显示的标记在父组件：MyBrand.vue中。子组件如何才能操作父组件的属性？或者告诉父组件该关闭窗口了？</p><p>之前我们讲过一个父子组件的通信，有印象吗？</p><ul><li>第一步，在父组件中定义一个函数，用来关闭窗口，不过之前已经定义过了，我们优化一下，关闭的同时重新加载数据：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">closeWindow()&#123;</span><br><span class="line">    <span class="comment">// 关闭窗口</span></span><br><span class="line">    <span class="keyword">this</span>.show = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 重新加载数据</span></span><br><span class="line">    <span class="keyword">this</span>.getDataFromServer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二步，父组件在使用子组件时，绑定事件，关联到这个函数：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对话框的内容，表单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-card-text</span> <span class="attr">class</span>=<span class="string">"px-5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-brand-form</span> @<span class="attr">close</span>=<span class="string">"closeWindow"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-card-text</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>第三步，子组件通过<code>this.$emit</code>调用父组件的函数：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526216993249.png" alt="1526216993249"></p></li></ul><p>测试一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-4-新增完成后关闭窗口&quot;&gt;&lt;a href=&quot;#1-4-新增完成后关闭窗口&quot; class=&quot;headerlink&quot; title=&quot;1.4.新增完成后关闭窗口&quot;&gt;&lt;/a&gt;1.4.新增完成后关闭窗口&lt;/h2&gt;&lt;p&gt;我们发现有一个问题：新增不管成功还是失败，窗口都一致
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E5%93%81%E7%89%8C%E6%96%B0%E5%A2%9E%E5%90%8E%E7%AB%AF%E5%AE%9E%E7%8E%B0/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/待整理/品牌新增后端实现/</id>
    <published>2019-05-19T14:41:51.963Z</published>
    <updated>2019-05-19T14:55:06.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2-后台实现新增"><a href="#1-2-后台实现新增" class="headerlink" title="1.2.后台实现新增"></a>1.2.后台实现新增</h2><h3 id="1-2-1-controller"><a href="#1-2-1-controller" class="headerlink" title="1.2.1.controller"></a>1.2.1.controller</h3><p>还是一样，先分析四个内容：</p><ul><li>请求方式：刚才看到了是POST</li><li>请求路径：/brand</li><li>请求参数：brand对象，外加商品分类的id数组cids</li><li>返回值：无</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增品牌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveBrand</span><span class="params">(Brand brand, @RequestParam(<span class="string">"cids"</span>)</span> List&lt;Long&gt; cids) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.brandService.saveBrand(brand, cids);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.CREATED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-Service"><a href="#1-2-2-Service" class="headerlink" title="1.2.2.Service"></a>1.2.2.Service</h3><p>这里要注意，我们不仅要新增品牌，还要维护品牌和商品分类的中间表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBrand</span><span class="params">(Brand brand, List&lt;Long&gt; cids)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 新增品牌信息</span></span><br><span class="line">    <span class="keyword">this</span>.brandMapper.insertSelective(brand);</span><br><span class="line">    <span class="comment">// 新增品牌和分类中间表</span></span><br><span class="line">    <span class="keyword">for</span> (Long cid : cids) &#123;</span><br><span class="line">        <span class="keyword">this</span>.brandMapper.insertCategoryBrand(cid, brand.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了brandMapper中的一个自定义方法，来实现中间表的数据新增</p><h3 id="1-2-3-Mapper"><a href="#1-2-3-Mapper" class="headerlink" title="1.2.3.Mapper"></a>1.2.3.Mapper</h3><p>通用Mapper只能处理单表，也就是Brand的数据，因此我们手动编写一个方法及sql，实现中间表的新增：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增商品分类和品牌中间表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid 商品分类id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid 品牌id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO tb_category_brand (category_id, brand_id) VALUES (#&#123;cid&#125;,#&#123;bid&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertCategoryBrand</span><span class="params">(@Param(<span class="string">"cid"</span>)</span> Long cid, @<span class="title">Param</span><span class="params">(<span class="string">"bid"</span>)</span> Long bid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-请求参数格式错误"><a href="#1-3-请求参数格式错误" class="headerlink" title="1.3.请求参数格式错误"></a>1.3.请求参数格式错误</h2><h3 id="1-3-1-原因分析"><a href="#1-3-1-原因分析" class="headerlink" title="1.3.1.原因分析"></a>1.3.1.原因分析</h3><p>我们填写表单并提交，发现报错了：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526180888663.png" alt="1526180888663"></p><p>查看控制台的请求详情：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526180937974.png" alt="1526180937974"></p><p>发现请求的数据格式是JSON格式。</p><blockquote><p>原因分析：</p></blockquote><p>axios处理请求体的原则会根据请求数据的格式来定：</p><ul><li><p>如果请求体是对象：会转为json发送</p></li><li><p>如果请求体是String：会作为普通表单请求发送，但需要我们自己保证String的格式是键值对。</p><p>如：name=jack&amp;age=12</p></li></ul><h3 id="1-3-2-QS工具"><a href="#1-3-2-QS工具" class="headerlink" title="1.3.2.QS工具"></a>1.3.2.QS工具</h3><p>QS是一个第三方库，我们可以用<code>npm install qs --save</code>来安装。不过我们在项目中已经集成了，大家无需安装：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526181889564.png" alt="1526181889564"></p><p>这个工具的名字：QS，即Query String，请求参数字符串。</p><p>什么是请求参数字符串？例如： name=jack&amp;age=21</p><p>QS工具可以便捷的实现 JS的Object与QueryString的转换。</p><p>在我们的项目中，将QS注入到了Vue的原型对象中，我们可以通过<code>this.$qs</code>来获取这个工具：</p><p>我们将<code>this.$qs</code>对象打印到控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$qs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现其中有3个方法：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526181747560.png" alt="1526181747560"></p><p>这里我们要使用的方法是stringify，它可以把Object转为QueryString。</p><p>测试一下，使用浏览器工具，把qs对象保存为一个临时变量：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526182053758.png" alt="1526182053758"></p><p>然后调用stringify方法：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526182230872.png" alt="1526182230872"></p><p>成功将person对象变成了 name=jack&amp;age=21的字符串了</p><h3 id="1-3-3-解决问题"><a href="#1-3-3-解决问题" class="headerlink" title="1.3.3.解决问题"></a>1.3.3.解决问题</h3><p>修改页面，对参数处理后发送：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526181301670.png" alt="1526181301670"></p><p>然后再次发起请求：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526181331443.png" alt="1526181331443"></p><p>发现请求成功：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526181358204.png" alt="1526181358204"></p><p>参数格式：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526181384653.png" alt="1526181384653"></p><p>数据库：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526181553737.png" alt="1526181553737"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-2-后台实现新增&quot;&gt;&lt;a href=&quot;#1-2-后台实现新增&quot; class=&quot;headerlink&quot; title=&quot;1.2.后台实现新增&quot;&gt;&lt;/a&gt;1.2.后台实现新增&lt;/h2&gt;&lt;h3 id=&quot;1-2-1-controller&quot;&gt;&lt;a href=&quot;#1-2-1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E5%93%81%E7%89%8C%E6%96%B0%E5%A2%9Evue%E7%95%8C%E9%9D%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/待整理/品牌新增vue界面搭建/</id>
    <published>2019-05-19T14:39:57.545Z</published>
    <updated>2019-05-19T14:44:23.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-品牌的新增"><a href="#1-品牌的新增" class="headerlink" title="1.品牌的新增"></a>1.品牌的新增</h1><p>昨天我们完成了品牌的查询，接下来就是新增功能。</p><h2 id="1-1-页面实现"><a href="#1-1-页面实现" class="headerlink" title="1.1.页面实现"></a>1.1.页面实现</h2><h3 id="1-1-1-初步编写弹窗"><a href="#1-1-1-初步编写弹窗" class="headerlink" title="1.1.1.初步编写弹窗"></a>1.1.1.初步编写弹窗</h3><p>当我们点击新增按钮，应该出现一个弹窗，然后在弹窗中出现一个表格，我们就可以填写品牌信息了。</p><p>我们查看Vuetify官网，弹窗是如何实现：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526115791468.png" alt="1526115791468"></p><p>另外，我们可以通过文档看到对话框的一些属性：</p><ul><li>value：控制窗口的可见性，true可见，false，不可见</li><li>max-width：控制对话框最大宽度</li><li>scrollable ：是否可滚动，要配合v-card来使用，默认是false</li><li>persistent ：点击弹窗以外的地方不会关闭弹窗，默认是false</li></ul><p>现在，我们来使用一下。</p><p>首先，我们在data中定义一个show属性，来控制对话框的显示状态：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526116451280.png" alt="1526116451280"></p><p>然后，在页面添加一个<code>v-dialog</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--弹出的对话框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-dialog</span> <span class="attr">max-width</span>=<span class="string">"500"</span> <span class="attr">v-model</span>=<span class="string">"show"</span> <span class="attr">persistent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-card</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对话框的标题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-toolbar</span> <span class="attr">dense</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">v-toolbar-title</span>&gt;</span>新增品牌<span class="tag">&lt;/<span class="name">v-toolbar-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">v-toolbar</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对话框的内容，表单--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-card-text</span> <span class="attr">class</span>=<span class="string">"px-5"</span>&gt;</span></span><br><span class="line">            我是表单</span><br><span class="line">        <span class="tag">&lt;/<span class="name">v-card-text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><p>我们给dialog指定了3个属性，分别是</p><ul><li>max-width：限制宽度</li><li>v-model：value值双向绑定到show变量，用来控制窗口显示</li><li>persisitent：控制窗口不会被意外关闭</li></ul></li><li><p>因为可滚动需要配合<code>v-card</code>使用，因此我们在对话框中加入了一个<code>v-card</code></p><ul><li>在<code>v-card</code>的头部添加了一个 <code>v-toolbar</code>，作为窗口的头部，并且写了标题为：新增品牌<ul><li>dense：紧凑显示</li><li>dark：黑暗主题</li><li>color：颜色，primary就是整个网站的主色调，蓝色</li></ul></li><li>在<code>v-card</code>的内容部分，暂时空置，等会写表单</li></ul></li><li><p><code>class=“px-5&quot;</code>：vuetify的内置样式，含义是padding的x轴设置为5，这样表单内容会缩进一些，而不是顶着边框</p><p>基本语法：<code>{property}{direction}-{size}</code></p><ul><li>property：属性，有两种<code>padding</code>和<code>margin</code><ul><li><code>p</code>：对应<code>padding</code></li><li><code>m</code>：对应<code>margin</code></li></ul></li><li>direction：只padding和margin的作用方向，<ul><li><code>t</code> - 对应<code>margin-top</code>或者<code>padding-top</code>属性</li><li><code>b</code> - 对应<code>margin-bottom</code> or <code>padding-bottom</code></li><li><code>l</code> - 对应<code>margin-left</code> or <code>padding-left</code></li><li><code>r</code> - 对应<code>margin-right</code> or <code>padding-right</code></li><li><code>x</code> - 同时对应<code>*-left</code>和<code>*-right</code>属性</li><li><code>y</code> - 同时对应<code>*-top</code>和<code>*-bottom</code>属性</li></ul></li><li>size：控制空间大小，基于<code>$spacer</code>进行倍增，<code>$spacer</code>默认是16px<ul><li><code>0</code>：将<code>margin</code>或padding的大小设置为0</li><li><code>1</code> - 将<code>margin</code>或者<code>padding</code>属性设置为<code>$spacer * .25</code></li><li><code>2</code> - 将<code>margin</code>或者<code>padding</code>属性设置为<code>$spacer * .5</code></li><li><code>3</code> - 将<code>margin</code>或者<code>padding</code>属性设置为<code>$spacer</code></li><li><code>4</code> - 将<code>margin</code>或者<code>padding</code>属性设置为<code>$spacer * 1.5</code></li><li><code>5</code> - 将<code>margin</code>或者<code>padding</code>属性设置为<code>$spacer * 3</code></li></ul></li></ul></li></ul><h3 id="1-1-2-实现弹窗的可见和关闭"><a href="#1-1-2-实现弹窗的可见和关闭" class="headerlink" title="1.1.2.实现弹窗的可见和关闭"></a>1.1.2.实现弹窗的可见和关闭</h3><blockquote><p>窗口可见</p></blockquote><p>接下来，我们要在点击新增品牌按钮时，将窗口显示，因此要给新增按钮绑定事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;v-btn color=<span class="string">"primary"</span> @click=<span class="string">"addBrand"</span>&gt;新增品牌&lt;<span class="regexp">/v-btn&gt;</span></span><br></pre></td></tr></table></figure><p>然后定义一个addBrand方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addBrand()&#123;</span><br><span class="line">    <span class="comment">// 控制弹窗可见：</span></span><br><span class="line">    <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526118714621.png" alt="1526118714621"></p><blockquote><p>窗口关闭</p></blockquote><p>现在，悲剧发生了，因为我们设置了persistent属性，窗口无法被关闭了。除非把show属性设置为false</p><p>因此我们需要给窗口添加一个关闭按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对话框的标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-toolbar</span> <span class="attr">dense</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-toolbar-title</span>&gt;</span>新增品牌<span class="tag">&lt;/<span class="name">v-toolbar-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-spacer</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关闭窗口的按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> @<span class="attr">click</span>=<span class="string">"closeWindow"</span>&gt;</span><span class="tag">&lt;<span class="name">v-icon</span>&gt;</span>close<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span><span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且，我们还给按钮绑定了点击事件，回调函数为closeWindow。</p><p>接下来，编写closeWindow函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">closeWindow()&#123;</span><br><span class="line">    <span class="comment">// 关闭窗口</span></span><br><span class="line">    <span class="keyword">this</span>.show = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526119096686.png" alt="1526119096686"></p><h3 id="1-1-3-新增品牌的表单页"><a href="#1-1-3-新增品牌的表单页" class="headerlink" title="1.1.3.新增品牌的表单页"></a>1.1.3.新增品牌的表单页</h3><p>接下来就是写表单了。我们有两种选择：</p><ul><li>直接在dialog对话框中编写表单代码</li><li>另外编写一个组件，组件内写表单代码。然后在对话框引用组件</li></ul><p>选第几种？</p><p>我们选第二种方案，优点：</p><ul><li>表单代码独立组件，可拔插，方便后期的维护。</li><li>代码分离，可读性更好。</li></ul><p>我们新建一个<code>MyBrandForm.vue</code>组件：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526119788914.png" alt="1526119788914"></p><p>将MyBrandForm引入到MyBrand中，这里使用局部组件的语法：</p><p>先导入自定义组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入自定义的表单组件</span></span><br><span class="line"><span class="keyword">import</span> MyBrandForm <span class="keyword">from</span> <span class="string">'./MyBrandForm'</span></span><br></pre></td></tr></table></figure><p>然后通过components属性来指定局部组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">    MyBrandForm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在页面中引用：</p><p>页面效果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526128384960.png" alt="1526128384960"></p><h3 id="1-1-4-编写表单"><a href="#1-1-4-编写表单" class="headerlink" title="1.1.4.编写表单"></a>1.1.4.编写表单</h3><h4 id="1-1-4-1-表单"><a href="#1-1-4-1-表单" class="headerlink" title="1.1.4.1.表单"></a>1.1.4.1.表单</h4><p>查看文档，找到关于表单的部分：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526128476264.png" alt="1526128476264"></p><p><code>v-form</code>，表单组件，内部可以有许多输入项。<code>v-form</code>有下面的属性：</p><ul><li>value：true，代表表单验证通过；false，代表表单验证失败</li></ul><p><code>v-form</code>提供了两个方法：</p><ul><li>reset：重置表单数据</li><li>validate：校验整个表单数据，前提是你写好了校验规则。返回Boolean表示校验成功或失败</li></ul><p>我们在data中定义一个valid属性，跟表单的value进行双向绑定，观察表单是否通过校验，同时把等会要跟表单关联的品牌brand对象声明出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"my-brand-form"</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      valid:<span class="literal">false</span>, <span class="comment">// 表单校验结果标记</span></span><br><span class="line">      brand:&#123;</span><br><span class="line">        name:<span class="string">''</span>, <span class="comment">// 品牌名称</span></span><br><span class="line">        letter:<span class="string">''</span>, <span class="comment">// 品牌首字母</span></span><br><span class="line">        image:<span class="string">''</span>,<span class="comment">// 品牌logo</span></span><br><span class="line">        categories:[], <span class="comment">// 品牌所属的商品分类数组</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在页面先写一个表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-form</span> <span class="attr">v-model</span>=<span class="string">"valid"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-4-2-文本框"><a href="#1-1-4-2-文本框" class="headerlink" title="1.1.4.2.文本框"></a>1.1.4.2.文本框</h4><p>我们的品牌总共需要这些字段：</p><ul><li>名称</li><li>首字母</li><li>商品分类，有很多个</li><li>LOGO</li></ul><p>表单项主要包括文本框、密码框、多选框、单选框、文本域、下拉选框、文件上传等。思考下我们的品牌需要哪些？</p><ul><li>文本框：品牌名称、品牌首字母都属于文本框</li><li>文件上传：品牌需要图片，这个是文件上传框</li><li>下拉选框：商品分类提前已经定义好，这里需要通过下拉选框展示，提供给用户选择。</li></ul><p>先看文本框，昨天已经用过的，叫做<code>v-text-field</code>：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526129519056.png" alt="1526129519056"></p><p>查看文档，<code>v-text-field</code>有以下关键属性：</p><ul><li><strong>append-icon</strong>：文本框后追加图标，需要填写图标名称。无默认值</li><li>clearable：是否添加一个清空图标，点击会清空文本框。默认是false</li><li>color：颜色</li><li>counter：是否添加一个文本计数器，在角落显示文本长度，指定true或允许的组大长度。无默认值</li><li>dark：是否应用黑暗色调，默认是false</li><li>disable：是否禁用，默认是false</li><li>flat：是否移除默认的动画效果，默认是false</li><li>full-width：指定宽度为全屏，默认是false</li><li>hide-details：是否因此错误提示，默认是false</li><li>hint：输入框的提示文本</li><li><strong>label</strong>：输入框的标签</li><li><strong>multi-line</strong>：是否转为文本域，默认是false。文本框和文本域可以自由切换</li><li>placeholder：输入框占位符文本，focus后消失</li><li><strong>required</strong>：是否为必填项，如果是，会在label后加*，不具备校验功能。默认是false</li><li><strong>rows</strong>：文本域的行数，<code>multi-line</code>为true时才有效</li><li><strong>rules</strong>：指定校验规则及错误提示信息，数组结构。默认[]</li><li><strong>single-line</strong>：是否单行文本显示，默认是false</li><li><strong>suffix</strong>：显示后缀</li></ul><p>接下来，我们先添加两个字段：品牌名称、品牌的首字母，校验规则暂时不写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-form</span> <span class="attr">v-model</span>=<span class="string">"valid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">v-model</span>=<span class="string">"brand.name"</span> <span class="attr">label</span>=<span class="string">"请输入品牌名称"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">v-model</span>=<span class="string">"brand.letter"</span> <span class="attr">label</span>=<span class="string">"请输入品牌首字母"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>千万不要忘了通过<code>v-model</code>把表单项与<code>brand</code>的属性关联起来。</li></ul><p>效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526131172190.png" alt="1526131172190"></p><h4 id="1-1-4-3-级联下拉选框"><a href="#1-1-4-3-级联下拉选框" class="headerlink" title="1.1.4.3.级联下拉选框"></a>1.1.4.3.级联下拉选框</h4><p>接下来就是商品分类了，按照刚才的分析，商品分类应该是下拉选框。</p><p>但是大家仔细思考，商品分类包含三级。在展示的时候，应该是先由用户选中1级，才显示2级；选择了2级，才显示3级。形成一个多级分类的三级联动效果。</p><p>这个时候，就不是普通的下拉选框，而是三级联动的下拉选框！</p><p>这样的选框，在Vuetify中并没有提供（它提供的是基本的下拉框）。因此我已经给大家编写了一个无限级联动的下拉选框，能够满足我们的需求。</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526131637045.png" alt="1526131637045"></p><p>具体请参考课前资料的《自定义组件用法指南.md》</p><p>我们在代码中使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;v-cascader</span><br><span class="line">  url=<span class="string">"/item/category/list"</span></span><br><span class="line">  multiple </span><br><span class="line">  required</span><br><span class="line">  v-model=<span class="string">"brand.categories"</span></span><br><span class="line">  label=<span class="string">"请选择商品分类"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>url：加载商品分类选项的接口路径</li><li>multiple：是否多选，这里设置为true，因为一个品牌可能有多个分类</li><li>requried：是否是必须的，这里为true，会在提示上加*，提醒用户</li><li>v-model：关联我们brand对象的categories属性</li><li>label：文字说明</li></ul><p>效果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526132934902.png" alt="1526132934902"></p><p>data中获取的结果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526133224362.png" alt="1526133224362"></p><h4 id="1-1-4-4-文件上传项"><a href="#1-1-4-4-文件上传项" class="headerlink" title="1.1.4.4.文件上传项"></a>1.1.4.4.文件上传项</h4><p>在Vuetify中，也没有文件上传的组件。</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/0B26B319.gif" alt="img"> </p><p>还好，我已经给大家写好了一个文件上传的组件：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526133576597.png" alt="1526133576597"></p><p>详细用法，参考《自定义组件使用指南.md》</p><p>我们添加上传的组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-layout</span> <span class="attr">row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-flex</span> <span class="attr">xs3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size: 16px; color: #444"</span>&gt;</span>品牌LOGO：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-flex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-flex</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-upload</span></span></span><br><span class="line"><span class="tag">             <span class="attr">v-model</span>=<span class="string">"brand.image"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">url</span>=<span class="string">"/upload"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">:multiple</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">:pic-width</span>=<span class="string">"250"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">:pic-height</span>=<span class="string">"90"</span></span></span><br><span class="line"><span class="tag">                  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-flex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>文件上传组件本身没有提供文字提示。因此我们需要自己添加一段文字说明</li><li>我们要实现文字和图片组件左右放置，因此这里使用了<code>v-layout</code>布局组件：<ul><li>layout添加了row属性，代表这是一行，如果是column，代表是多行</li><li>layout下面有<code>v-flex</code>组件，是这一行的单元，我们有2个单元<ul><li><code>&lt;v-flex xs3&gt;</code> ：显示文字说明，xs3是响应式布局，代表占12格中的3格</li><li>剩下的部分就是图片上传组件了</li></ul></li></ul></li><li><code>v-upload</code>：图片上传组件，包含以下属性：<ul><li>v-model：将上传的结果绑定到brand的image属性</li><li>url：上传的路径，我们先随便写一个。</li><li>multiple：是否运行多图片上传，这里是false。因为品牌LOGO只有一个</li><li>pic-width和pic-height：可以控制l图片上传后展示的宽高</li></ul></li></ul><p>最终结果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526136024649.png" alt="1526136024649"></p><h4 id="1-1-4-5-按钮"><a href="#1-1-4-5-按钮" class="headerlink" title="1.1.4.5.按钮"></a>1.1.4.5.按钮</h4><p>上面已经把所有的表单项写完。最后就差提交和清空的按钮了。</p><p>在表单的最下面添加两个按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-layout</span> <span class="attr">class</span>=<span class="string">"my-4"</span> <span class="attr">row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-spacer</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-btn</span> @<span class="attr">click</span>=<span class="string">"submit"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-btn</span> @<span class="attr">click</span>=<span class="string">"clear"</span> &gt;</span>重置<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过layout来进行布局，<code>my-4</code>增大上下边距</li><li><code>v-spacer</code>占用一定空间，将按钮都排挤到页面右侧</li><li>两个按钮分别绑定了submit和clear事件</li></ul><p>我们先将方法定义出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    submit()&#123;</span><br><span class="line">        <span class="comment">// 提交表单</span></span><br><span class="line">    &#125;,</span><br><span class="line">    clear()&#123;</span><br><span class="line">        <span class="comment">// 重置表单</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重置表单相对简单，因为v-form组件已经提供了reset方法，用来清空表单数据。只要我们拿到表单组件对象，就可以调用方法了。</p><p>我们可以通过<code>$refs</code>内置对象来获取表单组件。</p><p>首先，在表单上定义<code>ref</code>属性：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526137891067.png" alt="1526137891067"></p><p>然后，在页面查看<code>this.$refs</code>属性：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526138030853.png" alt="1526138030853"></p><p>看到<code>this.$refs</code>中只有一个属性，就是<code>myBrandForm</code></p><p>我们在clear中来获取表单对象并调用reset方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  submit()&#123;</span><br><span class="line">    <span class="comment">// 提交表单</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  clear()&#123;</span><br><span class="line">    <span class="comment">// 重置表单</span></span><br><span class="line">    <span class="keyword">this</span>.$refs.myBrandForm.reset();</span><br><span class="line">    <span class="comment">// 需要手动清空商品分类</span></span><br><span class="line">    <span class="keyword">this</span>.categories = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意的是，这里我们还手动把this.categories清空了，因为我写的级联选择组件并没有跟表单结合起来。需要手动清空。</p><h3 id="1-1-5-表单校验"><a href="#1-1-5-表单校验" class="headerlink" title="1.1.5.表单校验"></a>1.1.5.表单校验</h3><h4 id="1-1-5-1-校验规则"><a href="#1-1-5-1-校验规则" class="headerlink" title="1.1.5.1.校验规则"></a>1.1.5.1.校验规则</h4><p>Vuetify的表单校验，是通过rules属性来指定的：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526138441735.png" alt="1526138441735"></p><p>校验规则的写法：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526138475159.png" alt="1526138475159"></p><p>说明：</p><ul><li>规则是一个数组</li><li>数组中的元素是一个函数，该函数接收表单项的值作为参数，函数返回值两种情况：<ul><li>返回true，代表成功，</li><li>返回错误提示信息，代表失败</li></ul></li></ul><h4 id="1-1-5-2-项目中代码"><a href="#1-1-5-2-项目中代码" class="headerlink" title="1.1.5.2.项目中代码"></a>1.1.5.2.项目中代码</h4><p>我们有四个字段：</p><ul><li>name：做非空校验和长度校验，长度必须大于1</li><li>letter：首字母，校验长度为1，非空。</li><li>image：图片，不做校验，图片可以为空</li><li>categories：非空校验，自定义组件已经帮我们完成，不用写了</li></ul><p>首先，我们定义规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nameRules:[</span><br><span class="line">    v =&gt; !!v || <span class="string">"品牌名称不能为空"</span>,</span><br><span class="line">    v =&gt; v.length &gt; <span class="number">1</span> || <span class="string">"品牌名称至少2位"</span></span><br><span class="line">],</span><br><span class="line">letterRules:[</span><br><span class="line">    v =&gt; !!v || <span class="string">"首字母不能为空"</span>,</span><br><span class="line">    v =&gt; <span class="regexp">/^[A-Z]&#123;1&#125;$/</span>.test(v) || <span class="string">"品牌字母只能是A~Z的大写字母"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后，在页面标签中指定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">v-model</span>=<span class="string">"brand.name"</span> <span class="attr">label</span>=<span class="string">"请输入品牌名称"</span> <span class="attr">required</span> <span class="attr">:rules</span>=<span class="string">"nameRules"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">v-model</span>=<span class="string">"brand.letter"</span> <span class="attr">label</span>=<span class="string">"请输入品牌首字母"</span> <span class="attr">required</span> <span class="attr">:rules</span>=<span class="string">"letterRules"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526139379209.png" alt="1526139379209"></p><h3 id="1-1-6-表单提交"><a href="#1-1-6-表单提交" class="headerlink" title="1.1.6.表单提交"></a>1.1.6.表单提交</h3><p>在submit方法中添加表单提交的逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">submit() &#123;</span><br><span class="line">    <span class="comment">// 1、表单校验</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$refs.myBrandForm.validate()) &#123;</span><br><span class="line">        <span class="comment">// 2、定义一个请求参数对象，通过解构表达式来获取brand中的属性</span></span><br><span class="line">        <span class="keyword">const</span> &#123;categories ,letter ,...params&#125; = <span class="keyword">this</span>.brand;</span><br><span class="line">        <span class="comment">// 3、数据库中只要保存分类的id即可，因此我们对categories的值进行处理,只保留id，并转为字符串</span></span><br><span class="line">        params.cids = categories.map(<span class="function"><span class="params">c</span> =&gt;</span> c.id).join(<span class="string">","</span>);</span><br><span class="line">        <span class="comment">// 4、将字母都处理为大写</span></span><br><span class="line">        params.letter = letter.toUpperCase();</span><br><span class="line">        <span class="comment">// 5、将数据提交到后台</span></span><br><span class="line">        <span class="keyword">this</span>.$http.post(<span class="string">'/item/brand'</span>, params)</span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 6、弹出提示</span></span><br><span class="line">            <span class="keyword">this</span>.$message.success(<span class="string">"保存成功！"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$message.error(<span class="string">"保存失败！"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>1、通过<code>this.$refs.myBrandForm</code>选中表单，然后调用表单的<code>validate</code>方法，进行表单校验。返回boolean值，true代表校验通过</p></li><li><p>2、通过解构表达式来获取brand中的值，categories和letter需要处理，单独获取。其它的存入params对象中</p></li><li><p>3、品牌和商品分类的中间表只保存两者的id，而brand.categories中保存的数对象数组，里面有id和name属性，因此这里通过数组的map功能转为id数组，然后通过join方法拼接为字符串</p></li><li><p>4、首字母都处理为大写保存</p></li><li><p>5、发起请求</p></li><li><p>6、弹窗提示成功还是失败，这里用到的是我们的自定义组件功能message组件：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526140298249.png" alt="1526140298249"></p><p>这个插件把<code>$message</code>对象绑定到了Vue的原型上，因此我们可以通过<code>this.$message</code>来直接调用。</p><p>包含以下常用方法：</p><ul><li>info、error、success、warning等，弹出一个带有提示信息的窗口，色调与为普通（灰）、错误（红色）、成功（绿色）和警告（黄色）。使用方法：this.$message.info(“msg”)</li><li>confirm：确认框。用法：<code>this.$message.confirm(&quot;确认框的提示信息&quot;)</code>，返回一个Promise</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-品牌的新增&quot;&gt;&lt;a href=&quot;#1-品牌的新增&quot; class=&quot;headerlink&quot; title=&quot;1.品牌的新增&quot;&gt;&lt;/a&gt;1.品牌的新增&lt;/h1&gt;&lt;p&gt;昨天我们完成了品牌的查询，接下来就是新增功能。&lt;/p&gt;
&lt;h2 id=&quot;1-1-页面实现&quot;&gt;&lt;a h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/webpack%E5%8F%8Avue-cli/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/待整理/webpack及vue-cli/</id>
    <published>2019-05-19T14:25:50.323Z</published>
    <updated>2019-05-19T14:25:56.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-webpack"><a href="#8-webpack" class="headerlink" title="8.webpack"></a>8.webpack</h1><p>Webpack 是一个前端资源的打包工具，它可以将js、image、css等资源当成一个模块进行打包。</p><p>中文官方网站：<a href="https://www.webpackjs.com/" target="_blank" rel="noopener">https://www.webpackjs.com/</a></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530168661348.png" alt="1530168661348"></p><p>官网给出的解释：</p><blockquote><p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。 </p></blockquote><p>为什么需要打包？</p><ul><li>将许多碎小文件打包成一个整体，减少单页面内的衍生请求次数，提高网站效率。</li><li>将ES6的高级语法进行转换编译，以兼容老版本的浏览器。</li><li>将代码打包的同时进行混淆，提高代码的安全性。</li></ul><h2 id="8-1-安装"><a href="#8-1-安装" class="headerlink" title="8.1.安装"></a>8.1.安装</h2><p>webpack支持全局安装和本地安装，官方推荐是本地安装，我们按照官方的来。</p><p>安装最新版本webpack，输入命令：<code>npm install --save-dev webpack</code></p><p> webpack 4+ 版本，你还需要安装 CLI ，输入命令：<code>npm install webpack webpack-cli --save-dev</code></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530187524815.png" alt="1530187524815"></p><p>此时，我们注意下项目中文件夹下，会有一个package.json文件。（其实早就有了）</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530187744149.png" alt="1530187744149"></p><p>打开文件，可以看到我们之前用npm安装过的文件都会出现在这里：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1525873343908.png" alt="1525873343908"></p><h2 id="8-2-核心概念"><a href="#8-2-核心概念" class="headerlink" title="8.2.核心概念"></a>8.2.核心概念</h2><p>学习Webpack，你需要先理解四个<strong>核心概念</strong>：</p><ul><li><p>入口(entry)</p><p>webpack打包的起点，可以有一个或多个，一般是js文件。webpack会从启点文件开始，寻找启点直接或间接依赖的其它所有的依赖，包括JS、CSS、图片资源等，作为将来打包的原始数据</p></li><li><p>输出(output)</p><p>出口一般包含两个属性：path和filename。用来告诉webpack打包的目标文件夹，以及文件的名称。目的地也可以有多个。</p></li><li><p>加载器（loader）</p><p>webpack本身只识别Js文件，如果要加载非JS文件，必须指定一些额外的加载器（loader），例如css-loader。然后将这些文件转为webpack能处理的有效模块，最后利用webpack的打包能力去处理。</p></li><li><p>插件(plugins)</p><p>插件可以扩展webpack的功能，让webpack不仅仅是完成打包，甚至各种更复杂的功能，或者是对打包功能进行优化、压缩，提高效率。</p></li></ul><h2 id="8-3-编写webpack配置"><a href="#8-3-编写webpack配置" class="headerlink" title="8.3.编写webpack配置"></a>8.3.编写webpack配置</h2><p>接下来，我们编写一个webpack的配置，来指定一些打包的配置项。配置文件的名称，默认就是webpack.config.js，我们放到hello-vue的根目录：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530199761226.png" alt="1530199761226"></p><p>配置文件中就是要指定上面说的四个核心概念，入口、出口、加载器、插件。</p><p>不过，加载器和插件是可选的。我们先编写入口和出口</p><h3 id="8-3-1-入口entry"><a href="#8-3-1-入口entry" class="headerlink" title="8.3.1.入口entry"></a>8.3.1.入口entry</h3><p>webpack打包的启点，可以有一个或多个，一般是js文件。现在思考一下我们有没有一个入口？貌似没有，我们所有的东西都集中在index.html，不是一个js，那怎么办？</p><p>我们新建一个js，把index.html中的部分内容进行集中，然后在index.html中引用这个js不就OK了！</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530200787599.png" alt="1530200787599"></p><p>然后把原来index.html中的js代码全部移动到index.js中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用es6的语法导入js模块</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'../node_modules/vue/dist/vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'../node_modules/vue-router/dist/vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> loginForm <span class="keyword">from</span> <span class="string">'./user/login'</span>;</span><br><span class="line"><span class="keyword">import</span> registerForm <span class="keyword">from</span> <span class="string">'./user/register'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建vue对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [ <span class="comment">// 编写路由规则</span></span><br><span class="line">        <span class="comment">// path: 路由请求路径；component：组件名称</span></span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">"/login"</span>, <span class="attr">component</span>: loginForm&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">"/register"</span>, <span class="attr">component</span>: registerForm&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        loginForm,</span><br><span class="line">        registerForm</span><br><span class="line">    &#125;,</span><br><span class="line">    router</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>原来的index.html中引入了很多其它js，在这里我们使用es6的import语法进行导入。</p></li><li><p>​</p><p>注意，要使用import，就需要在login.js和register.js中添加export导出语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loginForm=&#123;</span><br><span class="line">    template: <span class="string">'\</span></span><br><span class="line"><span class="string">       &lt;div&gt;\</span></span><br><span class="line"><span class="string">            &lt;h2&gt;登陆页&lt;/h2&gt;\</span></span><br><span class="line"><span class="string">            用户名：&lt;input type="text"&gt;&lt;br&gt;\</span></span><br><span class="line"><span class="string">            密&amp;emsp;码：&lt;input type="password"&gt;\</span></span><br><span class="line"><span class="string">       &lt;/div&gt;'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> loginForm;</span><br></pre></td></tr></table></figure><p>register.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> registerForm = &#123;</span><br><span class="line">    template:<span class="string">'\</span></span><br><span class="line"><span class="string">    &lt;div&gt;\</span></span><br><span class="line"><span class="string">    &lt;h2&gt;注册页&lt;/h2&gt; \</span></span><br><span class="line"><span class="string">    用&amp;ensp;户&amp;ensp;名：&lt;input type="text"&gt;&lt;br/&gt;\</span></span><br><span class="line"><span class="string">    密&amp;emsp;&amp;emsp;码：&lt;input type="password"&gt;&lt;br/&gt;\</span></span><br><span class="line"><span class="string">    确认密码：&lt;input type="password"&gt;&lt;br/&gt;\</span></span><br><span class="line"><span class="string">    &lt;/div&gt;\</span></span><br><span class="line"><span class="string">    '</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> registerForm;</span><br></pre></td></tr></table></figure></li><li><p>vue-router使用模块化加载后，必须增加一句：Vue.use(VueRouter)</p></li></ul><p>这样，index.js就成了我们整个配置的入口了。</p><p>我们在webpack.config.js中添加以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:<span class="string">'./src/index.js'</span>,  <span class="comment">//指定打包的入口文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-2-出口output"><a href="#8-3-2-出口output" class="headerlink" title="8.3.2.出口output"></a>8.3.2.出口output</h3><p>出口，就是输出的目的地。一般我们会用一个dist目录，作为打包输出的文件夹：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530201612391.png" alt="1530201612391"></p><p>然后，编写webpack.config.js，添加出口配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:<span class="string">'./src/main.js'</span>,  <span class="comment">//指定打包的入口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        <span class="comment">// path: 输出的目录，__dirname是相对于webpack.config.js配置文件的绝对路径</span></span><br><span class="line">        path : __dirname+<span class="string">'/dist'</span>,  </span><br><span class="line">        filename:<span class="string">'build.js'</span> <span class="comment">//输出的js文件名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-执行打包"><a href="#8-4-执行打包" class="headerlink" title="8.4.执行打包"></a>8.4.执行打包</h2><p>在控制台输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530203361613.png" alt="1530203361613"></p><p>随后，查看dist目录：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530203406462.png" alt="1530203406462"></p><p>尝试打开build.js，你根本看不懂：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530203465737.png" alt="1530203465737"></p><p>所有的js合并为1个，并且对变量名进行了随机打乱，这样就起到了 压缩、混淆的作用。</p><h2 id="8-5-测试运行"><a href="#8-5-测试运行" class="headerlink" title="8.5.测试运行"></a>8.5.测试运行</h2><p>在index.html中引入刚刚生成的build.js文件，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--router-link来指定跳转的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--vue-router的锚点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/build.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后运行：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530203553915.png" alt="1530203553915"></p><h2 id="8-6-打包CSS"><a href="#8-6-打包CSS" class="headerlink" title="8.6.打包CSS"></a>8.6.打包CSS</h2><p>我们来编写一段CSS代码，对index的样式做一些美化：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530203880056.png" alt="1530203880056"></p><p>内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: dodgerblue;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: whitesmoke;</span><br><span class="line">    <span class="attribute">color</span>: dodgerblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">305px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid dodgerblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-1-安装加载器"><a href="#8-6-1-安装加载器" class="headerlink" title="8.6.1.安装加载器"></a>8.6.1.安装加载器</h3><p>前面说过，webpack默认只支持js加载。要加载CSS文件，必须安装加载器：</p><p>命令：<code>npm install style-loader css-loader --save-dev</code></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530204068192.png" alt="1530204068192"></p><p>此时，在package.json中能看到新安装的：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530204160848.png" alt="1530204160848"></p><h3 id="8-6-3-index-js引入css文件"><a href="#8-6-3-index-js引入css文件" class="headerlink" title="8.6.3.index.js引入css文件"></a>8.6.3.index.js引入css文件</h3><p>因为入口在index.js，因此css文件也要在这里引入。依然使用ES6 的模块语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./css/main.css'</span></span><br></pre></td></tr></table></figure><h3 id="8-6-4-配置加载器"><a href="#8-6-4-配置加载器" class="headerlink" title="8.6.4.配置加载器"></a>8.6.4.配置加载器</h3><p>在webpack.config.js配置文件中配置css的加载器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,  <span class="comment">//指定打包的入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>, <span class="comment">// 注意：__dirname表示webpack.config.js所在目录的绝对路径</span></span><br><span class="line">        filename: <span class="string">'build.js'</span>  <span class="comment">//输出文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// 通过正则表达式匹配所有以.css后缀的文件</span></span><br><span class="line">                use: [ <span class="comment">// 要使用的加载器，这两个顺序一定不要乱</span></span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="string">'css-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-5-重新打包"><a href="#8-6-5-重新打包" class="headerlink" title="8.6.5.重新打包"></a>8.6.5.重新打包</h3><p>再次输入打包指令：<code>npx webpack --config webpack.config.js</code></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530204780240.png" alt="1530204780240"></p><p>效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530204813013.png" alt="1530204813013"></p><h2 id="8-7-script脚本"><a href="#8-7-script脚本" class="headerlink" title="8.7.script脚本"></a>8.7.script脚本</h2><p>我们每次使用npm安装，都会在package.json中留下痕迹，事实上，package.json中不仅可以记录安装的内容，还可编写脚本，让我们运行命令更加快捷。</p><p>我们可以把webpack的命令编入其中：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530205423730.png" alt="1530205423730"></p><p>以后，如果要打包，就可以直接输入：<code>npm run build</code>即可。</p><p><code>npm run</code> ：执行npm脚本，后面跟的是配置脚本的名称<code>build</code></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530205504104.png" alt="1530205504104"></p><h2 id="8-8-打包HTML"><a href="#8-8-打包HTML" class="headerlink" title="8.8.打包HTML"></a>8.8.打包HTML</h2><p>之前的打包过程中，除了HTML文件外的其它文件都被打包了，当在线上部署时，我们还得自己复制HTML到dist，然后手动添加生成的js到HTML中，这非常不友好。</p><p>webpack中的一个插件：html-webpack-plugin，可以解决这个问题。</p><p>1）安装插件：<code>npm install --save-dev html-webpack-plugin</code></p><p>需要在webpack.config.js中添加插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,  <span class="comment">//指定打包的入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,  <span class="comment">// 注意：__dirname表示webpack.config.js所在目录的绝对路径</span></span><br><span class="line">        filename: <span class="string">'build.js'</span>   <span class="comment">//输出文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// 通过正则表达式匹配所有以.css后缀的文件</span></span><br><span class="line">                use: [ <span class="comment">// 要使用的加载器，这两个顺序一定不要乱</span></span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="string">'css-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'首页'</span>,  <span class="comment">//生成的页面标题&lt;head&gt;&lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line">            filename: <span class="string">'index.html'</span>, <span class="comment">// dist目录下生成的文件名</span></span><br><span class="line">            template: <span class="string">'./src/index.html'</span> <span class="comment">// 我们原来的index.html，作为模板</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）将原来HTML中的引入js代码删除：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530207035782.png" alt="1530207035782"></p><p>3）再次打包：<code>npm run build</code></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530206990349.png" alt="1530206990349"></p><p>4）查看dist目录：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530207132261.png" alt="1530207132261"></p><p>打开index.html，发现已经自动添加了当前目录下的build.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--router-link来指定跳转的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--vue-router的锚点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"build.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-9-热更新的web服务"><a href="#8-9-热更新的web服务" class="headerlink" title="8.9.热更新的web服务"></a>8.9.热更新的web服务</h2><p>刚才的案例中，每次修改任何js或css内容，都必须重新打包，非常麻烦。</p><p>webpack给我们提供了一个插件，可以帮我们运行一个web服务，加载页面内容，并且修改js后不需要重新加载就能看到最新结果：</p><p>1）安装插件：<code>npm install webpack-dev-server --save-dev</code></p><p>2）添加启动脚本</p><p>在package.json中配置script</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --inline --hot --open --port 8080 --host 127.0.0.1"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>–inline：自动刷新</p><p>–hot：热加载</p><p>–port：指定端口</p><p>–open：自动在默认浏览器打开</p><p>–host：可以指定服务器的 ip，不指定则为127.0.0.1</p><p>3）运行脚本：<code>npm run dev</code></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530207667660.png" alt="1530207667660"></p><p>4）效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530207505226.png" alt="1530207505226"></p><h1 id="9-vue-cli"><a href="#9-vue-cli" class="headerlink" title="9.vue-cli"></a>9.vue-cli</h1><h2 id="9-1-介绍和安装"><a href="#9-1-介绍和安装" class="headerlink" title="9.1.介绍和安装"></a>9.1.介绍和安装</h2><p>在开发中，需要打包的东西不止是js、css、html。还有更多的东西要处理，这些插件和加载器如果我们一一去添加就会比较麻烦。</p><p>幸好，vue官方提供了一个快速搭建vue项目的脚手架：vue-cli</p><p>使用它能快速的构建一个web工程模板。</p><p>官网：<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">https://github.com/vuejs/vue-cli</a></p><p>安装命令：<code>npm install -g vue-cli</code></p><h2 id="9-2-快速上手"><a href="#9-2-快速上手" class="headerlink" title="9.2.快速上手"></a>9.2.快速上手</h2><p>我们新建一个module：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530208068828.png" alt="1530208068828"></p><p>切换到该目录：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530208139922.png" alt="1530208139922"></p><p>用vue-cli命令，快速搭建一个webpack的项目：<code>vue init webpack</code></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530208650256.png" alt="1530208556831"></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530208708000.png" alt="1530208708000"></p><p>前面几项都走默认或yes</p><p>下面这些我们选no</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530208850418.png" alt="1530208850418"></p><p>最后，再选yes，使用 npm安装</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530208897063.png" alt="1530208897063"></p><p>开始初始化项目，并安装依赖，可能需要</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530208932814.png" alt="1530208932814"></p><p>安装成功！</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530209062090.png" alt="1530209062090"></p><p>可以使用<code>npm run dev</code>命令启动。</p><h2 id="9-3-项目结构"><a href="#9-3-项目结构" class="headerlink" title="9.3.项目结构"></a>9.3.项目结构</h2><p>安装好的项目结构：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530209146349.png" alt="1530209146349"></p><p>入口文件：main.js</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530209503007.png" alt="1525913687860"></p><h2 id="9-4-单文件组件"><a href="#9-4-单文件组件" class="headerlink" title="9.4.单文件组件"></a>9.4.单文件组件</h2><p>需要注意的是，我们看到有一类后缀名为.vue的文件，我们称为单文件组件</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530209769323.png" alt="1530209769323"></p><p>每一个.vue文件，就是一个独立的vue组件。类似于我们刚才写的login.js和register.js</p><p>只不过，我们在js中编写 html模板和样式非常的不友好，而且没有语法提示和高亮。</p><p>而单文件组件中包含三部分内容：</p><ul><li>template：模板，支持html语法高亮和提示</li><li>script：js脚本，这里编写的就是vue的组件对象，还可以有data(){}等</li><li>style：样式，支持CSS语法高亮和提示</li></ul><p>每个组件都有自己独立的html、JS、CSS，互不干扰，真正做到可独立复用。</p><h2 id="9-5-运行"><a href="#9-5-运行" class="headerlink" title="9.5.运行"></a>9.5.运行</h2><p>看看生成的package.json：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530210016103.png" alt="1530210016103"></p><ul><li>可以看到这引入了非常多的依赖，绝大多数都是开发期依赖，比如大量的加载器。</li><li>运行时依赖只有vue和vue-router</li><li>脚本有三个：<ul><li>dev：使用了webpack-dev-server命令，开发时热部署使用</li><li>start：使用了npm run dev命令，与上面的dev效果完全一样，当脚本名为“start”时，可以省略“run”。 </li><li>build：等同于webpack的打包功能，会打包到dist目录下。</li></ul></li></ul><p>我们执行<code>npm run dev</code> 或者 <code>npm start</code> 都可以启动项目：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530210411076.png" alt="1530210411076"></p><p>页面：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day5/assets/1530210349704.png" alt="1530210349704"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;8-webpack&quot;&gt;&lt;a href=&quot;#8-webpack&quot; class=&quot;headerlink&quot; title=&quot;8.webpack&quot;&gt;&lt;/a&gt;8.webpack&lt;/h1&gt;&lt;p&gt;Webpack 是一个前端资源的打包工具，它可以将js、image、css等资源当成
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/centos%E5%AE%89%E8%A3%85FastDFS/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/待整理/centos安装FastDFS/</id>
    <published>2019-05-19T07:09:01.468Z</published>
    <updated>2019-05-19T11:37:11.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Centos下安装FastDFS"><a href="#1-Centos下安装FastDFS" class="headerlink" title="1. Centos下安装FastDFS"></a>1. Centos下安装FastDFS</h2><h3 id="1-1-上传"><a href="#1-1-上传" class="headerlink" title="1.1 上传"></a>1.1 上传</h3><p>将课前资料中的文件上传到linux下的<code>/home/leyou/fdfs</code>目录:</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/tools/fastDfs/1526205834487.png" alt="1526205834487"></p><h3 id="1-2-安装依赖"><a href="#1-2-安装依赖" class="headerlink" title="1.2 安装依赖"></a>1.2 安装依赖</h3><p>FastDFS运行需要一些依赖，在课前资料提供的虚拟中已经安装好了这些依赖，如果大家想要从头学习，可以按下面方式安装：</p><h4 id="1-2-1-安装GCC依赖"><a href="#1-2-1-安装GCC依赖" class="headerlink" title="1.2.1 安装GCC依赖"></a>1.2.1 安装GCC依赖</h4><p>GCC用来对C语言代码进行编译运行，使用yum命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install gcc</span><br></pre></td></tr></table></figure><h4 id="1-2-2-安装unzip工具"><a href="#1-2-2-安装unzip工具" class="headerlink" title="1.2.2 安装unzip工具"></a>1.2.2 安装unzip工具</h4><p>unzip工具可以帮我们对压缩包进行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y unzip zip</span><br></pre></td></tr></table></figure><h4 id="1-2-3-安装libevent"><a href="#1-2-3-安装libevent" class="headerlink" title="1.2.3 安装libevent"></a>1.2.3 安装libevent</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install libevent</span><br></pre></td></tr></table></figure><h4 id="1-2-4-安装Nginx所需依赖"><a href="#1-2-4-安装Nginx所需依赖" class="headerlink" title="1.2.4 安装Nginx所需依赖"></a>1.2.4 安装Nginx所需依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h4 id="1-2-5-安装libfastcommon-master"><a href="#1-2-5-安装libfastcommon-master" class="headerlink" title="1.2.5 安装libfastcommon-master"></a>1.2.5 安装libfastcommon-master</h4><p>这个没有yum包，只能通过编译安装：</p><ul><li><p>解压刚刚上传的<code>libfastcommon-master.zip</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip libfastcommon-master.zip</span><br></pre></td></tr></table></figure></li><li><p>进入解压完成的目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd libfastcommon-master</span><br></pre></td></tr></table></figure></li><li><p>编译并且安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./make.sh </span><br><span class="line">sudo ./make.sh install</span><br></pre></td></tr></table></figure></li></ul><p>到这里为止，所有依赖都已经安装完毕，接下来我们安装FastDFS：</p><h3 id="1-3-安装FastDFS"><a href="#1-3-安装FastDFS" class="headerlink" title="1.3 安装FastDFS"></a>1.3 安装FastDFS</h3><h4 id="1-3-1-编译安装"><a href="#1-3-1-编译安装" class="headerlink" title="1.3.1 编译安装"></a>1.3.1 编译安装</h4><p>这里我们也采用编译安装，步骤与刚才的编译安装方式一样：</p><ul><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf FastDFS_v5.08.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd FastDFS</span><br></pre></td></tr></table></figure></li><li><p>编译并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./make.sh </span><br><span class="line">sudo ./make.sh install</span><br></pre></td></tr></table></figure></li><li><p>校验安装结果</p></li></ul><p>1）安装完成，我们应该能在<code>/etc/init.d/</code>目录，通过命令<code>ll /etc/init.d/ | grep fdfs</code>看到FastDFS提供的启动脚本：</p><p>其中：</p><ul><li><code>fdfs_trackerd</code> 是tracker启动脚本</li><li><code>fdfs_storaged</code> 是storage启动脚本</li></ul><p>2）我们可以在 <code>/etc/fdfs</code>目录，通过命令查看到以下配置文件模板：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/tools/fastDfs/1524237531578.png" alt="1524237531578"></p><p>其中：</p><ul><li><code>tarcker.conf.sample</code> 是tracker的配置文件模板</li><li><code>storage.conf.sample</code> 是storage的配置文件模板</li><li><code>client.conf.sample</code> 是客户端的配置文件模板</li></ul><h4 id="1-3-2-启动tracker"><a href="#1-3-2-启动tracker" class="headerlink" title="1.3.2 启动tracker"></a>1.3.2 启动tracker</h4><p>FastDFS的tracker和storage在刚刚的安装过程中，都已经被安装了，因此我们安装这两种角色的方式是一样的。不同的是，两种需要不同的配置文件。</p><p>我们要启动tracker，就修改刚刚看到的<code>tarcker.conf</code>，并且启动<code>fdfs_trackerd</code>脚本即可。</p><ul><li>编辑tracker配置</li></ul><p>首先我们将模板文件进行赋值和重命名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp tracker.conf.sample tracker.conf</span><br><span class="line">sudo vim tracker.conf</span><br></pre></td></tr></table></figure><p>打开<code>tracker.conf</code>，修改<code>base_path</code>配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_path=/leyou/fdfs/tracker # tracker的数据和日志存放目录</span><br></pre></td></tr></table></figure><ul><li>创建目录</li></ul><p>刚刚配置的目录可能不存在，我们创建出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /leyou/fdfs/tracker</span><br></pre></td></tr></table></figure><ul><li><p>启动tracker</p><p>我们可以使用 <code>sh /etc/init.d/fdfs_trackerd</code> 启动，不过安装过程中，fdfs已经被设置为系统服务，我们可以采用熟悉的服务启动方式：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service fdfs_trackerd start # 启动fdfs_trackerd服务，停止用stop</span><br></pre></td></tr></table></figure><p>另外，我们可以通过以下命令，设置tracker开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig fdfs_trackerd on</span><br></pre></td></tr></table></figure><h4 id="1-3-3-启动storage"><a href="#1-3-3-启动storage" class="headerlink" title="1.3.3 启动storage"></a>1.3.3 启动storage</h4><p>我们要启动tracker，就修改刚刚看到的<code>tarcker.conf</code>，并且启动<code>fdfs_trackerd</code>脚本即可。</p><ul><li>编辑storage配置</li></ul><p>首先我们将模板文件进行赋值和重命名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp storage.conf.sample storage.conf</span><br><span class="line">sudo vim storage.conf</span><br></pre></td></tr></table></figure><p>打开<code>storage.conf</code>，修改<code>base_path</code>配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base_path=/leyou/fdfs/storage # storage的数据和日志存放目录</span><br><span class="line">store_path0=/leyou/fdfs/storage # storage的上传文件存放路径</span><br><span class="line">tracker_server=192.168.56.101:22122 # tracker的地址</span><br></pre></td></tr></table></figure><ul><li>创建目录</li></ul><p>刚刚配置的目录可能不存在，我们创建出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /leyou/fdfs/storage</span><br></pre></td></tr></table></figure><ul><li><p>启动storage</p><p>我们可以使用 <code>sh /etc/init.d/fdfs_storaged</code> 启动，同样我们可以用服务启动方式：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service fdfs_storaged start  # 启动fdfs_storaged服务，停止用stop</span><br></pre></td></tr></table></figure><p>另外，我们可以通过以下命令，设置tracker开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig fdfs_storaged on</span><br></pre></td></tr></table></figure><p>最后，通过<code>ps -ef | grep fdfs</code> 查看进程：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/tools/fastDfs/1524237414200.png" alt="1524237414200"></p><h3 id="1-3-4-测试文件上传"><a href="#1-3-4-测试文件上传" class="headerlink" title="1.3.4 测试文件上传"></a>1.3.4 测试文件上传</h3><p>进入etc/fdfs 修改client.conf文件<br>修改配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tracker_server=我的ip:22122</span><br><span class="line">bash_path=/tmp</span><br></pre></td></tr></table></figure></p><p>运行:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_upload_file client.conf /leyou/fdfs/test_temp/1.jpg</span><br><span class="line">1.jpg为测试文件名</span><br></pre></td></tr></table></figure></p><p>成功后返回图片的id:<br>group1/M00/00/00/wKgUOFzhDo6AenHWAAAsdH-0lL4512.jpg<br>group1 组信息<br>M00 对应store_path0<br>/00/00 磁盘路径  </p><h3 id="1-4-安装Nginx及FastDFS模块"><a href="#1-4-安装Nginx及FastDFS模块" class="headerlink" title="1.4 安装Nginx及FastDFS模块"></a>1.4 安装Nginx及FastDFS模块</h3><h4 id="1-4-1-FastDFS的Nginx模块"><a href="#1-4-1-FastDFS的Nginx模块" class="headerlink" title="1.4.1 FastDFS的Nginx模块"></a>1.4.1 FastDFS的Nginx模块</h4><ul><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf fastdfs-nginx-module_v1.16.tar.gz</span><br></pre></td></tr></table></figure><p>​</p></li></ul><ul><li><p>配置config文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入配置目录</span></span><br><span class="line">cd /home/leyou/fdfs/fastdfs-nginx-module/src/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置</span></span><br><span class="line">vim config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行下面命令（将配置中的/usr/<span class="built_in">local</span>改为/usr）：</span></span><br><span class="line">:%s+/usr/local/+/usr/+g</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>配置mod_fastdfs.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将src目录下的mod_fastdfs.conf复制到 /etc/fdfs目录：</span></span><br><span class="line">sudo cp mod_fastdfs.conf /etc/fdfs/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑该文件</span></span><br><span class="line">sudo vim /etc/fdfs/mod_fastdfs.cof</span><br></pre></td></tr></table></figure></li><li><p>修改一下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout=10                  # 客户端访问文件连接超时时长（单位：秒）</span><br><span class="line">tracker_server=192.168.56.101:22122  # tracker服务IP和端口</span><br><span class="line">url_have_group_name=true            # 访问链接前缀加上组名</span><br><span class="line">store_path0=/leyou/fdfs/storage        # 文件存储路径</span><br></pre></td></tr></table></figure></li><li><p>复制 FastDFS的部分配置文件到/etc/fdfs目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/leyou/fdfs/FastDFS/conf/</span><br><span class="line">cp http.conf mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="1-4-2-安装Nginx"><a href="#1-4-2-安装Nginx" class="headerlink" title="1.4.2 安装Nginx"></a>1.4.2 安装Nginx</h4><p>如果没有安装过Nginx:  </p><ul><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nginx-1.10.0.tar.gz</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx --add-module=/home/leyou/fdfs/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></li></ul><p>如果已经安装过:</p><p>进入解压后的安装包:<br>cd nginx-1.10.0/</p><p>配置:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx --add-module=/home/leyou/fdfs/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure></p><p>编译  不要安装:<br>make</p><p>备份之前的nginx<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mv</span> /usr/bin/nginx /usr/bin/nginx-bck</span><br></pre></td></tr></table></figure></p><p>替换之前安装的<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cp</span> /home/leyou/nginx-<span class="number">1</span>.<span class="number">10</span>.<span class="number">0</span>/objs/nginx /usr/bin/</span><br></pre></td></tr></table></figure></p><p>  ​</p><ul><li><p>配置nginx整合fastdfs-module模块</p><p>我们需要修改nginx配置文件，在/opt/nginx/config/nginx.conf文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim  /opt/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>将文件中，原来的<code>server 80{ ...}</code> 部分代码替换为如下代码：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  image.leyou.com;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听域名中带有group的，交给FastDFS模块处理</span></span><br><span class="line">    <span class="attribute">location</span> ~/group([<span class="number">0</span>-<span class="number">9</span>])/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx # 启动</span><br><span class="line">nginx -s stop # 停止</span><br><span class="line">nginx -s reload # 重新加载配置</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Centos下安装FastDFS&quot;&gt;&lt;a href=&quot;#1-Centos下安装FastDFS&quot; class=&quot;headerlink&quot; title=&quot;1. Centos下安装FastDFS&quot;&gt;&lt;/a&gt;1. Centos下安装FastDFS&lt;/h2&gt;&lt;h3 id=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E4%BF%AE%E6%94%B9%E5%93%81%E7%89%8C(%E6%9C%AA%E5%AE%8C%E6%88%90)/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/修改品牌(未完成)/</id>
    <published>2019-05-19T03:40:13.888Z</published>
    <updated>2019-05-19T14:48:07.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-修改品牌（作业）"><a href="#4-修改品牌（作业）" class="headerlink" title="4.修改品牌（作业）"></a>4.修改品牌（作业）</h1><p>修改的难点在于回显。</p><p>当我们点击编辑按钮，希望弹出窗口的同时，看到原来的数据：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526216494380.png" alt="1526216494380"></p><h2 id="4-1-点击编辑出现弹窗"><a href="#4-1-点击编辑出现弹窗" class="headerlink" title="4.1.点击编辑出现弹窗"></a>4.1.点击编辑出现弹窗</h2><p>这个比较简单，修改show属性为true即可实现，我们绑定一个点击事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">color</span>=<span class="string">"info"</span> @<span class="attr">click</span>=<span class="string">"editBrand"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写事件，改变show 的状态：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526217622765.png" alt="1526217622765"></p><p>如果仅仅是这样，编辑按钮与新增按钮将没有任何区别，关键在于，如何回显呢？</p><h2 id="4-2-回显数据"><a href="#4-2-回显数据" class="headerlink" title="4.2.回显数据"></a>4.2.回显数据</h2><p>回显数据，就是把当前点击的品牌数据传递到子组件（MyBrandForm）。而父组件给子组件传递数据，通过props属性。</p><ul><li><p>第一步：在编辑时获取当前选中的品牌信息，并且记录到data中</p><p>先在data中定义属性，用来接收用来编辑的brand数据：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526218080029.png" alt="1526218080029"></p><p>我们在页面触发编辑事件时，把当前的brand传递给editBrand方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">color</span>=<span class="string">"info"</span> @<span class="attr">click</span>=<span class="string">"editBrand(props.item)"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在editBrand中接收数据，赋值给oldBrand：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">editBrand(oldBrand)&#123;</span><br><span class="line">  <span class="comment">// 控制弹窗可见：</span></span><br><span class="line">  <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 获取要编辑的brand</span></span><br><span class="line">  <span class="keyword">this</span>.oldBrand = oldBrand;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>第二步：把获取的brand数据 传递给子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对话框的内容，表单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-card-text</span> <span class="attr">class</span>=<span class="string">"px-5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-brand-form</span> @<span class="attr">close</span>=<span class="string">"closeWindow"</span> <span class="attr">:oldBrand</span>=<span class="string">"oldBrand"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-card-text</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第三步：在子组件中通过props接收要编辑的brand数据，Vue会自动完成回显</p><p>接收数据：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526218243761.png" alt="1526218243761"></p><p>通过watch函数监控oldBrand的变化，把值copy到本地的brand：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    oldBrand: &#123;<span class="comment">// 监控oldBrand的变化</span></span><br><span class="line">        handler(val) &#123;</span><br><span class="line">            <span class="keyword">if</span>(val)&#123;</span><br><span class="line">                <span class="comment">// 注意不要直接复制，否则这边的修改会影响到父组件的数据，copy属性即可</span></span><br><span class="line">                <span class="keyword">this</span>.brand =  <span class="built_in">Object</span>.deepCopy(val)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 为空，初始化brand</span></span><br><span class="line">                <span class="keyword">this</span>.brand = &#123;</span><br><span class="line">                    name: <span class="string">''</span>,</span><br><span class="line">                    letter: <span class="string">''</span>,</span><br><span class="line">                    image: <span class="string">''</span>,</span><br><span class="line">                    categories: [],</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">            deep: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Object.deepCopy 自定义的对对象进行深度复制的方法。</li><li>需要判断监听到的是否为空，如果为空，应该进行初始化</li></ul></li></ul><p>测试：发现数据回显了，除了商品分类以外：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526219653994.png" alt="1526219653994"></p><h2 id="4-3-商品分类回显"><a href="#4-3-商品分类回显" class="headerlink" title="4.3.商品分类回显"></a>4.3.商品分类回显</h2><p>为什么商品分类没有回显？</p><p>因为品牌中并没有商品分类数据。我们需要在进入编辑页面之前，查询商品分类信息：</p><h3 id="4-3-1-后台提供接口"><a href="#4-3-1-后台提供接口" class="headerlink" title="4.3.1.后台提供接口"></a>4.3.1.后台提供接口</h3><blockquote><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过品牌id查询商品分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"bid/&#123;bid&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Category&gt;&gt; queryByBrandId(<span class="meta">@PathVariable</span>(<span class="string">"bid"</span>) Long bid) &#123;</span><br><span class="line">    List&lt;Category&gt; list = <span class="keyword">this</span>.categoryService.queryByBrandId(bid);</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Service</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryByBrandId</span><span class="params">(Long bid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.categoryMapper.queryByBrandId(bid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>mapper</p></blockquote><p>因为需要通过中间表进行子查询，所以这里要手写Sql：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据品牌id查询商品分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM tb_category WHERE id IN (SELECT category_id FROM tb_category_brand WHERE brand_id = #&#123;bid&#125;)"</span>)</span><br><span class="line"><span class="function">List&lt;Category&gt; <span class="title">queryByBrandId</span><span class="params">(Long bid)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-前台查询分类并渲染"><a href="#4-3-2-前台查询分类并渲染" class="headerlink" title="4.3.2.前台查询分类并渲染"></a>4.3.2.前台查询分类并渲染</h3><p>我们在编辑页面打开之前，先把数据查询完毕：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">editBrand(oldBrand)&#123;</span><br><span class="line">    <span class="comment">// 根据品牌信息查询商品分类</span></span><br><span class="line">    <span class="keyword">this</span>.$http.get(<span class="string">"/item/category/bid/"</span> + oldBrand.id)</span><br><span class="line">        .then(<span class="function">(<span class="params">&#123;data&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 控制弹窗可见：</span></span><br><span class="line">        <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 获取要编辑的brand</span></span><br><span class="line">        <span class="keyword">this</span>.oldBrand = oldBrand</span><br><span class="line">        <span class="comment">// 回显商品分类</span></span><br><span class="line">        <span class="keyword">this</span>.oldBrand.categories = data;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试：数据成功回显了</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526222999115.png" alt="1526222999115"></p><h3 id="4-3-3-新增窗口数据干扰"><a href="#4-3-3-新增窗口数据干扰" class="headerlink" title="4.3.3.新增窗口数据干扰"></a>4.3.3.新增窗口数据干扰</h3><p>但是，此时却产生了新问题：新增窗口竟然也有数据？</p><p>原因：</p><p>​    如果之前打开过编辑，那么在父组件中记录的oldBrand会保留。下次再打开窗口，如果是编辑窗口到没问题，但是新增的话，就会再次显示上次打开的品牌信息了。</p><p>解决：</p><p>​    新增窗口打开前，把数据置空。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addBrand() &#123;</span><br><span class="line">    <span class="comment">// 控制弹窗可见：</span></span><br><span class="line">    <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 把oldBrand变为null</span></span><br><span class="line">    <span class="keyword">this</span>.oldBrand = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-提交表单时判断是新增还是修改"><a href="#4-3-4-提交表单时判断是新增还是修改" class="headerlink" title="4.3.4.提交表单时判断是新增还是修改"></a>4.3.4.提交表单时判断是新增还是修改</h3><p>新增和修改是同一个页面，我们该如何判断？</p><p>父组件中点击按钮弹出新增或修改的窗口，因此父组件非常清楚接下来是新增还是修改。</p><p>因此，最简单的方案就是，在父组件中定义变量，记录新增或修改状态，当弹出页面时，把这个状态也传递给子组件。</p><p>第一步：在父组件中记录状态：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526224372366.png" alt="1526224372366"></p><p>第二步：在新增和修改前，更改状态：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526224447288.png" alt="1526224447288"></p><p>第三步：传递给子组件</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526224495244.png" alt="1526224495244"></p><p>第四步，子组件接收标记：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526224563838.png" alt="1526224563838"></p><p>标题的动态化：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day8/assets/1526224628514.png" alt="1526224628514"></p><p>表单提交动态：</p><p>axios除了除了get和post外，还有一个通用的请求方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将数据提交到后台</span></span><br><span class="line"><span class="comment">// this.$http.post('/item/brand', this.$qs.stringify(params))</span></span><br><span class="line"><span class="keyword">this</span>.$http(&#123;</span><br><span class="line">    method: <span class="keyword">this</span>.isEdit ? <span class="string">'put'</span> : <span class="string">'post'</span>, <span class="comment">// 动态判断是POST还是PUT</span></span><br><span class="line">    url: <span class="string">'/item/brand'</span>,</span><br><span class="line">    data: <span class="keyword">this</span>.$qs.stringify(<span class="keyword">this</span>.brand)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭窗口</span></span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">"close"</span>);</span><br><span class="line">    <span class="keyword">this</span>.$message.success(<span class="string">"保存成功！"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(<span class="string">"保存失败！"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="5-删除（作业）"><a href="#5-删除（作业）" class="headerlink" title="5.删除（作业）"></a>5.删除（作业）</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;4-修改品牌（作业）&quot;&gt;&lt;a href=&quot;#4-修改品牌（作业）&quot; class=&quot;headerlink&quot; title=&quot;4.修改品牌（作业）&quot;&gt;&lt;/a&gt;4.修改品牌（作业）&lt;/h1&gt;&lt;p&gt;修改的难点在于回显。&lt;/p&gt;
&lt;p&gt;当我们点击编辑按钮，希望弹出窗口的同时，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/ES6%E4%BD%BF%E7%94%A8/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/待整理/ES6使用/</id>
    <published>2019-05-19T02:31:18.419Z</published>
    <updated>2019-05-19T02:31:19.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4、ES6-语法指南"><a href="#4、ES6-语法指南" class="headerlink" title="4、ES6 语法指南"></a>4、ES6 语法指南</h1><p>后端项目搭建完毕，接下来就是前端页面了。不过在这之前需要一些准备工作。我们需要学习ES6的语法标准。</p><p>什么是ES6？就是ECMAScript第6版标准。</p><h2 id="4-1-什么是ECMAScript？"><a href="#4-1-什么是ECMAScript？" class="headerlink" title="4.1.什么是ECMAScript？"></a>4.1.什么是ECMAScript？</h2><p>来看下前端的发展历程：</p><blockquote><p>web1.0时代：</p></blockquote><ul><li>最初的网页以HTML为主，是纯静态的网页。网页是只读的，信息流只能从服务的到客户端单向流通。<strong>开发人员也只关心页面的样式和内容</strong>即可。</li></ul><blockquote><p>web2.0时代：</p></blockquote><ul><li>1995年，网景工程师Brendan Eich 花了10天时间设计了JavaScript语言。</li><li>1996年，微软发布了JScript，其实是JavaScript的逆向工程实现。</li><li>1997年，为了统一各种不同script脚本语言，ECMA（欧洲计算机制造商协会）以JavaScript为基础，制定了<code>ECMAscript</code>标准规范。JavaScript和JScript都是<code>ECMAScript</code>的标准实现者，随后各大浏览器厂商纷纷实现了<code>ECMAScript</code>标准。</li></ul><p>所以，ECMAScript是浏览器脚本语言的规范，而各种我们熟知的js语言，如JavaScript则是规范的具体实现。</p><h2 id="4-2-ECMAScript的快速发展"><a href="#4-2-ECMAScript的快速发展" class="headerlink" title="4.2.ECMAScript的快速发展"></a>4.2.ECMAScript的快速发展</h2><p>而后，ECMAScript就进入了快速发展期。</p><ul><li><p>1998年6月，ECMAScript 2.0 发布。</p></li><li><p>1999年12月，ECMAScript 3.0 发布。这时，ECMAScript 规范本身也相对比较完善和稳定了，但是接下来的事情，就比较悲剧了。</p></li><li><p>2007年10月。。。。ECMAScript 4.0 草案发布。</p><p>这次的新规范，历时颇久，规范的新内容也有了很多争议。在制定ES4的时候，是分成了两个工作组同时工作的。</p><ul><li>一边是以 Adobe, Mozilla, Opera 和 Google为主的 ECMAScript 4 工作组。</li><li>一边是以 Microsoft 和 Yahoo 为主的 ECMAScript 3.1 工作组。</li></ul><p>ECMAScript 4 的很多主张比较激进，改动较大。而 ECMAScript 3.1 则主张小幅更新。最终经过 TC39 的会议，决定将一部分不那么激进的改动保留发布为 ECMAScript 3.1，而ES4的内容，则延续到了后来的ECMAScript5和6版本中</p></li><li><p>2009年12月，ECMAScript 5 发布。</p></li><li><p>2011年6月，ECMAScript 5.1 发布。</p></li><li><p>2015年6月，ECMAScript 6，也就是 ECMAScript 2015 发布了。 并且从 ECMAScript 6 开始，开始采用年号来做版本。即 ECMAScript 2015，就是ECMAScript6。 </p></li></ul><h2 id="4-3-ES5和6的一些新特性"><a href="#4-3-ES5和6的一些新特性" class="headerlink" title="4.3.ES5和6的一些新特性"></a>4.3.ES5和6的一些新特性</h2><p>我们这里只把一些常用的进行学习，更详细的大家参考：<a href="http://es6.ruanyifeng.com/?search=reduce&amp;x=0&amp;y=0#README" target="_blank" rel="noopener">阮一峰的ES6教程</a></p><h3 id="4-3-1-let-和-const-命令"><a href="#4-3-1-let-和-const-命令" class="headerlink" title="4.3.1.let 和 const 命令"></a>4.3.1.let 和 const 命令</h3><blockquote><p>var</p></blockquote><p>之前，js定义变量只有一个关键字：<code>var</code></p><p><code>var</code>有一个问题，就是定义的变量有时会莫名奇妙的成为全局变量。</p><p>例如这样的一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"循环外："</span> + i)</span><br></pre></td></tr></table></figure><p>你猜下打印的结果是什么？</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526107278999.png" alt="1526107278999"></p><blockquote><p>let</p></blockquote><p><code>let</code>所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><p>我们把刚才的<code>var</code>改成<code>let</code>试试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"循环外："</span> + i)</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526107347275.png" alt="1526107347275"></p><blockquote><p>const</p></blockquote><p><code>const</code>声明的变量是常量，不能被修改</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526107425000.png" alt="1526107425000"></p><h3 id="4-3-2-字符串扩展"><a href="#4-3-2-字符串扩展" class="headerlink" title="4.3.2.字符串扩展"></a>4.3.2.字符串扩展</h3><blockquote><p>新的API</p></blockquote><p>ES6为字符串扩展了几个新的API：</p><ul><li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</li><li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><p>实验一下：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526107640349.png" alt="1526107640349"></p><blockquote><p>字符串模板</p></blockquote><p>ES6中提供了`来作为字符串模板标记。我们可以这么玩：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526108070980.png" alt="1526108070980"></p><p>在两个`之间的部分都会被作为字符串的值，不管你任意换行，甚至加入js脚本</p><p>键盘是的1的左侧，tab的上侧，esc的正下方</p><h3 id="4-3-3-解构表达式"><a href="#4-3-3-解构表达式" class="headerlink" title="4.3.3.解构表达式"></a>4.3.3.解构表达式</h3><blockquote><p>数组解构</p></blockquote><p>比如有一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>我想获取其中的值，只能通过角标。ES6可以这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [x,y,z] = arr;<span class="comment">// x，y，z将与arr中的每个位置对应来取值</span></span><br><span class="line"><span class="comment">// 然后打印</span></span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526109778368.png" alt="1526109778368"></p><blockquote><p>对象解构</p></blockquote><p>例如有个person对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    language: [<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这么做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构表达式获取值</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,age,language&#125; = person;</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(language);</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526109984544.png" alt="1526109984544"></p><p>如过想要用其它变量接收，需要额外指定别名：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526110159450.png" alt="1526110159450"></p><ul><li><code>{name:n}</code>：name是person中的属性名，冒号后面的n是解构后要赋值给的变量。</li></ul><h3 id="4-3-4-函数优化"><a href="#4-3-4-函数优化" class="headerlink" title="4.3.4.函数优化"></a>4.3.4.函数优化</h3><blockquote><p>函数参数默认值</p></blockquote><p>在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a , b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断b是否为空，为空就给默认值1</span></span><br><span class="line">    b = b || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>现在可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a , b = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><blockquote><p>箭头函数</p></blockquote><p>ES6中定义函数的简写方式：</p><p>一个参数时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line"><span class="keyword">var</span> print2 = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>多个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个参数的情况：</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a , b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br></pre></td></tr></table></figure><p>代码不止一行，可以用<code>{}</code>括起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对象的函数属性简写</p></blockquote><p>比如一个Person对象，里面有eat方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">"jack"</span>,</span><br><span class="line">    <span class="comment">// 以前：</span></span><br><span class="line">    eat: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 箭头函数版：</span></span><br><span class="line">    eat2: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person.name + <span class="string">"在吃"</span> + food),<span class="comment">// 这里拿不到this</span></span><br><span class="line">    <span class="comment">// 简写版：</span></span><br><span class="line">    eat3(food)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>箭头函数结合解构表达式</p></blockquote><p>比如有一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    language: [<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello,"</span> + person.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用箭头函数和解构表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hi = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span>  <span class="built_in">console</span>.log(<span class="string">"hello,"</span> + name);</span><br></pre></td></tr></table></figure><h3 id="4-3-5-map和reduce"><a href="#4-3-5-map和reduce" class="headerlink" title="4.3.5.map和reduce"></a>4.3.5.map和reduce</h3><p>数组中新增了map和reduce方法。</p><blockquote><p>map</p></blockquote><p><code>map()</code>：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</p><p>举例：有一个字符串数组，我们希望转为int数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>,<span class="string">'20'</span>,<span class="string">'-5'</span>,<span class="string">'3'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line">arr = arr.map(<span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">parseInt</span>(s));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure><p>  <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526110796839.png" alt="1526110796839"></p><blockquote><p>reduce</p></blockquote><p><code>reduce()</code>：接收一个函数（必须）和一个初始值（可选），该函数接收两个参数：</p><ul><li>第一个参数是上一次reduce处理的结果</li><li>第二个参数是数组中要处理的下一个元素</li></ul><p><code>reduce()</code>会从左到右依次把数组中的元素用reduce处理，并把处理的结果作为下次reduce的第一个参数。如果是第一次，会把前两个元素作为计算参数，或者把用户指定的初始值作为起始参数</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1,20,-5,3]</span><br></pre></td></tr></table></figure><p>没有初始值：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526111537204.png" alt="1526111537204"></p><p>指定初始值：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526111580742.png" alt="1526111580742"></p><h3 id="4-3-6-promise"><a href="#4-3-6-promise" class="headerlink" title="4.3.6.promise"></a>4.3.6.promise</h3><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p>感觉跟java的Future类很像啊，有木有！</p><p>我们可以通过Promise的构造函数来创建Promise对象，并在内部封装一个异步执行的结果。</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... 执行异步操作</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);<span class="comment">// 调用resolve，代表Promise将返回成功的结果</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);<span class="comment">// 调用reject，代表Promise会返回失败结果</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，在promise中就封装了一段异步执行的结果。</p><p>如果我们想要等待异步执行完成，做一些事情，我们可以通过promise的then方法来实现,语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 异步执行成功后的回调</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果想要处理promise异步执行失败的事件，还可以跟上catch：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 异步执行成功后的回调</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 异步执行失败后的回调</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const p = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    // 这里我们用定时任务模拟异步</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        const num = Math.random();</span><br><span class="line">        // 随机返回成功或失败</span><br><span class="line">        if (num &lt; 0.5) &#123;</span><br><span class="line">            resolve(&quot;成功！num:&quot; + num)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            reject(&quot;出错了！num:&quot; + num)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 300)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 调用promise</span><br><span class="line">p.then(function (msg) &#123;</span><br><span class="line">    console.log(msg);</span><br><span class="line">&#125;).catch(function (msg) &#123;</span><br><span class="line">    console.log(msg);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526113115887.png" alt="1526113115887"></p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526113140074.png" alt="1526113140074"></p><h3 id="4-3-7-set和map（了解）"><a href="#4-3-7-set和map（了解）" class="headerlink" title="4.3.7.set和map（了解）"></a>4.3.7.set和map（了解）</h3><p>ES6提供了Set和Map的数据结构。</p><p>Set，本质与数组类似。不同在于Set中只能保存不同元素，如果元素相同会被忽略。跟java很像吧。</p><p>构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set构造函数可以接收一个数组或空</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line"><span class="keyword">set</span>.add(1);// [1]</span><br><span class="line">// 接收数组</span><br><span class="line">let set2 = new Set([2,3,4,5,5]);// 得到[2,3,4,5]</span><br></pre></td></tr></table></figure><p>普通方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set.add(1);// 添加</span><br><span class="line">set.clear();// 清空</span><br><span class="line">set.delete(2);// 删除指定元素</span><br><span class="line">set.has(2); // 判断是否存在</span><br><span class="line">set.keys();// 返回所有key</span><br><span class="line">set.values();// 返回所有值</span><br><span class="line">set.entries();// 返回键值对集合</span><br><span class="line">// 因为set没有键值对，所有其keys、values、entries方法返回值一样的。</span><br><span class="line">set.size; // 元素个数。是属性，不是方法。</span><br></pre></td></tr></table></figure><p>map，本质是与Object类似的结构。不同在于，Object强制规定key只能是字符串。而Map结构的key可以是任意对象。即：</p><ul><li>object是 &lt;string,object&gt;集合</li><li>map是&lt;object,object&gt;集合</li></ul><p>构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map接收一个数组，数组中的元素是键值对数组</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">'key1'</span>,<span class="string">'value1'</span>],</span><br><span class="line">    [<span class="string">'key2'</span>,<span class="string">'value2'</span>],</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 或者接收一个set</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([</span><br><span class="line">    ['key1','value1'],</span><br><span class="line">    ['key2','value2'],</span><br><span class="line">])</span><br><span class="line">const map2 = new Map(<span class="keyword">set</span>)</span><br><span class="line">// 或者其它map</span><br><span class="line">const map3 = new Map(map);</span><br></pre></td></tr></table></figure><p>方法：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1526114799767.png" alt="1526114799767"></p><h3 id="4-3-8-模块化"><a href="#4-3-8-模块化" class="headerlink" title="4.3.8.模块化"></a>4.3.8.模块化</h3><h4 id="4-3-8-1-什么是模块化"><a href="#4-3-8-1-什么是模块化" class="headerlink" title="4.3.8.1.什么是模块化"></a>4.3.8.1.什么是模块化</h4><p>模块化就是把代码进行拆分，方便重复利用。类似java中的导包：要使用一个包，必须先导包。</p><p>而JS中没有包的概念，换来的是 模块。</p><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。</p><ul><li><code>export</code>命令用于规定模块的对外接口，</li><li><code>import</code>命令用于导入其他模块提供的功能。</li></ul><h4 id="4-3-8-2-export"><a href="#4-3-8-2-export" class="headerlink" title="4.3.8.2.export"></a>4.3.8.2.export</h4><p>比如我定义一个js文件:hello.js，里面有一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = &#123;</span><br><span class="line">    sum(a,b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我可以使用export将这个对象导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = &#123;</span><br><span class="line">    sum(a,b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> util;</span><br></pre></td></tr></table></figure><p>当然，也可以简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> util = &#123;</span><br><span class="line">    sum(a,b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>export</code>不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。</p><p>当要导出多个值时，还可以简写。比如我有一个文件：user.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"jack"</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">21</span></span><br><span class="line"><span class="keyword">export</span> &#123;name,age&#125;</span><br></pre></td></tr></table></figure><blockquote><p>省略名称</p></blockquote><p>上面的导出代码中，都明确指定了导出的变量名，这样其它人在导入使用时就必须准确写出变量名，否则就会出错。</p><p>因此js提供了<code>default</code>关键字，可以对导出的变量名进行省略</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无需声明对象的名字</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">sum(a,b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当使用者导入时，可以任意起名字</p><h4 id="4-3-8-3-import"><a href="#4-3-8-3-import" class="headerlink" title="4.3.8.3.import"></a>4.3.8.3.import</h4><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p><p>例如我要使用上面导出的util：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入util</span></span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'hello.js'</span></span><br><span class="line"><span class="comment">// 调用util中的属性</span></span><br><span class="line">util.sum(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>要批量导入前面导出的name和age： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">'user.js'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">" , 今年"</span>+ age +<span class="string">"岁了"</span>)</span><br></pre></td></tr></table></figure><p>但是上面的代码暂时无法测试，因为浏览器目前还不支持ES6 的导入和导出功能。除非借助于工具，把ES6 的语法进行编译降级到ES5，比如<code>Babel-cli</code>工具</p><p> 我们暂时不做测试，大家了解即可。</p><h3 id="4-3-9-对象扩展"><a href="#4-3-9-对象扩展" class="headerlink" title="4.3.9.对象扩展"></a>4.3.9.对象扩展</h3><p>ES6给Object拓展了许多新的方法，如：</p><ul><li>keys(obj)：获取对象的所有key形成的数组</li><li>values(obj)：获取对象的所有value形成的数组</li><li>entries(obj)：获取对象的所有key和value形成的二维数组。格式：<code>[[k1,v1],[k2,v2],...]</code></li><li><p>assian(dest, …src) ：将多个src对象的值 拷贝到 dest中（浅拷贝）。</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1527210872966.png" alt="1527210872966"></p></li></ul><h3 id="4-3-10-数组扩展"><a href="#4-3-10-数组扩展" class="headerlink" title="4.3.10.数组扩展"></a>4.3.10.数组扩展</h3><p>ES6给数组新增了许多方法：</p><ul><li>find(callback)：把数组中的元素逐个传递给函数callback执行，如果返回true，则返回该元素</li><li>findIndex(callback)：与find类似，不过返回的是品牌到的元素的索引</li><li>includes（callback）：与find类似，如果匹配到元素，则返回true，代表找到了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;4、ES6-语法指南&quot;&gt;&lt;a href=&quot;#4、ES6-语法指南&quot; class=&quot;headerlink&quot; title=&quot;4、ES6 语法指南&quot;&gt;&lt;/a&gt;4、ES6 语法指南&lt;/h1&gt;&lt;p&gt;后端项目搭建完毕，接下来就是前端页面了。不过在这之前需要一些准备工作。我们需
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/2%E7%BA%A7/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/2级/项目介绍及技术选型/</id>
    <published>2019-05-19T02:24:31.471Z</published>
    <updated>2019-05-19T02:26:25.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-乐优商城介绍"><a href="#2-乐优商城介绍" class="headerlink" title="2.乐优商城介绍"></a>2.乐优商城介绍</h1><h2 id="2-1-项目介绍"><a href="#2-1-项目介绍" class="headerlink" title="2.1.项目介绍"></a>2.1.项目介绍</h2><ul><li>乐优商城是一个全品类的电商购物网站（B2C）。</li><li>用户可以在线购买商品、加入购物车、下单、秒杀商品</li><li>可以品论已购买商品</li><li>管理员可以在后台管理商品的上下架、促销活动</li><li>管理员可以监控商品销售状况</li><li>客服可以在后台处理退款操作</li><li>希望未来3到5年可以支持千万用户的使用</li></ul><h2 id="2-2-系统架构"><a href="#2-2-系统架构" class="headerlink" title="2.2.系统架构"></a>2.2.系统架构</h2><h3 id="2-2-1-架构图"><a href="#2-2-1-架构图" class="headerlink" title="2.2.1.架构图"></a>2.2.1.架构图</h3><p>乐优商城架构缩略图，大图请参考课前资料：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1525703759035.png" alt="1525703759035"></p><h3 id="2-2-2-系统架构解读"><a href="#2-2-2-系统架构解读" class="headerlink" title="2.2.2.系统架构解读"></a>2.2.2.系统架构解读</h3><p>整个乐优商城可以分为两部分：后台管理系统、前台门户系统。</p><ul><li><p>后台管理：</p><ul><li>后台系统主要包含以下功能：<ul><li>商品管理，包括商品分类、品牌、商品规格等信息的管理</li><li>销售管理，包括订单统计、订单退款处理、促销活动生成等</li><li>用户管理，包括用户控制、冻结、解锁等</li><li>权限管理，整个网站的权限控制，采用JWT鉴权方案，对用户及API进行权限控制</li><li>统计，各种数据的统计分析展示</li></ul></li><li>后台系统会采用前后端分离开发，而且整个后台管理系统会使用Vue.js框架搭建出单页应用（SPA）。</li><li>预览图：</li></ul><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1525704185158.png" alt="1525704185158"></p></li><li><p>前台门户</p><ul><li>前台门户面向的是客户，包含与客户交互的一切功能。例如：<ul><li>搜索商品</li><li>加入购物车</li><li>下单</li><li>评价商品等等</li></ul></li><li>前台系统我们会使用Thymeleaf模板引擎技术来完成页面开发。出于SEO优化的考虑，我们将不采用单页应用。</li></ul><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1525704277126.png" alt="1525704277126"></p></li></ul><p>无论是前台还是后台系统，都共享相同的微服务集群，包括：</p><ul><li>商品微服务：商品及商品分类、品牌、库存等的服务</li><li>搜索微服务：实现搜索功能</li><li>订单微服务：实现订单相关</li><li>购物车微服务：实现购物车相关功能</li><li>用户中心：用户的登录注册等功能</li><li>Eureka注册中心</li><li>Zuul网关服务</li><li>Spring Cloud Config配置中心</li><li>…</li></ul><h2 id="3-1-技术选型"><a href="#3-1-技术选型" class="headerlink" title="3.1.技术选型"></a>3.1.技术选型</h2><p>前端技术：</p><ul><li>基础的HTML、CSS、JavaScript（基于ES6标准）</li><li>JQuery</li><li>Vue.js 2.0以及基于Vue的框架：Vuetify</li><li>前端构建工具：WebPack</li><li>前端安装包工具：NPM</li><li>Vue脚手架：Vue-cli</li><li>Vue路由：vue-router</li><li>ajax框架：axios</li><li>基于Vue的富文本框架：quill-editor</li></ul><p>后端技术：</p><ul><li>基础的SpringMVC、Spring 5.0和MyBatis3</li><li>Spring Boot 2.0.1版本</li><li>Spring Cloud 最新版 Finchley.RC1</li><li>Redis-4.0</li><li>RabbitMQ-3.4</li><li>Elasticsearch-5.6.8</li><li>nginx-1.10.2：</li><li>FastDFS - 5.0.8</li><li>MyCat</li><li>Thymeleaf</li></ul><h2 id="3-2-开发环境"><a href="#3-2-开发环境" class="headerlink" title="3.2.开发环境"></a>3.2.开发环境</h2><p>为了保证开发环境的统一，希望每个人都按照我的环境来配置：</p><ul><li>IDE：我们使用Idea 2017.3 版本</li><li>JDK：统一使用JDK1.8</li><li>项目构建：maven3.3.9以上版本即可</li><li>版本控制工具：git</li></ul><p>idea大家可以在我的课前资料中找到。另外，使用帮助大家可以参考课前资料的《idea使用指南.md》</p><h2 id="3-3-域名"><a href="#3-3-域名" class="headerlink" title="3.3.域名"></a>3.3.域名</h2><p>我们在开发的过程中，为了保证以后的生产、测试环境统一。尽量都采用域名来访问项目。</p><p>一级域名：<a href="http://www.leyou.com" target="_blank" rel="noopener">www.leyou.com</a></p><p>二级域名：manage.leyou.com , api.leyou.com</p><p>我们可以通过switchhost工具来修改自己的host对应的地址，只要把这些域名指向127.0.0.1，那么跟你用localhost的效果是完全一样的。</p><p>switchhost可以去课前资料寻找。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-乐优商城介绍&quot;&gt;&lt;a href=&quot;#2-乐优商城介绍&quot; class=&quot;headerlink&quot; title=&quot;2.乐优商城介绍&quot;&gt;&lt;/a&gt;2.乐优商城介绍&lt;/h1&gt;&lt;h2 id=&quot;2-1-项目介绍&quot;&gt;&lt;a href=&quot;#2-1-项目介绍&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/2%E7%BA%A7/%E4%BA%86%E8%A7%A3%E7%94%B5%E5%95%86%E8%A1%8C%E4%B8%9A/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/2级/了解电商行业/</id>
    <published>2019-05-19T02:23:26.302Z</published>
    <updated>2019-05-19T02:23:35.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-了解电商行业"><a href="#1-了解电商行业" class="headerlink" title="1.了解电商行业"></a>1.了解电商行业</h1><p>学习电商项目，自然要先了解这个行业，所以我们首先来聊聊电商行业</p><h2 id="1-1-项目分类"><a href="#1-1-项目分类" class="headerlink" title="1.1.项目分类"></a>1.1.项目分类</h2><p>主要从需求方、盈利模式、技术侧重点这三个方面来看它们的不同</p><h3 id="1-1-1-传统项目"><a href="#1-1-1-传统项目" class="headerlink" title="1.1.1.传统项目"></a>1.1.1.传统项目</h3><p>各种企业里面用的管理系统（ERP、HR、OA、CRM、物流管理系统。。。。。。。）</p><ul><li>需求方：公司、企业内部</li><li>盈利模式：项目本身卖钱</li><li>技术侧重点：业务功能</li></ul><h3 id="1-1-2-互联网项目"><a href="#1-1-2-互联网项目" class="headerlink" title="1.1.2.互联网项目"></a>1.1.2.互联网项目</h3><p>门户网站、电商网站：baidu.com、qq.com、taobao.com、jd.com  …… </p><ul><li>需求方：广大用户群体</li><li>盈利模式：虚拟币、增值服务、广告收益……</li><li>技术侧重点：网站性能、业务功能</li></ul><p>而我们今天要聊的就是互联网项目中的重要角色：电商</p><h2 id="1-2-电商行业的发展"><a href="#1-2-电商行业的发展" class="headerlink" title="1.2.电商行业的发展"></a>1.2.电商行业的发展</h2><h3 id="1-2-1-钱景"><a href="#1-2-1-钱景" class="headerlink" title="1.2.1.钱景"></a>1.2.1.钱景</h3><p>近年来，中国的电子商务快速发展，交易额连创新高，电子商务在各领域的应用不断拓展和深化、相关服务业蓬勃发展、支撑体系不断健全完善、创新的动力和能力不断增强。电子商务正在与实体经济深度融合，进入规模性发展阶段，对经济社会生活的影响不断增大，正成为我国经济发展的新引擎。</p><p>中国电子商务研究中心数据显示，截止到 2012 年底，中国电子商务市场交易规模达 7.85万亿人民币，同比增长 30.83%。其中，B2B 电子商务交易额达 6.25 万亿，同比增长 27%。而 2011 年全年，中国电子商务市场交易额达 6 万亿人民币，同比增长 33%，占 GDP 比重上升到 13%；2012 年，电子商务占 GDP 的比重已经高达 15%。</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1525686041466.png" alt="1525686041466"></p><h3 id="1-2-2-数据"><a href="#1-2-2-数据" class="headerlink" title="1.2.2.数据"></a>1.2.2.数据</h3><p>来看看双十一的成交数据：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1525686135308.png" alt="1525686135308"></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1525686160411.png" alt="1525686160411"></p><p>2016双11开场30分钟，创造<strong>每秒交易峰值17.5万笔</strong>，<strong>每秒</strong>支付峰值<strong>12万笔</strong>的新纪录。菜鸟单日物流订单量超过<strong>4.67亿</strong>，创历史新高。</p><h3 id="1-2-3-技术特点"><a href="#1-2-3-技术特点" class="headerlink" title="1.2.3.技术特点"></a>1.2.3.技术特点</h3><p>从上面的数据我们不仅要看到钱，更要看到背后的技术实力。正是得益于电商行业的高强度并发压力，促使了BAT等巨头们的技术进步。电商行业有些什么特点呢？</p><ul><li>技术范围广</li><li>技术新</li><li>高并发（分布式、静态化技术、缓存技术、异步并发、池化、队列）</li><li>高可用（集群、负载均衡、限流、降级、熔断）</li><li>数据量大</li><li>业务复杂</li><li>数据安全</li></ul><h2 id="1-3-常见电商模式"><a href="#1-3-常见电商模式" class="headerlink" title="1.3.常见电商模式"></a>1.3.常见电商模式</h2><p>电商行业的一些常见模式：</p><ul><li>B2C：商家对个人，如：亚马逊、当当等</li><li>C2C平台：个人对个人，如：咸鱼、拍拍网、ebay</li><li>B2B平台：商家对商家，如：阿里巴巴、八方资源网等</li><li>O2O：线上和线下结合，如：饿了么、电影票、团购等</li><li>P2P：在线金融，贷款，如：网贷之家、人人聚财等。</li><li>B2C平台：天猫、京东、一号店等</li></ul><h2 id="1-4-一些专业术语"><a href="#1-4-一些专业术语" class="headerlink" title="1.4.一些专业术语"></a>1.4.一些专业术语</h2><ul><li><p>SaaS：软件即服务</p></li><li><p>SOA：面向服务</p></li><li><p>RPC：远程过程调用</p></li><li><p>RMI：远程方法调用</p></li><li><p>PV：(page view)，即页面浏览量；</p><p>用户每1次对网站中的每个网页访问均被记录1次。用户对同一页面的多次访问，访问量累计</p></li><li><p>UV：(unique visitor)，独立访客</p><p>指访问某个站点或点击某条新闻的不同IP地址的人数。在同一天内，uv只记录第一次进入网站的具有独立IP的访问者，在同一天内再次访问该网站则不计数。</p></li><li><p>PV与带宽：</p><ul><li>计算带宽大小需要关注两个指标：峰值流量和页面的平均大小。</li><li>计算公式是：网站带宽= ( PV <em> 平均页面大小（单位MB）</em> 8 )/统计时间（换算到秒）</li><li>为什么要乘以8？<ul><li>网站大小为单位是字节(Byte)，而计算带宽的单位是bit，1Byte=8bit</li></ul></li><li>这个计算的是平均带宽，高峰期还需要扩大一定倍数</li></ul></li><li><p>PV、QPS、并发</p><ul><li><p>QPS：每秒处理的请求数量。8000/s</p><ul><li>比如你的程序处理一个请求平均需要0.1S，那么1秒就可以处理10个请求。QPS自然就是10，多线程情况下，这个数字可能就会有所增加。</li></ul></li><li><p>由PV和QPS如何需要部署的服务器数量？</p><ul><li>根据二八原则，80%的请求集中在20%的时间来计算峰值压力：</li><li>（每日PV <em> 80%） / （3600s </em> 24 <em> 20%） </em> 每个页面的请求数  = 每个页面每秒的请求数量</li><li>然后除以服务器的QPS值，即可计算得出需要部署的服务器数量</li></ul></li></ul></li></ul><h2 id="1-5-项目开发流程"><a href="#1-5-项目开发流程" class="headerlink" title="1.5.项目开发流程"></a>1.5.项目开发流程</h2><p>项目经理：管人</p><p>产品经理：设计需求原型</p><p>测试：</p><p>前端：大前端。node</p><p>后端：</p><p>移动端：</p><p>项目开发流程图：</p><p>​    <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1525697632643.png" alt="1525697632643">    </p><p>公司现状：</p><p>​    <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day4/assets/1525697681975.png" alt="1525697681975"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-了解电商行业&quot;&gt;&lt;a href=&quot;#1-了解电商行业&quot; class=&quot;headerlink&quot; title=&quot;1.了解电商行业&quot;&gt;&lt;/a&gt;1.了解电商行业&lt;/h1&gt;&lt;p&gt;学习电商项目，自然要先了解这个行业，所以我们首先来聊聊电商行业&lt;/p&gt;
&lt;h2 id=&quot;1-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/19/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/Thymeleaf%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://wangdaye7.github.io/2019/05/19/微服务/待整理/Thymeleaf基本使用/</id>
    <published>2019-05-19T02:06:30.797Z</published>
    <updated>2019-05-19T02:06:48.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-Thymeleaf快速入门"><a href="#6-Thymeleaf快速入门" class="headerlink" title="6.Thymeleaf快速入门"></a>6.Thymeleaf快速入门</h1><p>SpringBoot并不推荐使用jsp，但是支持一些模板引擎技术：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day1/assets/1525517263421.png" alt="1525517263421"></p><p>以前大家用的比较多的是Freemarker，但是我们今天的主角是Thymeleaf！</p><h2 id="6-1-为什么是Thymeleaf？"><a href="#6-1-为什么是Thymeleaf？" class="headerlink" title="6.1.为什么是Thymeleaf？"></a>6.1.为什么是Thymeleaf？</h2><p>简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：</p><ul><li>动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li><li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。</li></ul><p>接下来，我们就通过入门案例来体会Thymeleaf的魅力：</p><h2 id="6-2-编写接口"><a href="#6-2-编写接口" class="headerlink" title="6.2.编写接口"></a>6.2.编写接口</h2><p>编写一个controller，返回一些用户数据，放入模型中，等会在页面渲染</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/all"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">all</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">this</span>.userService.queryAll();</span><br><span class="line">    <span class="comment">// 放入模型</span></span><br><span class="line">    model.addAttribute(<span class="string">"users"</span>, users);</span><br><span class="line">    <span class="comment">// 返回模板名称（就是classpath:/templates/目录下的html文件名）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"users"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-引入启动器"><a href="#6-3-引入启动器" class="headerlink" title="6.3.引入启动器"></a>6.3.引入启动器</h2><p>直接引入启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot会自动为Thymeleaf注册一个视图解析器：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day1/assets/1525522481007.png" alt="1525522481007"></p><p>与解析JSP的InternalViewResolver类似，Thymeleaf也会根据前缀和后缀来确定模板文件的位置：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day1/assets/1525522811359.png" alt="1525522811359"></p><ul><li>默认前缀：<code>classpath:/templates/</code></li><li>默认后缀：<code>.html</code></li></ul><p>所以如果我们返回视图：<code>users</code>，会指向到 <code>classpath:/templates/users.html</code></p><p>一般我们无需进行修改，默认即可。</p><h2 id="6-4-静态页面"><a href="#6-4-静态页面" class="headerlink" title="6.4.静态页面"></a>6.4.静态页面</h2><p>根据上面的文档介绍，模板默认放在classpath下的templates文件夹，我们新建一个html文件放入其中：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day1/assets/1525521721279.png" alt="1525521721279"></p><p>编写html模板，渲染模型中的数据：</p><p>注意，把html 的名称空间，改成：<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code> 会有语法提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        table &#123;border-collapse: collapse; font-size: 14px; width: 80%; margin: auto&#125;</span></span><br><span class="line"><span class="undefined">        table, th, td &#123;border: 1px solid darkslategray;padding: 10px&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: darkslategray; font-size: 30px"</span>&gt;</span>欢迎光临！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.id&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.userName&#125;"</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.sex&#125; == 1 ? '男': '女'"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(user.birthday, 'yyyy-MM-dd')&#125;"</span>&gt;</span>1980-02-30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.note&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到这里使用了以下语法：</p><ul><li><code>${}</code> ：这个类似与el表达式，但其实是ognl的语法，比el表达式更加强大</li><li><code>th-</code>指令：<code>th-</code>是利用了Html5中的自定义属性来实现的。如果不支持H5，可以用<code>data-th-</code>来代替<ul><li><code>th:each</code>：类似于<code>c:foreach</code>  遍历集合，但是语法更加简洁</li><li><code>th:text</code>：声明标签中的文本<ul><li>例如<code>&lt;td th-text=&#39;${user.id}&#39;&gt;1&lt;/td&gt;</code>，如果user.id有值，会覆盖默认的1</li><li>如果没有值，则会显示td中默认的1。这正是thymeleaf能够动静结合的原因，模板解析失败不影响页面的显示效果，因为会显示默认值！</li></ul></li></ul></li></ul><h2 id="6-5-测试"><a href="#6-5-测试" class="headerlink" title="6.5.测试"></a>6.5.测试</h2><p>接下来，我们打开页面测试一下：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day1/assets/1525523911854.png" alt="1525523911854"></p><h2 id="6-6-模板缓存"><a href="#6-6-模板缓存" class="headerlink" title="6.6.模板缓存"></a>6.6.模板缓存</h2><p>Thymeleaf会在第一次对模板解析之后进行缓存，极大的提高了并发处理能力。但是这给我们开发带来了不便，修改页面后并不会立刻看到效果，我们开发阶段可以关掉缓存使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 开发阶段关闭thymeleaf的模板缓存</span><br><span class="line">spring.thymeleaf.cache=false</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>​    在Idea中，我们需要在修改页面后按快捷键：<code>Ctrl + Shift + F9</code> 对项目进行rebuild才可以。</p><p>​    eclipse中没有测试过。</p><p>我们可以修改页面，测试一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;6-Thymeleaf快速入门&quot;&gt;&lt;a href=&quot;#6-Thymeleaf快速入门&quot; class=&quot;headerlink&quot; title=&quot;6.Thymeleaf快速入门&quot;&gt;&lt;/a&gt;6.Thymeleaf快速入门&lt;/h1&gt;&lt;p&gt;SpringBoot并不推荐使用js
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E5%93%81%E7%89%8C%E6%9F%A5%E8%AF%A2Vue%E7%95%8C%E9%9D%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://wangdaye7.github.io/2019/05/17/微服务/待整理/品牌查询Vue界面搭建/</id>
    <published>2019-05-17T04:56:46.364Z</published>
    <updated>2019-05-19T04:22:08.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-从0开始品牌的查询"><a href="#7-从0开始品牌的查询" class="headerlink" title="7.从0开始品牌的查询"></a>7.从0开始品牌的查询</h1><p>先看看我们要实现的效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526021968036.png" alt="1526021968036"></p><p>从0开始，实现下从前端到后端的完整开发。</p><h2 id="7-1-设计前端页面"><a href="#7-1-设计前端页面" class="headerlink" title="7.1.设计前端页面"></a>7.1.设计前端页面</h2><p>为了方便看到效果，我们新建一个MyBrand.vue（注意先停掉服务器），从0开始搭建。</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530464178834.png" alt="1530464178834"></p><p>内容利用模板初始化</p><p>改变router新的index.js，将路由地址指向MyBrand.vue</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530464255544.png" alt="1530464255544"></p><h3 id="7-1-1-查询表格"><a href="#7-1-1-查询表格" class="headerlink" title="7.1.1.查询表格"></a>7.1.1.查询表格</h3><p>大家看到这个原型页面肯定能看出，其主体就是一个table。我们去Vuetify查看有关table的文档：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526023540226.png" alt="1526023540226"></p><p>仔细阅读，发现<code>v-data-table</code>中有以下核心属性：</p><ul><li><p>dark：是否使用黑暗色彩主题，默认是false</p></li><li><p>expand：表格的行是否可以展开，默认是false</p></li><li><p>headers：定义表头的数组，数组的每个元素就是一个表头信息对象，结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  text: string, <span class="comment">// 表头的显示文本</span></span><br><span class="line">  value: string, <span class="comment">// 表头对应的每行数据的key</span></span><br><span class="line">  align: <span class="string">'left'</span> | <span class="string">'center'</span> | <span class="string">'right'</span>, <span class="comment">// 位置</span></span><br><span class="line">  sortable: boolean, <span class="comment">// 是否可排序</span></span><br><span class="line">  class: string[] | string,// 样式</span><br><span class="line">  width: string,<span class="comment">// 宽度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>items：表格的数据的数组，数组的每个元素是一行数据的对象，对象的key要与表头的value一致</p></li><li><p>loading：是否显示加载数据的进度条，默认是false</p></li><li><p>no-data-text：当没有查询到数据时显示的提示信息，string类型，无默认值</p></li><li><p>pagination.sync：包含分页和排序信息的对象，将其与vue实例中的属性关联，表格的分页或排序按钮被触发时，会自动将最新的分页和排序信息更新。对象结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    page: <span class="number">1</span>, <span class="comment">// 当前页</span></span><br><span class="line">    rowsPerPage: <span class="number">5</span>, <span class="comment">// 每页大小</span></span><br><span class="line">    sortBy: <span class="string">''</span>, <span class="comment">// 排序字段</span></span><br><span class="line">    descending:<span class="literal">false</span>, <span class="comment">// 是否降序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>total-items：分页的总条数信息，number类型，无默认值</p></li><li><p>select-all ：是否显示每一行的复选框，Boolean类型，无默认值</p></li><li><p>value：当表格可选的时候，返回选中的行</p></li></ul><p>我们向下翻，找找有没有看起来牛逼的案例。</p><p>找到这样一条：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526023837773.png" alt="1526023837773"></p><p>其它的案例都是由Vuetify帮我们对查询到的当前页数据进行排序和分页，这显然不是我们想要的。我们希望能在服务端完成对整体品牌数据的排序和分页，而这个案例恰好合适。</p><p>点击按钮，我们直接查看源码，然后直接复制到MyBrand.vue中</p><p>模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;v-data-table</span><br><span class="line">      :headers=&quot;headers&quot;</span><br><span class="line">      :items=&quot;desserts&quot;</span><br><span class="line">      :pagination.sync=&quot;pagination&quot;</span><br><span class="line">      :total-items=&quot;totalDesserts&quot;</span><br><span class="line">      :loading=&quot;loading&quot;</span><br><span class="line">      class=&quot;elevation-1&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.calories &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.fat &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.carbs &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.protein &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.iron &#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/v-data-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>对slot的用法不理解.</p><h3 id="7-1-2-表格分析"><a href="#7-1-2-表格分析" class="headerlink" title="7.1.2.表格分析"></a>7.1.2.表格分析</h3><p>接下来，就分析一下案例中每一部分是什么意思，搞清楚了，我们也可以自己玩了。</p><p>先看模板中table上的一些属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;v-data-table</span><br><span class="line">              :headers=&quot;headers&quot;</span><br><span class="line">              :items=&quot;desserts&quot;</span><br><span class="line">              :pagination.sync=&quot;pagination&quot;</span><br><span class="line">              :total-items=&quot;totalDesserts&quot;</span><br><span class="line">              :loading=&quot;loading&quot;</span><br><span class="line">              class=&quot;elevation-1&quot;</span><br><span class="line">              &gt;</span><br><span class="line">&lt;/v-data-table&gt;</span><br></pre></td></tr></table></figure><ul><li><p>headers：表头信息，是一个数组</p></li><li><p>items：要在表格中展示的数据，数组结构，每一个元素是一行。在这里应该是品牌集合</p></li><li><p>pagination.sync：分页信息，包含了当前页，每页大小，排序字段，排序方式等。加上.sync代表服务端排序，当用户点击分页条时，该对象的值会跟着变化。监控这个值，并在这个值变化时去服务端查询，即可实现页面数据动态加载了。</p></li><li><p>total-items：总条数，在这里是品牌的总记录数</p></li><li><p>loading：boolean类型，true：代表数据正在加载，会有进度条。false：数据加载完毕。</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526029254159.png" alt="1526029254159"></p></li></ul><p>另外，在<code>v-data-tables</code>中，我们还看到另一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.calories &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.fat &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.carbs &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.protein &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-right&quot;&gt;&#123;&#123; props.item.iron &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>这段就是在渲染每一行的数据。Vue会自动遍历上面传递的<code>items</code>属性，并把得到的对象传递给这段<code>template</code>中的<code>props.item</code>属性。我们从中得到数据，渲染在页面即可。</p><p>我们需要做的事情，主要有两件：</p><ul><li>给items和totalItems赋值</li><li>当pagination变化时，重新获取数据，再次给items和totalItems赋值</li></ul><h3 id="7-1-3-动手实现"><a href="#7-1-3-动手实现" class="headerlink" title="7.1.3.动手实现"></a>7.1.3.动手实现</h3><p>表格中具体有哪些列呢？参照品牌表：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530518876942.png" alt="1530518876942"></p><p>品牌中有id,name,image,letter字段。</p><h4 id="7-1-3-1-修改模板"><a href="#7-1-3-1-修改模板" class="headerlink" title="7.1.3.1.修改模板"></a>7.1.3.1.修改模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;v-data-table</span><br><span class="line">      :headers=&quot;headers&quot;</span><br><span class="line">      :items=&quot;brands&quot;</span><br><span class="line">      :pagination.sync=&quot;pagination&quot;</span><br><span class="line">      :total-items=&quot;totalBrands&quot;</span><br><span class="line">      :loading=&quot;loading&quot;</span><br><span class="line">      class=&quot;elevation-1&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&lt;img v-if=&quot;props.item.image&quot; :src=&quot;props.item.image&quot; width=&quot;130&quot; height=&quot;40&quot;/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/v-data-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>我们修改了以下部分：</p><ul><li>items：指向一个brands变量，等下在js代码中定义</li><li>total-items：指向了totalBrands变量，等下在js代码中定义</li><li>template模板中，渲染了四个字段：<ul><li>id：</li><li>name</li><li>image，注意，我们不是以文本渲染，而是赋值到一个<code>img</code>标签的src属性中，并且做了非空判断</li><li>letter</li></ul></li></ul><h4 id="7-1-3-2-编写数据模型"><a href="#7-1-3-2-编写数据模型" class="headerlink" title="7.1.3.2.编写数据模型"></a>7.1.3.2.编写数据模型</h4><p>接下来编写要用到的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    totalBrands: <span class="number">0</span>, <span class="comment">// 总条数</span></span><br><span class="line">    brands: [], <span class="comment">// 当前页品牌数据</span></span><br><span class="line">    loading: <span class="literal">true</span>, <span class="comment">// 是否在加载中</span></span><br><span class="line">    pagination: &#123;&#125;, <span class="comment">// 分页信息</span></span><br><span class="line">    headers: [ <span class="comment">// 头信息</span></span><br><span class="line">      &#123;<span class="attr">text</span>: <span class="string">'id'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'id'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">text</span>: <span class="string">'名称'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'name'</span>, <span class="attr">sortable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">text</span>: <span class="string">'LOGO'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'image'</span>, <span class="attr">sortable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">text</span>: <span class="string">'首字母'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'letter'</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-3-3-数据初始化"><a href="#7-1-3-3-数据初始化" class="headerlink" title="7.1.3.3.数据初始化"></a>7.1.3.3.数据初始化</h4><p>接下来就是对brands和totalBrands完成赋值动作了。</p><p>我们编写一个函数来完成赋值，提高复用性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  getDataFromServer()&#123; <span class="comment">// 从服务端加载数据的函数</span></span><br><span class="line">    <span class="comment">// 伪造演示数据</span></span><br><span class="line">    <span class="keyword">const</span> brands = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2032</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"OPPO"</span>,</span><br><span class="line">        <span class="string">"image"</span>: <span class="string">"http://img10.360buyimg.com/popshop/jfs/t2119/133/2264148064/4303/b8ab3755/56b2f385N8e4eb051.jpg"</span>,</span><br><span class="line">        <span class="string">"letter"</span>: <span class="string">"O"</span>,</span><br><span class="line">        <span class="string">"categories"</span>: <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2033</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"飞利浦（PHILIPS）"</span>,</span><br><span class="line">        <span class="string">"image"</span>: <span class="string">"http://img12.360buyimg.com/popshop/jfs/t18361/122/1318410299/1870/36fe70c9/5ac43a4dNa44a0ce0.jpg"</span>,</span><br><span class="line">        <span class="string">"letter"</span>: <span class="string">"F"</span>,</span><br><span class="line">        <span class="string">"categories"</span>: <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2034</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"华为（HUAWEI）"</span>,</span><br><span class="line">        <span class="string">"image"</span>: <span class="string">"http://img10.360buyimg.com/popshop/jfs/t5662/36/8888655583/7806/1c629c01/598033b4Nd6055897.jpg"</span>,</span><br><span class="line">        <span class="string">"letter"</span>: <span class="string">"H"</span>,</span><br><span class="line">        <span class="string">"categories"</span>: <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2036</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"酷派（Coolpad）"</span>,</span><br><span class="line">        <span class="string">"image"</span>: <span class="string">"http://img10.360buyimg.com/popshop/jfs/t2521/347/883897149/3732/91c917ec/5670cf96Ncffa2ae6.jpg"</span>,</span><br><span class="line">        <span class="string">"letter"</span>: <span class="string">"K"</span>,</span><br><span class="line">        <span class="string">"categories"</span>: <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">2037</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"魅族（MEIZU）"</span>,</span><br><span class="line">        <span class="string">"image"</span>: <span class="string">"http://img13.360buyimg.com/popshop/jfs/t3511/131/31887105/4943/48f83fa9/57fdf4b8N6e95624d.jpg"</span>,</span><br><span class="line">        <span class="string">"letter"</span>: <span class="string">"M"</span>,</span><br><span class="line">        <span class="string">"categories"</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 延迟一段时间，模拟数据请求时间</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.brands = brands; <span class="comment">// 赋值给品牌数组</span></span><br><span class="line">      <span class="keyword">this</span>.totalBrands = brands.length; <span class="comment">// 赋值数据总条数</span></span><br><span class="line">      <span class="keyword">this</span>.loading = <span class="literal">false</span>; <span class="comment">// 数据加载完成</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用钩子函数，在Vue实例初始化完毕后调用这个方法，这里使用mounted（渲染后）函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染后执行</span></span><br><span class="line">mounted()&#123;</span><br><span class="line">  <span class="keyword">this</span>.getDataFromServer() <span class="comment">// 调用数据初始化函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-4-完整代码"><a href="#6-2-3-4-完整代码" class="headerlink" title="6.2.3.4.完整代码"></a>6.2.3.4.完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;v-data-table</span><br><span class="line">      :headers=&quot;headers&quot;</span><br><span class="line">      :items=&quot;brands&quot;</span><br><span class="line">      :pagination.sync=&quot;pagination&quot;</span><br><span class="line">      :total-items=&quot;totalBrands&quot;</span><br><span class="line">      :loading=&quot;loading&quot;</span><br><span class="line">      class=&quot;elevation-1&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&lt;img v-if=&quot;props.item.image&quot; :src=&quot;props.item.image&quot; width=&quot;130&quot; height=&quot;40&quot;/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/v-data-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;myBrand&quot;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        totalBrands: 0, // 总条数</span><br><span class="line">        brands: [], // 当前页品牌数据</span><br><span class="line">        loading: true, // 是否在加载中</span><br><span class="line">        pagination: &#123;&#125;, // 分页信息</span><br><span class="line">        headers: [ // 头信息</span><br><span class="line">          &#123;text: &apos;id&apos;, align: &apos;center&apos;, value: &apos;id&apos;&#125;,</span><br><span class="line">          &#123;text: &apos;名称&apos;, align: &apos;center&apos;, value: &apos;name&apos;, sortable: false&#125;,</span><br><span class="line">          &#123;text: &apos;LOGO&apos;, align: &apos;center&apos;, value: &apos;image&apos;, sortable: false&#125;,</span><br><span class="line">          &#123;text: &apos;首字母&apos;, align: &apos;center&apos;, value: &apos;letter&apos;&#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getDataFromServer()&#123; // 从服务端加载数据的函数</span><br><span class="line">        // 伪造演示数据</span><br><span class="line">        const brands = [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;id&quot;: 2032,</span><br><span class="line">            &quot;name&quot;: &quot;OPPO&quot;,</span><br><span class="line">            &quot;image&quot;: &quot;http://img10.360buyimg.com/popshop/jfs/t2119/133/2264148064/4303/b8ab3755/56b2f385N8e4eb051.jpg&quot;,</span><br><span class="line">            &quot;letter&quot;: &quot;O&quot;,</span><br><span class="line">            &quot;categories&quot;: null</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;id&quot;: 2033,</span><br><span class="line">            &quot;name&quot;: &quot;飞利浦（PHILIPS）&quot;,</span><br><span class="line">            &quot;image&quot;: &quot;http://img12.360buyimg.com/popshop/jfs/t18361/122/1318410299/1870/36fe70c9/5ac43a4dNa44a0ce0.jpg&quot;,</span><br><span class="line">            &quot;letter&quot;: &quot;F&quot;,</span><br><span class="line">            &quot;categories&quot;: null</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;id&quot;: 2034,</span><br><span class="line">            &quot;name&quot;: &quot;华为（HUAWEI）&quot;,</span><br><span class="line">            &quot;image&quot;: &quot;http://img10.360buyimg.com/popshop/jfs/t5662/36/8888655583/7806/1c629c01/598033b4Nd6055897.jpg&quot;,</span><br><span class="line">            &quot;letter&quot;: &quot;H&quot;,</span><br><span class="line">            &quot;categories&quot;: null</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;id&quot;: 2036,</span><br><span class="line">            &quot;name&quot;: &quot;酷派（Coolpad）&quot;,</span><br><span class="line">            &quot;image&quot;: &quot;http://img10.360buyimg.com/popshop/jfs/t2521/347/883897149/3732/91c917ec/5670cf96Ncffa2ae6.jpg&quot;,</span><br><span class="line">            &quot;letter&quot;: &quot;K&quot;,</span><br><span class="line">            &quot;categories&quot;: null</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;id&quot;: 2037,</span><br><span class="line">            &quot;name&quot;: &quot;魅族（MEIZU）&quot;,</span><br><span class="line">            &quot;image&quot;: &quot;http://img13.360buyimg.com/popshop/jfs/t3511/131/31887105/4943/48f83fa9/57fdf4b8N6e95624d.jpg&quot;,</span><br><span class="line">            &quot;letter&quot;: &quot;M&quot;,</span><br><span class="line">            &quot;categories&quot;: null</span><br><span class="line">          &#125;</span><br><span class="line">        ];</span><br><span class="line">        // 延迟一段时间，模拟数据请求时间</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">          this.brands = brands; // 赋值给品牌数组</span><br><span class="line">          this.totalBrands = brands.length; // 赋值数据总条数</span><br><span class="line">          this.loading = false; // 数据加载完成</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 渲染后执行</span><br><span class="line">    mounted()&#123;</span><br><span class="line">      this.getDataFromServer() // 调用数据初始化函数</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- scoped:当前样式只作用于当前组件的节点 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="7-1-4-优化页面"><a href="#7-1-4-优化页面" class="headerlink" title="7.1.4.优化页面"></a>7.1.4.优化页面</h3><h4 id="7-1-4-1-编辑和删除按钮"><a href="#7-1-4-1-编辑和删除按钮" class="headerlink" title="7.1.4.1.编辑和删除按钮"></a>7.1.4.1.编辑和删除按钮</h4><p>我们将来要对品牌进行增删改，需要给每一行数据添加 修改删除的按钮，一般放到改行的最后一列。</p><p>其实就是多了一列，只是这一列没有数据，而是两个按钮而已。可以在官方文档中找一个带有操作按钮的表格，作为参考。</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530523252532.png" alt="1530523252532"></p><p>我们先在头（headers）中添加一列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">headers: [ <span class="comment">// 头信息</span></span><br><span class="line">    &#123;<span class="attr">text</span>: <span class="string">'id'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'id'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">text</span>: <span class="string">'名称'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'name'</span>, <span class="attr">sortable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">text</span>: <span class="string">'LOGO'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'image'</span>, <span class="attr">sortable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">text</span>: <span class="string">'首字母'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'letter'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">text</span>: <span class="string">'操作'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'id'</span>, <span class="attr">sortable</span>: <span class="literal">false</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在模板中添加按钮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">&lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;text-xs-center&quot;&gt;&lt;img v-if=&quot;props.item.image&quot; :src=&quot;props.item.image&quot; width=&quot;130&quot; height=&quot;40&quot;/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;text-xs-center&quot;&gt;</span><br><span class="line">        &lt;v-icon small class=&quot;mr-2&quot; @click=&quot;editItem(props.item)&quot;&gt;</span><br><span class="line">            edit</span><br><span class="line">        &lt;/v-icon&gt;</span><br><span class="line">        &lt;v-icon small @click=&quot;deleteItem(props.item)&quot;&gt;</span><br><span class="line">            delete</span><br><span class="line">        &lt;/v-icon&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530523838357.png" alt="1530523838357"></p><h4 id="7-1-4-2-新增按钮"><a href="#7-1-4-2-新增按钮" class="headerlink" title="7.1.4.2.新增按钮"></a>7.1.4.2.新增按钮</h4><p>在官方文档中找到按钮的用法：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530524238344.png" alt="1530524238344"></p><p>因为新增跟某个品牌无关，是独立的，因此我们可以放到表格的外面。</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530527129881.png" alt="1530527129881"></p><p>效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530527160208.png" alt="1530527160208"></p><h4 id="7-1-4-3-卡片（card）"><a href="#7-1-4-3-卡片（card）" class="headerlink" title="7.1.4.3.卡片（card）"></a>7.1.4.3.卡片（card）</h4><p>为了不让按钮显得过于孤立，我们可以将按<code>新增按钮</code>和<code>表格</code>放到一张卡片（card）中。</p><p>我们去官网查看卡片的用法：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526031159242.png" alt="1526031159242"></p><p>卡片<code>v-card</code>包含四个基本组件：</p><ul><li>v-card-media：一般放图片或视频</li><li>v-card-title：卡片的标题，一般位于卡片顶部</li><li>v-card-text：卡片的文本（主体内容），一般位于卡片正中</li><li>v-card-action：卡片的按钮，一般位于卡片底部</li></ul><p>我们可以把<code>新增的按钮</code>放到<code>v-card-title</code>位置，把<code>table</code>放到下面，这样就成一个上下关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-card&gt;</span><br><span class="line">    &lt;v-card-title flat color=&quot;white&quot;&gt;</span><br><span class="line">      &lt;v-btn color=&quot;primary&quot;&gt;新增&lt;/v-btn&gt;</span><br><span class="line">    &lt;/v-card-title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;v-data-table</span><br><span class="line">      :headers=&quot;headers&quot;</span><br><span class="line">      :items=&quot;brands&quot;</span><br><span class="line">      :pagination.sync=&quot;pagination&quot;</span><br><span class="line">      :total-items=&quot;totalBrands&quot;</span><br><span class="line">      :loading=&quot;loading&quot;</span><br><span class="line">      class=&quot;elevation-1&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&lt;img v-if=&quot;props.item.image&quot; :src=&quot;props.item.image&quot; width=&quot;130&quot; height=&quot;40&quot;/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;</span><br><span class="line">          &lt;v-icon small class=&quot;mr-2&quot; @click=&quot;editItem(props.item)&quot;&gt;</span><br><span class="line">            edit</span><br><span class="line">          &lt;/v-icon&gt;</span><br><span class="line">          &lt;v-icon small @click=&quot;deleteItem(props.item)&quot;&gt;</span><br><span class="line">            delete</span><br><span class="line">          &lt;/v-icon&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/v-data-table&gt;</span><br><span class="line">  &lt;/v-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530532504861.png" alt="1530532504861"></p><h4 id="7-1-4-4-添加搜索框"><a href="#7-1-4-4-添加搜索框" class="headerlink" title="7.1.4.4.添加搜索框"></a>7.1.4.4.添加搜索框</h4><p>我们还可以在卡片头部添加一个搜索框，其实就是一个文本输入框。</p><p>查看官网中，文本框的用法：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526031897445.png" alt="1526031897445"></p><ul><li>name：字段名，表单中会用到</li><li>label/placeholder：提示文字</li><li>value：值。可以用v-model代替，实现双向绑定</li></ul><p>修改模板，添加输入框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-card-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>新增品牌<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--搜索框，与search属性关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">label</span>=<span class="string">"输入关键字搜索"</span> <span class="attr">v-model</span>=<span class="string">"search"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-card-title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：要在数据模型中，添加search字段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    totalBrands: <span class="number">0</span>, <span class="comment">// 总条数</span></span><br><span class="line">    brands: [], <span class="comment">// 当前页品牌数据</span></span><br><span class="line">    search: <span class="string">""</span>, <span class="comment">// 查询关键字</span></span><br><span class="line">    loading: <span class="literal">true</span>, <span class="comment">// 是否在加载中</span></span><br><span class="line">    pagination: &#123;&#125;, <span class="comment">// 分页信息</span></span><br><span class="line">    headers: [ <span class="comment">// 头信息</span></span><br><span class="line">      &#123;<span class="attr">text</span>: <span class="string">'id'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'id'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">text</span>: <span class="string">'名称'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'name'</span>, <span class="attr">sortable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">text</span>: <span class="string">'LOGO'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'image'</span>, <span class="attr">sortable</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">text</span>: <span class="string">'首字母'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'letter'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">text</span>: <span class="string">'操作'</span>, <span class="attr">align</span>: <span class="string">'center'</span>, <span class="attr">value</span>: <span class="string">'id'</span>, <span class="attr">sortable</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530533261856.png" alt="1530533261856"></p><p>发现输入框超级长！！！</p><p>这个时候，我们可以使用Vuetify提供的一个空间隔离工具：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530533442878.png" alt="1530533442878"></p><p>修改代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-card-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>新增品牌<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--空间隔离组件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-spacer</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--搜索框，与search属性关联--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">label</span>=<span class="string">"输入关键字搜索"</span> <span class="attr">v-model</span>=<span class="string">"search"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-card-title</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530534269196.png" alt="1530534269196"></p><h4 id="7-1-4-5-添加搜索图标"><a href="#7-1-4-5-添加搜索图标" class="headerlink" title="7.1.4.5.添加搜索图标"></a>7.1.4.5.添加搜索图标</h4><p>查看textfiled的文档，发现：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526033007616.png" alt="1526033007616"></p><p>通过append-icon属性可以为 输入框添加后置图标，所有可用图标名称可以到 <a href="https://material.io/tools/icons/" target="_blank" rel="noopener">material-icons官网</a>去查看。</p><p>修改我们的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">label</span>=<span class="string">"输入关键字搜索"</span> <span class="attr">v-model</span>=<span class="string">"search"</span> <span class="attr">append-icon</span>=<span class="string">"search"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530534311458.png" alt="1530534311458"></p><h4 id="7-1-4-6-把文本框变紧凑"><a href="#7-1-4-6-把文本框变紧凑" class="headerlink" title="7.1.4.6.把文本框变紧凑"></a>7.1.4.6.把文本框变紧凑</h4><p>搜索框看起来高度比较高，页面不够紧凑。这其实是因为默认在文本框下面预留有错误提示空间。通过下面的属性可以取消提示：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526033439890.png" alt="1526033439890"></p><p>修改代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-text-field</span> <span class="attr">label</span>=<span class="string">"输入关键字搜索"</span> <span class="attr">v-model</span>=<span class="string">"search"</span> <span class="attr">append-icon</span>=<span class="string">"search"</span> <span class="attr">hide-details</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530534423194.png" alt="1530534423194"></p><p>几乎已经达到了原来一样的效果了吧！</p><h2 id="7-2-后台提供查询接口"><a href="#7-2-后台提供查询接口" class="headerlink" title="7.2.后台提供查询接口"></a>7.2.后台提供查询接口</h2><p>前台页面已经准备好，接下来就是后台提供数据接口了。</p><h3 id="7-2-1-数据库表"><a href="#7-2-1-数据库表" class="headerlink" title="7.2.1.数据库表"></a>7.2.1.数据库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_brand` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;品牌id&apos;,</span><br><span class="line">  `name` varchar(50) NOT NULL COMMENT &apos;品牌名称&apos;,</span><br><span class="line">  `image` varchar(200) DEFAULT &apos;&apos; COMMENT &apos;品牌图片地址&apos;,</span><br><span class="line">  `letter` char(1) DEFAULT &apos;&apos; COMMENT &apos;品牌的首字母&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=325400 DEFAULT CHARSET=utf8 COMMENT=&apos;品牌表，一个品牌下有多个商品（spu），一对多关系&apos;;</span><br></pre></td></tr></table></figure><p>简单的四个字段，不多解释。</p><p>这里需要注意的是，品牌和商品分类之间是多对多关系。因此我们有一张中间表，来维护两者间关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_category_brand` (</span><br><span class="line">  `category_id` bigint(20) NOT NULL COMMENT &apos;商品类目id&apos;,</span><br><span class="line">  `brand_id` bigint(20) NOT NULL COMMENT &apos;品牌id&apos;,</span><br><span class="line">  PRIMARY KEY (`category_id`,`brand_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;商品分类和品牌的中间表，两者是多对多关系&apos;;</span><br></pre></td></tr></table></figure><p>但是，你可能会发现，这张表中并<strong>没有设置外键约束</strong>，似乎与数据库的设计范式不符。为什么这么做？</p><ul><li>外键会严重影响数据库读写的效率</li><li>数据删除时会比较麻烦</li></ul><p>在电商行业，性能是非常重要的。我们宁可在代码中通过逻辑来维护表关系，也不设置外键。</p><h3 id="7-2-2-实体类"><a href="#7-2-2-实体类" class="headerlink" title="7.2.2.实体类"></a>7.2.2.实体类</h3><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530541070271.png" alt="1530541070271"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_brand"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String image;<span class="comment">// 品牌图片</span></span><br><span class="line">    <span class="keyword">private</span> Character letter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-3-mapper"><a href="#7-2-3-mapper" class="headerlink" title="7.2.3.mapper"></a>7.2.3.mapper</h3><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530541222679.png" alt="1530541222679"></p><p>通用mapper来简化开发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-4-controller"><a href="#7-2-4-controller" class="headerlink" title="7.2.4.controller"></a>7.2.4.controller</h3><p>编写controller先思考四个问题，这次没有前端代码，需要我们自己来设定</p><ul><li>请求方式：查询，肯定是Get</li><li>请求路径：分页查询，/brand/page</li><li>请求参数：根据我们刚才编写的页面，有分页功能，有排序功能，有搜索过滤功能，因此至少要有5个参数：<ul><li>page：当前页，int</li><li>rows：每页大小，int</li><li>sortBy：排序字段，String</li><li>desc：是否为降序，boolean</li><li>key：搜索关键词，String</li></ul></li><li>响应结果：分页结果一般至少需要两个数据<ul><li>total：总条数</li><li>items：当前页数据</li><li>totalPage：有些还需要总页数</li></ul></li></ul><p>这里我们封装一个类，来表示分页结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">private</span> Long totalPage;<span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;<span class="comment">// 当前页数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(Long total, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(Long total, Long totalPage, List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(Long total)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(Long totalPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，这个PageResult以后可能在其它项目中也有需求，因此我们将其抽取到<code>leyou-common</code>中，提高复用性：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530543778541.png" alt="1530543778541"></p><p><strong>不要忘记在leyou-item-service工程的pom.xml中引入leyou-common的依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，我们编写Controller</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530549253999.png" alt="1530549253999"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"brand"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"page"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;PageResult&lt;Brand&gt;&gt; queryBrandByPage(</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>) Integer page,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"rows"</span>, defaultValue = <span class="string">"5"</span>) Integer rows,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"sortBy"</span>, required = <span class="keyword">false</span>) String sortBy,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"desc"</span>, defaultValue = <span class="string">"false"</span>) Boolean desc,</span><br><span class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"key"</span>, required = <span class="keyword">false</span>) String key) &#123;</span><br><span class="line">        PageResult&lt;Brand&gt; result = <span class="keyword">this</span>.brandService.queryBrandByPageAndSort(page,rows,sortBy,desc, key);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || result.getItems().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-5-Service"><a href="#7-2-5-Service" class="headerlink" title="7.2.5.Service"></a>7.2.5.Service</h3><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530549286718.png" alt="1530549286718"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandMapper brandMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult&lt;Brand&gt; <span class="title">queryBrandByPageAndSort</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Integer page, Integer rows, String sortBy, Boolean desc, String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 开始分页</span></span><br><span class="line">        PageHelper.startPage(page, rows);</span><br><span class="line">        <span class="comment">// 过滤</span></span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Brand.class);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(key)) &#123;</span><br><span class="line">            example.createCriteria().andLike(<span class="string">"name"</span>, <span class="string">"%"</span> + key + <span class="string">"%"</span>)</span><br><span class="line">                    .orEqualTo(<span class="string">"letter"</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(sortBy)) &#123;</span><br><span class="line">            <span class="comment">// 排序</span></span><br><span class="line">            String orderByClause = sortBy + (desc ? <span class="string">" DESC"</span> : <span class="string">" ASC"</span>);</span><br><span class="line">            example.setOrderByClause(orderByClause);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        Page&lt;Brand&gt; pageInfo = (Page&lt;Brand&gt;) brandMapper.selectByExample(example);</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(pageInfo.getTotal(), pageInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-6-测试"><a href="#7-2-6-测试" class="headerlink" title="7.2.6.测试"></a>7.2.6.测试</h3><p>通过浏览器访问试试：<a href="http://api.leyou.com/api/item/brand/page" target="_blank" rel="noopener">http://api.leyou.com/api/item/brand/page</a></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530549095150.png" alt="1530549095150"></p><p>接下来，去页面请求数据并渲染</p><h2 id="7-3-异步查询工具axios"><a href="#7-3-异步查询工具axios" class="headerlink" title="7.3.异步查询工具axios"></a>7.3.异步查询工具axios</h2><p>异步查询数据，自然是通过ajax查询，大家首先想起的肯定是jQuery。但jQuery与MVVM的思想不吻合，而且ajax只是jQuery的一小部分。因此不可能为了发起ajax请求而去引用这么大的一个库。</p><h3 id="7-3-1-axios入门"><a href="#7-3-1-axios入门" class="headerlink" title="7.3.1.axios入门"></a>7.3.1.axios入门</h3><p>Vue官方推荐的ajax请求框架叫做：axios，看下demo：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526033988251.png" alt="1526033988251"></p><p>axios的Get请求语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">"/item/category/list?pid=0"</span>) <span class="comment">// 请求路径和请求参数拼接</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 成功回调函数</span></span><br><span class="line">&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 失败回调函数</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 参数较多时，可以通过params来传递参数</span></span><br><span class="line">axios.get(<span class="string">"/item/category/list"</span>, &#123;</span><br><span class="line">        params:&#123;</span><br><span class="line">            pid:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;&#125;)<span class="comment">// 成功时的回调</span></span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;&#125;)<span class="comment">// 失败时的回调</span></span><br></pre></td></tr></table></figure><p>axios的POST请求语法：</p><p>比如新增一个用户</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">"/user"</span>,&#123;</span><br><span class="line">    name:<span class="string">"Jack"</span>,</span><br><span class="line">    age:<span class="number">21</span></span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li>注意，POST请求传参，不需要像GET请求那样定义一个对象，在对象的params参数中传参。post()方法的第二个参数对象，就是将来要传递的参数</li></ul><p>PUT和DELETE请求与POST请求类似</p><h3 id="7-3-2-axios的全局配置"><a href="#7-3-2-axios的全局配置" class="headerlink" title="7.3.2.axios的全局配置"></a>7.3.2.axios的全局配置</h3><p>而在我们的项目中，已经引入了axios，并且进行了简单的封装，在src下的http.js中：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526034150067.png" alt="1526034150067"></p><p>http.js中对axios进行了一些默认配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"><span class="comment">// config中定义的基础路径是：http://api.leyou.com/api</span></span><br><span class="line">axios.defaults.baseURL = config.api; <span class="comment">// 设置axios的基础请求路径</span></span><br><span class="line">axios.defaults.timeout = <span class="number">2000</span>; <span class="comment">// 设置axios的请求时间</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$http = axios;<span class="comment">// 将axios赋值给Vue原型的$http属性，这样所有vue实例都可使用该对象</span></span><br></pre></td></tr></table></figure><ul><li><p>http.js中导入了config的配置，还记得吗？</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526041205846.png" alt="1526041205846"></p></li><li><p>http.js对axios进行了全局配置：<code>baseURL=config.api</code>，即<code>http://api.leyou.com/api</code>。因此以后所有用axios发起的请求，都会以这个地址作为前缀。</p></li><li><p>通过<code>Vue.property.$http = axios</code>，将<code>axios</code>赋值给了 Vue原型中的<code>$http</code>。这样以后所有的Vue实例都可以访问到$http，也就是访问到了axios了。</p></li></ul><h3 id="7-3-3-小试一下"><a href="#7-3-3-小试一下" class="headerlink" title="7.3.3.小试一下"></a>7.3.3.小试一下</h3><p>我们在组件<code>MyBrand.vue</code>的getDataFromServer方法，通过$http发起get请求，测试查询品牌的接口，看是否能获取到数据：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526048079191.png" alt="1526048221750"></p><p>网络监视：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526048143014.png" alt="1526048143014"></p><p>resp到底都有那些数据，查看控制台结果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526048275064.png" alt="1526048275064"></p><p>可以看到，在请求成功的返回结果response中，有一个data属性，里面就是真正的响应数据。</p><p>响应结果中与我们设计的一致，包含3个内容：</p><ul><li>total：总条数，目前是165</li><li>items：当前页数据</li><li>totalPage：总页数，我们没有返回</li></ul><h2 id="7-4-异步加载品牌数据"><a href="#7-4-异步加载品牌数据" class="headerlink" title="7.4.异步加载品牌数据"></a>7.4.异步加载品牌数据</h2><p>虽然已经通过ajax请求获取了品牌数据，但是刚才的请求没有携带任何参数，这样显然不对。我们后端接口需要5个参数：</p><ul><li>page：当前页，int</li><li>rows：每页大小，int</li><li>sortBy：排序字段，String</li><li>desc：是否为降序，boolean</li><li>key：搜索关键词，String</li></ul><p>而页面中分页信息应该是在pagination对象中，我们通过浏览器工具，查看pagination中有哪些属性：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530553414937.png" alt="1530553414937"></p><p>分别是：</p><ul><li>descending：是否是降序，对应请求参数的desc</li><li>page：当前页，对应参数的page</li><li>rowsPerpage：每页大小，对应参数中的rows</li><li>sortBy：排序字段，对应参数的sortBy</li></ul><p>缺少一个搜索关键词，这个应该是通过v-model与输入框绑定的属性：search。这样，所有参数就都有了。</p><p>另外，不要忘了把查询的结果赋值给brands和totalBrands属性，Vuetify会帮我们渲染页面。</p><p>接下来，我们完善请求参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  getDataFromServer() &#123; <span class="comment">// 从服务端加载数据的函数</span></span><br><span class="line">    <span class="keyword">this</span>.loading = <span class="literal">true</span>; <span class="comment">// 加载数据</span></span><br><span class="line">    <span class="comment">// 通过axios获取数据</span></span><br><span class="line">    <span class="keyword">this</span>.$http.get(<span class="string">"/item/brand/page"</span>, &#123;</span><br><span class="line">      params: &#123;</span><br><span class="line">        page: <span class="keyword">this</span>.pagination.page, <span class="comment">// 当前页</span></span><br><span class="line">        rows: <span class="keyword">this</span>.pagination.rowsPerPage, <span class="comment">// 每页条数</span></span><br><span class="line">        sortBy: <span class="keyword">this</span>.pagination.sortBy, <span class="comment">// 排序字段</span></span><br><span class="line">        desc: <span class="keyword">this</span>.pagination.descending, <span class="comment">// 是否降序</span></span><br><span class="line">        key: <span class="keyword">this</span>.search <span class="comment">// 查询字段</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123; <span class="comment">// 获取响应结果对象</span></span><br><span class="line">      <span class="keyword">this</span>.totalBrands = resp.data.total; <span class="comment">// 总条数</span></span><br><span class="line">      <span class="keyword">this</span>.brands = resp.data.items; <span class="comment">// 品牌数据</span></span><br><span class="line">      <span class="keyword">this</span>.loading = <span class="literal">false</span>; <span class="comment">// 加载完成</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看网络请求：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530554422695.png" alt="1530554422695"></p><p>效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530554460215.png" alt="1530554460215"></p><h2 id="7-5-完成分页和过滤"><a href="#7-5-完成分页和过滤" class="headerlink" title="7.5.完成分页和过滤"></a>7.5.完成分页和过滤</h2><h3 id="6-6-1-分页"><a href="#6-6-1-分页" class="headerlink" title="6.6.1.分页"></a>6.6.1.分页</h3><p>现在我们实现了页面加载时的第一次查询，你会发现你点击分页或搜索不会发起新的请求，怎么办？</p><p>虽然点击分页，不会发起请求，但是通过浏览器工具查看，会发现pagination对象的属性一直在变化：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/9.gif" alt></p><p>我们可以利用Vue的监视功能：watch，当pagination发生改变时，会调用我们的回调函数，我们在回调函数中进行数据的查询即可！</p><p>具体实现：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526049643506.png" alt="1526049643506"></p><p>成功实现分页功能：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/22.gif" alt="1526049720200"></p><h3 id="6-6-2-过滤"><a href="#6-6-2-过滤" class="headerlink" title="6.6.2.过滤"></a>6.6.2.过滤</h3><p>分页实现了，过滤也很好实现了。过滤字段对应的是search属性，我们只要监视这个属性即可:</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526049939985.png" alt="1526049939985"></p><p>查看网络请求：</p><p> <img src="H:/%E4%B9%90%E4%BC%98/day06-%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2/https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526050032436.png" alt="1526050032436"></p><p>页面结果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530555740595.png" alt="1530555740595"></p><h2 id="6-7-完整代码"><a href="#6-7-完整代码" class="headerlink" title="6.7.完整代码"></a>6.7.完整代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-card&gt;</span><br><span class="line">    &lt;v-card-title flat color=&quot;white&quot;&gt;</span><br><span class="line">      &lt;v-btn color=&quot;primary&quot;&gt;新增&lt;/v-btn&gt;</span><br><span class="line">      &lt;!--空间隔离组件--&gt;</span><br><span class="line">      &lt;v-spacer /&gt;</span><br><span class="line">      &lt;!--搜索框，与search属性关联--&gt;</span><br><span class="line">      &lt;v-text-field label=&quot;输入关键字搜索&quot; append-icon=&quot;search&quot; v-model=&quot;search&quot; hide-details/&gt;</span><br><span class="line">    &lt;/v-card-title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;v-data-table</span><br><span class="line">      :headers=&quot;headers&quot;</span><br><span class="line">      :items=&quot;brands&quot;</span><br><span class="line">      :pagination.sync=&quot;pagination&quot;</span><br><span class="line">      :total-items=&quot;totalBrands&quot;</span><br><span class="line">      :loading=&quot;loading&quot;</span><br><span class="line">      class=&quot;elevation-1&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot=&quot;items&quot; slot-scope=&quot;props&quot;&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&lt;img v-if=&quot;props.item.image&quot; :src=&quot;props.item.image&quot; width=&quot;130&quot; height=&quot;40&quot;/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;&#123;&#123; props.item.letter &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td class=&quot;text-xs-center&quot;&gt;</span><br><span class="line">          &lt;v-icon small class=&quot;mr-2&quot; @click=&quot;editItem(props.item)&quot;&gt;</span><br><span class="line">            edit</span><br><span class="line">          &lt;/v-icon&gt;</span><br><span class="line">          &lt;v-icon small @click=&quot;deleteItem(props.item)&quot;&gt;</span><br><span class="line">            delete</span><br><span class="line">          &lt;/v-icon&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/v-data-table&gt;</span><br><span class="line">  &lt;/v-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;myBrand&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        totalBrands: 0, // 总条数</span><br><span class="line">        brands: [], // 当前页品牌数据</span><br><span class="line">        search: &quot;&quot;, // 查询关键字</span><br><span class="line">        loading: true, // 是否在加载中</span><br><span class="line">        pagination: &#123;&#125;, // 分页信息</span><br><span class="line">        headers: [ // 头信息</span><br><span class="line">          &#123;text: &apos;id&apos;, align: &apos;center&apos;, value: &apos;id&apos;&#125;,</span><br><span class="line">          &#123;text: &apos;名称&apos;, align: &apos;center&apos;, value: &apos;name&apos;, sortable: false&#125;,</span><br><span class="line">          &#123;text: &apos;LOGO&apos;, align: &apos;center&apos;, value: &apos;image&apos;, sortable: false&#125;,</span><br><span class="line">          &#123;text: &apos;首字母&apos;, align: &apos;center&apos;, value: &apos;letter&apos;&#125;,</span><br><span class="line">          &#123;text: &apos;操作&apos;, align: &apos;center&apos;, value: &apos;id&apos;, sortable: false&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      pagination:&#123;</span><br><span class="line">        deep: true, // 深度监视</span><br><span class="line">        handler()&#123;</span><br><span class="line">          this.getDataFromServer();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      search()&#123;</span><br><span class="line">        this.pagination.page = 1;</span><br><span class="line">        this.getDataFromServer();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getDataFromServer() &#123; // 从服务端加载数据的函数</span><br><span class="line">        this.loading = true; // 加载数据</span><br><span class="line">        // 通过axios获取数据</span><br><span class="line">        this.$http.get(&quot;/item/brand/page&quot;, &#123;</span><br><span class="line">          params: &#123;</span><br><span class="line">            page: this.pagination.page, // 当前页</span><br><span class="line">            rows: this.pagination.rowsPerPage, // 每页条数</span><br><span class="line">            sortBy: this.pagination.sortBy, // 排序字段</span><br><span class="line">            desc: this.pagination.descending, // 是否降序</span><br><span class="line">            key: this.search // 查询字段</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then(resp =&gt; &#123; // 获取响应结果对象</span><br><span class="line">          this.totalBrands = resp.data.total; // 总条数</span><br><span class="line">          this.brands = resp.data.items; // 品牌数据</span><br><span class="line">          this.loading = false; // 加载完成</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 渲染后执行</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.getDataFromServer() // 调用数据初始化函数</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- scoped:当前样式只作用于当前组件的节点 --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-从0开始品牌的查询&quot;&gt;&lt;a href=&quot;#7-从0开始品牌的查询&quot; class=&quot;headerlink&quot; title=&quot;7.从0开始品牌的查询&quot;&gt;&lt;/a&gt;7.从0开始品牌的查询&lt;/h1&gt;&lt;p&gt;先看看我们要实现的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E8%B7%A8%E5%9F%9F%E5%88%86%E6%9E%90/"/>
    <id>https://wangdaye7.github.io/2019/05/17/微服务/待整理/跨域分析/</id>
    <published>2019-05-17T04:52:54.758Z</published>
    <updated>2019-05-19T02:39:27.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-跨域问题"><a href="#6-跨域问题" class="headerlink" title="6.跨域问题"></a>6.跨域问题</h1><p>跨域：浏览器对于javascript的同源策略的限制 。</p><p>以下情况都属于跨域：</p><table><thead><tr><th>跨域原因说明</th><th>示例</th></tr></thead><tbody><tr><td>域名不同</td><td><code>www.jd.com</code> 与 <code>www.taobao.com</code></td></tr><tr><td>域名相同，端口不同</td><td><code>www.jd.com:8080</code> 与 <code>www.jd.com:8081</code></td></tr><tr><td>二级域名不同</td><td><code>item.jd.com</code> 与 <code>miaosha.jd.com</code></td></tr></tbody></table><p>如果<strong>域名和端口都相同，但是请求路径不同</strong>，不属于跨域，如：</p><p><code>www.jd.com/item</code> </p><p><code>www.jd.com/goods</code></p><p>而我们刚才是从<code>manage.leyou.com</code>去访问<code>api.leyou.com</code>，这属于二级域名不同，跨域了。</p><h2 id="6-1-为什么有跨域问题？"><a href="#6-1-为什么有跨域问题？" class="headerlink" title="6.1.为什么有跨域问题？"></a>6.1.为什么有跨域问题？</h2><p>跨域不一定会有跨域问题。</p><p>因为跨域问题是浏览器对于ajax请求的一种安全限制：<strong>一个页面发起的ajax请求，只能是与当前页域名相同的路径</strong>，这能有效的阻止跨站攻击。</p><p>因此：<strong>跨域问题 是针对ajax的一种限制</strong>。</p><p>但是这却给我们的开发带来了不便，而且在实际生产环境中，肯定会有很多台服务器之间交互，地址和端口都可能不同，怎么办？</p><h2 id="6-2-解决跨域问题的方案"><a href="#6-2-解决跨域问题的方案" class="headerlink" title="6.2.解决跨域问题的方案"></a>6.2.解决跨域问题的方案</h2><p>目前比较常用的跨域解决方案有3种：</p><ul><li><p>Jsonp</p><p>最早的解决方案，利用script标签可以跨域的原理实现。</p><p>限制：</p><ul><li>需要服务的支持</li><li>只能发起GET请求</li></ul></li><li><p>nginx反向代理</p><p>思路是：利用nginx把跨域反向代理为不跨域，支持各种请求方式</p><p>缺点：需要在nginx进行额外配置，语义不清晰</p></li><li><p>CORS</p><p>规范化的跨域请求解决方案，安全可靠。</p><p>优势：</p><ul><li>在服务端进行控制是否允许跨域，可自定义规则</li><li>支持各种请求方式</li></ul><p>缺点：</p><ul><li>会产生额外的请求</li></ul></li></ul><p>我们这里会采用<strong>cors的跨域方案</strong>。</p><h2 id="6-3-cors解决跨域"><a href="#6-3-cors解决跨域" class="headerlink" title="6.3.cors解决跨域"></a>6.3.cors解决跨域</h2><h3 id="6-3-1-什么是cors"><a href="#6-3-1-什么是cors" class="headerlink" title="6.3.1.什么是cors"></a>6.3.1.什么是cors</h3><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p><p>它允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">同源</a>使用的限制。</p><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><ul><li><p>浏览器端：</p><p>目前，所有浏览器都支持该功能（IE10以下不行）。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。</p></li><li><p>服务端：</p><p>CORS通信与AJAX没有任何差别，因此你不需要改变以前的业务逻辑。只不过，浏览器会在请求中携带一些头信息，我们需要以此判断是否允许其跨域，然后在响应头中加入一些信息即可。这一般通过过滤器完成即可。</p></li></ul><h3 id="6-3-2-原理有点复杂"><a href="#6-3-2-原理有点复杂" class="headerlink" title="6.3.2.原理有点复杂"></a>6.3.2.原理有点复杂</h3><p>浏览器会将ajax请求分为两类，其处理方案略有差异：简单请求、特殊请求。</p><h4 id="6-3-2-1-简单请求"><a href="#6-3-2-1-简单请求" class="headerlink" title="6.3.2.1.简单请求"></a>6.3.2.1.简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求。：</p><p>（1) 请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul><p>（2）HTTP的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li></ul><p>当浏览器发现发起的ajax请求是简单请求时，会在请求头中携带一个字段：<code>Origin</code>.</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530460311064.png" alt="1530460311064"></p><p>Origin中会指出当前请求属于哪个域（协议+域名+端口）。服务会根据这个值决定是否允许其跨域。</p><p>如果服务器允许跨域，需要在返回的响应头中携带下面信息：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><ul><li>Access-Control-Allow-Origin：可接受的域，是一个具体域名或者*（代表任意域名）</li><li>Access-Control-Allow-Credentials：是否允许携带cookie，默认情况下，cors不会携带cookie，除非这个值是true</li></ul><blockquote><p>有关cookie：</p></blockquote><p>要想操作cookie，需要满足3个条件：</p><ul><li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。</li><li>浏览器发起ajax需要指定withCredentials 为true</li><li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名</li></ul><h4 id="6-3-2-2-特殊请求"><a href="#6-3-2-2-特殊请求" class="headerlink" title="6.3.2.2.特殊请求"></a>6.3.2.2.特殊请求</h4><p>不符合简单请求的条件，会被浏览器判定为特殊请求,，例如请求方式为PUT。</p><blockquote><p>预检请求</p></blockquote><p>特殊请求会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p><p>一个“预检”请求的样板：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span>: PUT</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Host</span>: api.leyou.com</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure><p>与简单请求相比，除了Origin以外，多了两个头：</p><ul><li>Access-Control-Request-Method：接下来会用到的请求方式，比如PUT</li><li>Access-Control-Request-Headers：会额外用到的头信息</li></ul><blockquote><p>预检请求的响应</p></blockquote><p>服务的收到预检请求，如果许可跨域，会发出响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.0.61 (Unix)</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 1728000</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure><p>除了<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Credentials</code>以外，这里又额外多出3个头：</p><ul><li>Access-Control-Allow-Methods：允许访问的方式</li><li>Access-Control-Allow-Headers：允许携带的头</li><li>Access-Control-Max-Age：本次许可的有效时长，单位是秒，<strong>过期之前的ajax请求就无需再次进行预检了</strong></li></ul><p>如果浏览器得到上述响应，则认定为可以跨域，后续就跟简单请求的处理是一样的了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;6-跨域问题&quot;&gt;&lt;a href=&quot;#6-跨域问题&quot; class=&quot;headerlink&quot; title=&quot;6.跨域问题&quot;&gt;&lt;/a&gt;6.跨域问题&lt;/h1&gt;&lt;p&gt;跨域：浏览器对于javascript的同源策略的限制 。&lt;/p&gt;
&lt;p&gt;以下情况都属于跨域：&lt;/p&gt;
&lt;ta
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E5%88%A9%E7%94%A8Cors%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://wangdaye7.github.io/2019/05/17/微服务/待整理/利用Cors解决跨域问题/</id>
    <published>2019-05-17T04:48:54.588Z</published>
    <updated>2019-05-19T02:39:27.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="6-3-3-实现非常简单"><a href="#6-3-3-实现非常简单" class="headerlink" title="6.3.3.实现非常简单"></a>6.3.3.实现非常简单</h3><p>在<code>leyou-gateway</code>中编写一个配置类，并且注册CorsFilter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://manage.leyou.com"</span>);</span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"HEAD"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"GET"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PUT"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"POST"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"DELETE"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"PATCH"</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// 5) 有效时长</span></span><br><span class="line">        config.setMaxAge(<span class="number">3600L</span>);</span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530462650711.png" alt="1530462650711"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;6-3-3-实现非常简单&quot;&gt;&lt;a href=&quot;#6-3-3-实现非常简单&quot; class=&quot;headerlink&quot; title=&quot;6.3.3.实现非常简单&quot;&gt;&lt;/a&gt;6.3.3.实现非常简单&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;leyou-gateway&lt;/code&gt;中编写
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/Nginx%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86/"/>
    <id>https://wangdaye7.github.io/2019/05/17/微服务/待整理/Nginx及反向代理原理/</id>
    <published>2019-05-17T04:32:32.277Z</published>
    <updated>2019-05-19T02:39:27.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h2><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526187409033.png" alt="1526187409033"></p><p>nginx可以作为web服务器，但更多的时候，我们把它作为网关，因为它具备网关必备的功能：</p><ul><li>反向代理</li><li>负载均衡</li><li>动态路由</li><li>请求过滤</li></ul><h2 id="nginx作为web服务器"><a href="#nginx作为web服务器" class="headerlink" title="nginx作为web服务器"></a>nginx作为web服务器</h2><p>Web服务器分2类：</p><ul><li>web应用服务器，如：<ul><li>tomcat</li><li>resin</li><li>jetty</li></ul></li><li>web服务器，如：<ul><li>Apache 服务器</li><li>Nginx</li><li>IIS</li></ul></li></ul><p>区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。<br>并发：web服务器的并发能力远高于web应用服务器。</p><h2 id="nginx作为反向代理"><a href="#nginx作为反向代理" class="headerlink" title="nginx作为反向代理"></a>nginx作为反向代理</h2><p>什么是反向代理？</p><ul><li>代理：通过客户机的配置，实现让一台服务器(代理服务器)代理客户机，客户的所有请求都交给代理服务器处理。</li><li>反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。</li></ul><p>nginx可以当做反向代理服务器来使用：</p><ul><li>我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理</li><li>当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能</li></ul><p>利用反向代理，就可以解决我们前面所说的端口问题，如图</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526016663674.png" alt="1526016663674"></p><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3></blockquote><p>安装非常简单，把课前资料提供的nginx直接解压即可，绿色免安装，舒服！</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/0C36B84E.gif" alt="img"> </p><p>我们在本地安装一台nginx：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530556268445.png" alt="1530556268445"></p><p>解压后，目录结构：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530384792790.png" alt="1530384792790"></p><ol><li>conf：配置目录</li><li>contrib：第三方依赖</li><li>html：默认的静态资源目录，类似于tomcat的webapps</li><li>logs：日志目录</li><li>nginx.exe：启动程序。可双击运行，但不建议这么做。</li></ol><h2 id="4-5-反向代理流程"><a href="#4-5-反向代理流程" class="headerlink" title="4.5. 反向代理流程"></a>4.5. 反向代理流程</h2><p>启动nginx，然后用域名访问后台管理系统：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530385593052.png" alt="1530385593052"></p><p>现在实现了域名访问网站了，中间的流程是怎样的呢？</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526189945180.png" alt="1526189945180"></p><ol><li><p>浏览器准备发起请求，访问<a href="http://mamage.leyou.com，但需要进行域名解析" target="_blank" rel="noopener">http://mamage.leyou.com，但需要进行域名解析</a></p></li><li><p>优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1</p></li><li><p>请求被发往解析得到的ip，并且默认使用80端口：<a href="http://127.0.0.1:80" target="_blank" rel="noopener">http://127.0.0.1:80</a></p><p>本机的nginx一直监听80端口，因此捕获这个请求</p></li><li><p>nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发</p></li><li><p>后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx</p></li><li><p>nginx将得到的结果返回到浏览器</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Nginx&quot;&gt;&lt;a href=&quot;#什么是Nginx&quot; class=&quot;headerlink&quot; title=&quot;什么是Nginx&quot;&gt;&lt;/a&gt;什么是Nginx&lt;/h2&gt;&lt;p&gt; &lt;img src=&quot;https://jhmarryme-1257584644.cos.ap
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://wangdaye7.github.io/2019/05/17/微服务/待整理/后台管理系统前端项目结构/</id>
    <published>2019-05-17T04:25:13.596Z</published>
    <updated>2019-05-19T14:27:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-项目结构"><a href="#3-项目结构" class="headerlink" title="3.项目结构"></a>3.项目结构</h1><p>开始编码前，我们先了解下项目的结构。</p><h2 id="3-1-目录结构"><a href="#3-1-目录结构" class="headerlink" title="3.1.目录结构"></a>3.1.目录结构</h2><p>首先是目录结构图：<img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1525962755237.png" alt="1525962755237"></p><h2 id="3-2-调用关系"><a href="#3-2-调用关系" class="headerlink" title="3.2.调用关系"></a>3.2.调用关系</h2><p>我们最主要理清index.html、main.js、App.vue之间的关系：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1525964023585.png" alt="1525964023585"></p><p>理一下：</p><ul><li>index.html：html模板文件。定义了空的<code>div</code>，其id为<code>app</code>。</li><li>main.js：<strong>实例化vue对象</strong>，并且绑定通过id选择器，绑定到index.html的div中，因此<strong>main.js的内容都将在index.html的div中显示</strong>。main.js中使用了App组件，即App.vue，也就是说index.html中最终展现的是App.vue中的内容。index.html引用它之后，就拥有了vue的内容（包括组件、样式等），所以，main.js也是<strong>webpack打包的入口</strong>。</li><li>index.js：定义请求路径和组件的映射关系。相当于之前的<code>&lt;vue-router&gt;</code></li><li>App.vue中也没有内容，而是定义了vue-router的锚点：<code>&lt;router-view&gt;</code>,我们之前讲过，vue-router路由后的组件将会在锚点展示。</li><li>最终结论：<strong>一切路由后的内容都将通过App.vue在index.html中显示。</strong></li><li>访问流程：用户在浏览器输入路径，例如：<a href="http://localhost:9001/#/item/brand" target="_blank" rel="noopener">http://localhost:9001/#/item/brand</a> –&gt; index.js(/item/brand路径对应pages/item/Brand.vue组件) –&gt; 该组件显示在App.vue的锚点位置 –&gt; main.js使用了App.vue组件，并把该组件渲染在index.html文件中（id为“app”的div中）</li></ul><h2 id="3-3-页面布局"><a href="#3-3-页面布局" class="headerlink" title="3.3.页面布局"></a>3.3.页面布局</h2><p>接下来我们一起看下页面布局。</p><p>Layout组件是我们的整个页面的布局组件：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530380040278.png" alt="1530380040278"></p><p>一个典型的三块布局。包含左，上，中三部分：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1525965779366.png" alt="1525965779366"></p><p>里面使用了Vuetify中的2个组件和一个布局元素：</p><ul><li><p><code>v-navigation-drawer</code> ：导航抽屉，主要用于容纳应用程序中的页面的导航链接。 </p><pre><code>![1530380237867](https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530380237867.png)</code></pre></li><li><p><code>v-toolbar</code>：工具栏通常是网站导航的主要途径。可以与导航抽屉一起很好地工作，动态选择是否打开导航抽屉，实现可伸缩的侧边栏。</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530380292558.png" alt="1530380292558"></p></li><li><p><code>v-content</code>：并不是一个组件，而是标记页面布局的元素。可以根据您指定的<strong>app</strong>组件的结构动态调整大小，使得您可以创建高度可定制的组件。</p></li></ul><p>那么问题来了：<code>v-content</code>中的内容来自哪里？</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1525966180568.png" alt="1525966180568"></p><ul><li>Layout映射的路径是<code>/</code></li><li>除了Login以为的所有组件，都是定义在Layout的children属性，并且路径都是<code>/</code>的下面</li><li>因此当路由到子组件时，会在Layout中定义的锚点中显示。</li><li>并且Layout中的其它部分不会变化，这就实现了布局的共享。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3-项目结构&quot;&gt;&lt;a href=&quot;#3-项目结构&quot; class=&quot;headerlink&quot; title=&quot;3.项目结构&quot;&gt;&lt;/a&gt;3.项目结构&lt;/h1&gt;&lt;p&gt;开始编码前，我们先了解下项目的结构。&lt;/p&gt;
&lt;h2 id=&quot;3-1-目录结构&quot;&gt;&lt;a href=&quot;#3-1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/17/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E5%95%86%E5%93%81%E5%88%86%E7%B1%BB%E6%9F%A5%E8%AF%A2%E5%90%8E%E7%AB%AF%E5%AE%9E%E7%8E%B0/"/>
    <id>https://wangdaye7.github.io/2019/05/17/微服务/待整理/商品分类查询后端实现/</id>
    <published>2019-05-17T02:24:45.313Z</published>
    <updated>2019-05-19T14:54:21.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-实现商品分类查询"><a href="#5-实现商品分类查询" class="headerlink" title="5.实现商品分类查询"></a>5.实现商品分类查询</h1><p>商城的核心自然是商品，而商品多了以后，肯定要进行分类，并且不同的商品会有不同的品牌信息，其关系如图所示：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1525999005260.png" alt="1525999005260"></p><ul><li>一个商品分类下有很多商品</li><li>一个商品分类下有很多品牌</li><li>而一个品牌，可能属于不同的分类</li><li>一个品牌下也会有很多商品</li></ul><p>依次去完成：商品分类、品牌、商品的开发。</p><h2 id="5-1-导入数据"><a href="#5-1-导入数据" class="headerlink" title="5.1.导入数据"></a>5.1.导入数据</h2><p>首先导入课前资料提供的sql</p><p>商品分类表：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1525999774439.png" alt="1525999774439"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_category` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;类目id&apos;,</span><br><span class="line">  `name` varchar(20) NOT NULL COMMENT &apos;类目名称&apos;,</span><br><span class="line">  `parent_id` bigint(20) NOT NULL COMMENT &apos;父类目id,顶级类目填0&apos;,</span><br><span class="line">  `is_parent` tinyint(1) NOT NULL COMMENT &apos;是否为父节点，0为否，1为是&apos;,</span><br><span class="line">  `sort` int(4) NOT NULL COMMENT &apos;排序指数，越小越靠前&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `key_parent_id` (`parent_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1424 DEFAULT CHARSET=utf8 COMMENT=&apos;商品类目表，类目和商品(spu)是一对多关系，类目与品牌是多对多关系&apos;;</span><br></pre></td></tr></table></figure><p>因为商品分类会有层级关系，因此这里我们加入了<code>parent_id</code>字段，对本表中的其它分类进行自关联。</p><h2 id="5-2-页面实现"><a href="#5-2-页面实现" class="headerlink" title="5.2.页面实现"></a>5.2.页面实现</h2><h3 id="5-2-1-页面分析"><a href="#5-2-1-页面分析" class="headerlink" title="5.2.1.页面分析"></a>5.2.1.页面分析</h3><p>首先我们看下要实现的效果：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530413709515.png" alt="1530413709515"></p><p>商品分类之间是会有层级关系的，采用树结构去展示是最直观的方式。</p><p>一起来看页面，对应的是/pages/item/Category.vue：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530386186299.png" alt="1530386186299"></p><p>页面模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-card</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-flex</span> <span class="attr">xs12</span> <span class="attr">sm10</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-tree</span> <span class="attr">url</span>=<span class="string">"/item/category/list"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:treeData</span>=<span class="string">"treeData"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:isEdit</span>=<span class="string">"isEdit"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">handleAdd</span>=<span class="string">"handleAdd"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">handleEdit</span>=<span class="string">"handleEdit"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">handleDelete</span>=<span class="string">"handleDelete"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">handleClick</span>=<span class="string">"handleClick"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-flex</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>v-card</code>：卡片，是vuetify中提供的组件，提供一个悬浮效果的面板，一般用来展示一组数据。</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526000692741.png" alt="1526000692741"></p></li><li><p><code>v-flex</code>：布局容器，用来控制响应式布局。与BootStrap的栅格系统类似，整个屏幕被分为12格。我们可以控制所占的格数来控制宽度：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526001573140.png" alt="1526001573140"></p><p>本例中，我们用<code>sm10</code>控制在小屏幕及以上时，显示宽度为10格</p></li><li><p><code>v-tree</code>：树组件。Vuetify并没有提供树组件，这个是我们自己编写的自定义组件：</p><p>  <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526001762446.png" alt="1526001762446"></p><p>里面涉及一些vue的高级用法，大家暂时不要关注其源码，会用即可。</p></li></ul><h3 id="5-2-2-树组件的用法"><a href="#5-2-2-树组件的用法" class="headerlink" title="5.2.2.树组件的用法"></a>5.2.2.树组件的用法</h3><p>也可参考课前资料中的：《自定义Vue组件的用法.md》</p><p>这里我贴出树组件的用法指南。</p><blockquote><p>属性列表：</p></blockquote><table><thead><tr><th style="text-align:left">属性名称</th><th style="text-align:left">说明</th><th style="text-align:left">数据类型</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">url</td><td style="text-align:left">用来加载数据的地址，即延迟加载</td><td style="text-align:left">String</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">isEdit</td><td style="text-align:left">是否开启树的编辑功能</td><td style="text-align:left">boolean</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">treeData</td><td style="text-align:left">整颗树数据，这样就不用远程加载了</td><td style="text-align:left">Array</td><td style="text-align:left">-</td></tr></tbody></table><p>这里推荐使用url进行延迟加载，<strong>每当点击父节点时，就会发起请求，根据父节点id查询子节点信息</strong>。</p><p>当有treeData属性时，就不会触发url加载</p><p>远程请求返回的结果格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">74</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"手机"</span>,</span><br><span class="line">        <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"isParent"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"sort"</span>: <span class="number">2</span></span><br><span class="line">&#125;,</span><br><span class="line">     &#123; </span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">75</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"家用电器"</span>,</span><br><span class="line">        <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"isParent"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"sort"</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>事件：</p></blockquote><table><thead><tr><th style="text-align:left">事件名称</th><th style="text-align:left">说明</th><th style="text-align:left">回调参数</th></tr></thead><tbody><tr><td style="text-align:left">handleAdd</td><td style="text-align:left">新增节点时触发，isEdit为true时有效</td><td style="text-align:left">新增节点node对象，包含属性：name、parentId和sort</td></tr><tr><td style="text-align:left">handleEdit</td><td style="text-align:left">当某个节点被编辑后触发，isEdit为true时有效</td><td style="text-align:left">被编辑节点的id和name</td></tr><tr><td style="text-align:left">handleDelete</td><td style="text-align:left">当删除节点时触发，isEdit为true时有效</td><td style="text-align:left">被删除节点的id</td></tr><tr><td style="text-align:left">handleClick</td><td style="text-align:left">点击某节点时触发</td><td style="text-align:left">被点击节点的node对象,包含完整的node信息</td></tr></tbody></table><blockquote><p>完整node的信息</p></blockquote><p>回调函数中返回完整的node节点会包含以下数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "id": 76, // 节点id</span><br><span class="line">    "name": "手机", // 节点名称</span><br><span class="line">    "parentId": 75, // 父节点id</span><br><span class="line">    "isParent": false, // 是否是父节点</span><br><span class="line">    "sort": 1, // 顺序</span><br><span class="line">    "path": ["手机", "手机通讯", "手机"] // 所有父节点的名称数组</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-实现功能"><a href="#5-3-实现功能" class="headerlink" title="5.3.实现功能"></a>5.3.实现功能</h2><h3 id="5-3-1-url异步请求"><a href="#5-3-1-url异步请求" class="headerlink" title="5.3.1.url异步请求"></a>5.3.1.url异步请求</h3><p>给大家的页面中，treeData是假数据，我们删除数据treeData属性，只保留url看看会发生什么：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-tree</span> <span class="attr">url</span>=<span class="string">"/item/category/list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:isEdit</span>=<span class="string">"isEdit"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">handleAdd</span>=<span class="string">"handleAdd"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">handleEdit</span>=<span class="string">"handleEdit"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">handleDelete</span>=<span class="string">"handleDelete"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">handleClick</span>=<span class="string">"handleClick"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure><p>刷新页面，可以看到：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530427294644.png" alt="1530427294644"></p><p>页面中的树没有了，并且发起了一条请求：<a href="http://localhost/api/item/category/list?pid=0" target="_blank" rel="noopener">http://localhost/api/item/category/list?pid=0</a> </p><p>大家可能会觉得很奇怪，我们明明是使用的相对路径，讲道理发起的请求地址应该是：</p><p><a href="http://manage.leyou.com/item/category/list" target="_blank" rel="noopener">http://manage.leyou.com/item/category/list</a></p><p>但实际却是：</p><p><a href="http://localhost/api/item/category/list?pid=0" target="_blank" rel="noopener">http://localhost/api/item/category/list?pid=0</a> </p><p>这是因为，我们有一个全局的配置文件，对所有的请求路径进行了约定：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530427514123.png" alt="1530427514123"></p><p>路径是localhost，并且默认加上了/api的前缀，这恰好与我们的网关设置匹配，我们只需要把地址改成网关的地址即可,因为我们使用了nginx反向代理，这里可以写域名。</p><p>接下来，我们要做的事情就是编写后台接口，返回对应的数据即可。</p><h3 id="5-3-2-实体类"><a href="#5-3-2-实体类" class="headerlink" title="5.3.2.实体类"></a>5.3.2.实体类</h3><p>在<code>ly-item-interface</code>中添加category实体类：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530444682670.png" alt="1530444682670"></p><p>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tb_category"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    <span class="keyword">private</span> Boolean isParent; </span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，这里要用到jpa的注解，因此我们在<code>ly-item-iterface</code>中添加jpa依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-3-controller"><a href="#5-3-3-controller" class="headerlink" title="5.3.3.controller"></a>5.3.3.controller</h3><p>编写一个controller一般需要知道四个内容：</p><ul><li>请求方式：决定我们用GetMapping还是PostMapping</li><li>请求路径：决定映射路径</li><li>请求参数：决定方法的参数</li><li>返回值结果：决定方法的返回值</li></ul><p>在刚才页面发起的请求中，我们就能得到绝大多数信息：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530445885707.png" alt="1530445885707"></p><ul><li><p>请求方式：Get</p></li><li><p>请求路径：/api/item/category/list。其中/api是网关前缀，/item是网关的路由映射，真实的路径应该是/category/list</p></li><li><p>请求参数：pid=0，根据tree组件的说明，应该是父节点的id，第一次查询为0，那就是查询一级类目</p></li><li><p>返回结果：？？</p><p>根据前面tree组件的用法我们知道，返回的应该是json数组：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">74</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"手机"</span>,</span><br><span class="line">        <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"isParent"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"sort"</span>: <span class="number">2</span></span><br><span class="line">&#125;,</span><br><span class="line">     &#123; </span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">75</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"家用电器"</span>,</span><br><span class="line">        <span class="attr">"parentId"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"isParent"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"sort"</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>对应的java类型可以是List集合，里面的元素就是类目对象了。也就是<code>List&lt;Category&gt;</code></p></li></ul><p>controller代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.web;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.pojo.Category;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/16 12:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"category"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过pid查找商品分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Category&gt;&gt; queryCategoryListByPid(<span class="meta">@RequestParam</span>(<span class="string">"pid"</span>) Long pid)&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(categoryService.queryCategoryListByPid(pid));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-4-service"><a href="#5-3-4-service" class="headerlink" title="5.3.4.service"></a>5.3.4.service</h3><p>一般service层会定义接口和实现类，这里直接写实现类了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.common.enums.ExceptionEnum;</span><br><span class="line"><span class="keyword">import</span> com.leyou.common.exception.LyException;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.leyou.item.pojo.Category;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/16 12:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryMapper categoryMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据parentId查询子类目</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">queryCategoryListByPid</span><span class="params">(Long pid)</span> </span>&#123;</span><br><span class="line">        Category category = <span class="keyword">new</span> Category();</span><br><span class="line">        category.setParentId(pid);</span><br><span class="line">        List categories = categoryMapper.select(category);</span><br><span class="line">        <span class="comment">//判断结果</span></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(categories))&#123;</span><br><span class="line">            <span class="comment">//未找到, 通过自定义异常处理</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.CATEGORY_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> categories;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-5-mapper"><a href="#5-3-5-mapper" class="headerlink" title="5.3.5.mapper"></a>5.3.5.mapper</h3><p>我们使用通用mapper来简化开发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou.item.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.leyou.item.pojo.Category;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/16 12:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意，我们并没有在mapper接口上声明@Mapper注解，那么mybatis如何才能找到接口呢？</p><p>我们在启动类上添加一个扫描包功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leyou;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/14 19:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.leyou.item.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyItemServiceApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyItemServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-6-启动并测试"><a href="#5-3-6-启动并测试" class="headerlink" title="5.3.6.启动并测试"></a>5.3.6.启动并测试</h3><p>我们不经过网关，直接访问：<a href="http://localhost:8081/category/list" target="_blank" rel="noopener">http://localhost:8081/category/list</a></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530455133230.png" alt="1530455133230"></p><p>然后试试网关是否畅通：<a href="http://api.leyou.com/api/item/category/list" target="_blank" rel="noopener">http://api.leyou.com/api/item/category/list</a></p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530455291468.png" alt="1530455291468"></p><p>一切OK！</p><p>然后刷新后台管理页面查看：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530455437899.png" alt="1530455437899"></p><p>发现报错了！</p><p>浏览器直接访问没事，但是这里却报错，什么原因？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;5-实现商品分类查询&quot;&gt;&lt;a href=&quot;#5-实现商品分类查询&quot; class=&quot;headerlink&quot; title=&quot;5.实现商品分类查询&quot;&gt;&lt;/a&gt;5.实现商品分类查询&lt;/h1&gt;&lt;p&gt;商城的核心自然是商品，而商品多了以后，肯定要进行分类，并且不同的商品会有不同
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/Nginx%E9%85%8D%E7%BD%AE/"/>
    <id>https://wangdaye7.github.io/2019/05/15/微服务/待整理/Nginx配置/</id>
    <published>2019-05-15T09:04:54.258Z</published>
    <updated>2019-05-19T07:05:41.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx解决端口问题"><a href="#nginx解决端口问题" class="headerlink" title="nginx解决端口问题"></a>nginx解决端口问题</h2><p>nginx作为反向代理<br>如果使用虚拟机 需要修改项目里 config下的index.js 修改为host: ‘localhost’为 host: ‘0.0.0.0’</p><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>安装Nginx</p><ul><li><p>新增用户<br>useradd leyou<br>将文件上传到目录<br>/home/leyou</p></li><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nginx-1.10.0.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx</span><br></pre></td></tr></table></figure><p>​这里指定安装的目录是: /opt/nginx目录下</p></li></ul><ul><li><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssl-devel /如果遇到错误 先运行这个</span><br><span class="line">sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx # 启动</span><br><span class="line">nginx -s stop # 停止</span><br><span class="line">nginx -s reload # 重新加载配置</span><br></pre></td></tr></table></figure></li></ul><p>chkconfig iptables off  关闭防火墙<br>service iptables stop 临时关闭防火墙</p><p>###访问失败<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">开启80端口</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其中--permanent的作用是使设置永久生效，不加的话机器重启之后失效</span><br><span class="line"></span><br><span class="line">重新载入一下防火墙设置，使设置生效</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">可通过如下命令查看是否生效</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"></span><br><span class="line">如下命令可查看当前系统打开的所有端口</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure></p><p>ps -ef | grep nginx 是否有两个进程, 如果只有一个可能是80端口被占用了</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>目录: /opt/nginx/conf下找配置文件</p><blockquote><h3 id="反向代理配置"><a href="#反向代理配置" class="headerlink" title="反向代理配置"></a>反向代理配置</h3></blockquote><p>示例：</p><p> <img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1526188831504.png" alt="1526188831504"></p><p>nginx中的每个server就是一个反向代理配置，可以有多个server</p><p>完整配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  manage.leyou.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:9001;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  api.leyou.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:10010;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改SwitchHosts 设置 , IP为虚拟机IP地址</li></ul><ul><li><p>设置nginx开机启动</p><p>创建一个开机启动的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/nginx</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># nginx - this script starts and stops the nginx daemon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig:   - 85 15</span></span><br><span class="line"><span class="comment"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"><span class="comment">#               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"><span class="comment"># processname: nginx</span></span><br><span class="line"><span class="comment"># config:      /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment"># config:      /etc/sysconfig/nginx</span></span><br><span class="line"><span class="comment"># pidfile:     /var/run/nginx.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="string">"<span class="variable">$NETWORKING</span>"</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">nginx=<span class="string">"/usr/bin/nginx"</span></span><br><span class="line">prog=$(basename <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=<span class="string">"/opt/nginx/conf/nginx.conf"</span></span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">make_dirs</span></span>() &#123;</span><br><span class="line">   <span class="comment"># make required directories</span></span><br><span class="line">   user=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">"configure arguments:.*--user="</span> | sed <span class="string">'s/[^*]*--user=\([^ ]*\).*/\1/g'</span> -`</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$user</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> [ -z <span class="string">"`grep <span class="variable">$user</span> /etc/passwd`"</span> ]; <span class="keyword">then</span></span><br><span class="line">         useradd -M -s /bin/nologin <span class="variable">$user</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      options=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">'configure arguments:'</span>`</span><br><span class="line">      <span class="keyword">for</span> opt <span class="keyword">in</span> <span class="variable">$options</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> [ `<span class="built_in">echo</span> <span class="variable">$opt</span> | grep <span class="string">'.*-temp-path'</span>` ]; <span class="keyword">then</span></span><br><span class="line">              value=`<span class="built_in">echo</span> <span class="variable">$opt</span> | cut -d <span class="string">"="</span> -f 2`</span><br><span class="line">              <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$value</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                  <span class="comment"># echo "creating" $value</span></span><br><span class="line">                  mkdir -p <span class="variable">$value</span> &amp;&amp; chown -R <span class="variable">$user</span> <span class="variable">$value</span></span><br><span class="line">              <span class="keyword">fi</span></span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">    [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">    make_dirs</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></span><br><span class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; rm -f <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$nginx</span> -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status <span class="variable">$prog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></li><li><p>修改文件权限，并加入服务列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改权限</span></span><br><span class="line">chmod 777 /etc/init.d/nginx </span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加到服务列表</span></span><br><span class="line">chkconfig --add /etc/init.d/nginx</span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig nginx on</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nginx解决端口问题&quot;&gt;&lt;a href=&quot;#nginx解决端口问题&quot; class=&quot;headerlink&quot; title=&quot;nginx解决端口问题&quot;&gt;&lt;/a&gt;nginx解决端口问题&lt;/h2&gt;&lt;p&gt;nginx作为反向代理&lt;br&gt;如果使用虚拟机 需要修改项目里 con
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/05/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%85%E6%95%B4%E7%90%86/%E4%BD%BF%E7%94%A8%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE/"/>
    <id>https://wangdaye7.github.io/2019/05/15/微服务/待整理/使用域名访问本地项目/</id>
    <published>2019-05-15T08:44:19.124Z</published>
    <updated>2019-05-19T02:39:27.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-使用域名访问本地项目"><a href="#4-使用域名访问本地项目" class="headerlink" title="4.使用域名访问本地项目"></a>4.使用域名访问本地项目</h1><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><ul><li>Windows下的hosts文件地址：C:/Windows/System32/drivers/etc/hosts</li><li>Linux下的hosts文件所在路径： /etc/hosts </li></ul><h2 id="解决域名解析问题"><a href="#解决域名解析问题" class="headerlink" title="解决域名解析问题"></a>解决域名解析问题</h2><p>使用SwitchHosts伪造本地的hosts文件，实现对域名的解析。修改本地的host为：</p><ul><li>127.0.0.1 api.leyou.com ：我们的网关Zuul</li><li>127.0.0.1 manage.leyou.com：我们的后台系统地址</li></ul><p>ping一下域名试试是否畅通</p><p>然后通过域名访问：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530383586463.png" alt="1530383586463"></p><p>原因：我们配置了项目访问的路径，虽然manage.leyou.com映射的ip也是127.0.0.1，但是webpack会验证host是否符合配置。</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530383612716.png" alt="1530383612716"></p><p>在webpack.dev.conf.js中取消host验证：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530383927461.png" alt="1530383927461"></p><p>重新执行<code>npm run dev</code>，刷新浏览器：</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/day6/assets/1530384150852.png" alt="1530384150852"></p><p>OK！</p><h2 id="nginx解决端口问题"><a href="#nginx解决端口问题" class="headerlink" title="nginx解决端口问题"></a>nginx解决端口问题</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;4-使用域名访问本地项目&quot;&gt;&lt;a href=&quot;#4-使用域名访问本地项目&quot; class=&quot;headerlink&quot; title=&quot;4.使用域名访问本地项目&quot;&gt;&lt;/a&gt;4.使用域名访问本地项目&lt;/h1&gt;&lt;h2 id=&quot;域名解析&quot;&gt;&lt;a href=&quot;#域名解析&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
