<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jhmarryme&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangdaye7.github.io/"/>
  <updated>2019-09-08T14:21:04.427Z</updated>
  <id>https://wangdaye7.github.io/</id>
  
  <author>
    <name>Jiahao Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM学习</title>
    <link href="https://wangdaye7.github.io/2019/08/25/offer/refAndClassLoader/"/>
    <id>https://wangdaye7.github.io/2019/08/25/offer/refAndClassLoader/</id>
    <published>2019-08-24T20:34:03.000Z</published>
    <updated>2019-09-08T14:21:04.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看字节码"><a href="#查看字节码" class="headerlink" title="查看字节码"></a>查看字节码</h2><blockquote><p>通过javap命令对.class文件进行反汇编.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译成字节码文件</span></span><br><span class="line">javac imooc\javaBasic\ByteCodeSample.java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对代码进行反汇编</span></span><br><span class="line">javap -c imooc.javaBasic.ByteCodeSample</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">java imooc.javaBasic.ByteCodeSample</span><br></pre></td></tr></table></figure><h2 id="JVM如何加载-class文件"><a href="#JVM如何加载-class文件" class="headerlink" title="JVM如何加载.class文件"></a>JVM如何加载.class文件</h2><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/cyc/image/JVM.png" alt></p><h2 id="Class-forName方法的使用"><a href="#Class-forName方法的使用" class="headerlink" title="Class.forName方法的使用"></a>Class.forName方法的使用</h2><blockquote><p>通过Class.forName方法练习反射, 在运行期间动态加载类</p></blockquote><p>实体类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/24 19:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rebot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(String helloSentence)</span></span>&#123;</span><br><span class="line">        System.out.println(helloSentence + <span class="string">" "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">throwHello</span><span class="params">(String tag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + tag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello Robot"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/24 19:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class.forName的使用练习</span></span><br><span class="line"><span class="comment">     * 通过反射动态获取 对象 属性 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSuchFieldException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; rc = Class.forName(<span class="string">"imooc.reflect.Rebot"</span>);</span><br><span class="line">        Rebot r = (Rebot) rc.newInstance();</span><br><span class="line">        <span class="comment">//getDeclaredMethod可以获取到包括私有, 但是不包括继承来的所有方法</span></span><br><span class="line">        Method throwHello = rc.getDeclaredMethod(<span class="string">"throwHello"</span>, String.class);</span><br><span class="line">        <span class="comment">//私有的方法或字段, 需要设置</span></span><br><span class="line">        throwHello.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//需要传入的参数为r</span></span><br><span class="line">        Object str = throwHello.invoke(r, <span class="string">"王家豪"</span>);</span><br><span class="line">        System.out.println(<span class="string">"throwHello 's result is "</span> + str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getMethod不能获取到私有的方法, 但是可以获取到继承的方法</span></span><br><span class="line">        Method sayHi = rc.getMethod(<span class="string">"sayHi"</span>, String.class);</span><br><span class="line">        sayHi.invoke(r, <span class="string">"你好啊"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取私有的字段</span></span><br><span class="line">        Field name = rc.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        name.set(r, <span class="string">"江航"</span>);</span><br><span class="line">        sayHi.invoke(r, <span class="string">"你好啊"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="classLoader"><a href="#classLoader" class="headerlink" title="classLoader"></a>classLoader</h2><ol><li>类从编译到执行的过程<br><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/cyc/image/class.png" alt></li></ol><ol start="2"><li><p>ClassLoader作用<br><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/cyc/image/classLoader.png" alt></p></li><li><p>ClassLoader种类<br><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/cyc/image/classLoaderCategory.png" alt></p></li></ol><h2 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h2><p>MyClassLoader: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的类加载器, 用于加载自定义位置的类</span></span><br><span class="line"><span class="comment"> * 通过重写findClass方法 达到效果</span></span><br><span class="line"><span class="comment"> * 重写的是findClass方法, 但使用时调用的是loadClass方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/24 20:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类所在的路径</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="comment">//随意取名</span></span><br><span class="line">    <span class="keyword">private</span> String classLoaderName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(String path, String classLoaderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line">        <span class="keyword">this</span>.classLoaderName = classLoaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于寻找类文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//先加载类的二进制流</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = loadClassData(name);</span><br><span class="line">        <span class="comment">//通过defineClass方法创建类</span></span><br><span class="line">        <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于加载类文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassData(String name) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到类文件</span></span><br><span class="line">        name = path + <span class="string">"/"</span> + name + <span class="string">".class"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                InputStream in = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(name));</span><br><span class="line">                ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                )&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((i = in.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                out.write(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> imooc.reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试自定义类加载器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/24 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoaderChecker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyClassLoader classLoader = <span class="keyword">new</span> MyClassLoader(<span class="string">"D:/develop/folderForDevelop/"</span>, <span class="string">"myClassLoader"</span>);</span><br><span class="line">        <span class="comment">//调用的是loadClass方法加载类</span></span><br><span class="line">        Class&lt;?&gt; waLi = classLoader.loadClass(<span class="string">"WaLi"</span>);</span><br><span class="line">        System.out.println(waLi.getClassLoader());</span><br><span class="line">        waLi.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看字节码&quot;&gt;&lt;a href=&quot;#查看字节码&quot; class=&quot;headerlink&quot; title=&quot;查看字节码&quot;&gt;&lt;/a&gt;查看字节码&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过javap命令对.class文件进行反汇编.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;f
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>牛客算法学习2</title>
    <link href="https://wangdaye7.github.io/2019/07/29/note/algorithm/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A02/"/>
    <id>https://wangdaye7.github.io/2019/07/29/note/algorithm/牛客算法学习2/</id>
    <published>2019-07-28T19:34:47.000Z</published>
    <updated>2019-09-08T14:21:58.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="part2"><a href="#part2" class="headerlink" title="part2"></a>part2</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h2 id="一个特殊的栈"><a href="#一个特殊的栈" class="headerlink" title="一个特殊的栈"></a>一个特殊的栈</h2><blockquote><p>在实现栈的基本功能的基础上，再实现返 回栈中最小元素的操作。<br>1．pop、push、getMin操作的时间复杂度都是O(1)。<br>2．设计的栈类型可以使用现成的栈结构</p></blockquote><h2 id="栈和队列的转换实现"><a href="#栈和队列的转换实现" class="headerlink" title="栈和队列的转换实现"></a>栈和队列的转换实现</h2><p>用栈实现队列</p><blockquote><p>因为栈是先进后出的, 假设现有push栈, 先创建一个辅助栈pop逆序存入push中的值, 只需要弹出pop栈顶的值即可, 只有当pop栈为空的时候才存入push中所有的数据, 而且必须一次性存入.</p></blockquote><p>用队列实现栈</p><blockquote><p>队列是先进先出的, 假设有队列queue, 创建一个辅助队列help, 当需要弹出时, 首先将queue弹出到只剩一个值, 并且将弹出的值依次放入help中, 这时候queue中剩下的数据就是最后进来的那个数据, 弹出即可. 此时help中还是维持着queue中原来的顺序, 而queue队列已经空了, 只需要将help与queue队列互换一下就可以了.</p></blockquote><h2 id="猫狗队列"><a href="#猫狗队列" class="headerlink" title="猫狗队列"></a>猫狗队列</h2><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><blockquote><p>哈希函数的输入认为是无穷的, 而输出是有限的</p></blockquote><blockquote><p>相同的输入, 一定是相同的输出 same input same output</p></blockquote><blockquote><p>不同的输入也可能导致相同的输出 dif input maybe same output, 这就叫哈希碰撞</p></blockquote><blockquote><p>离散性, 整个S域上基本均匀分布.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;part2&quot;&gt;&lt;a href=&quot;#part2&quot; class=&quot;headerlink&quot; title=&quot;part2&quot;&gt;&lt;/a&gt;part2&lt;/h1&gt;&lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h
      
    
    </summary>
    
      <category term="算法" scheme="https://wangdaye7.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>方法引用</title>
    <link href="https://wangdaye7.github.io/2019/07/24/note/cyc2018/stream/%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/"/>
    <id>https://wangdaye7.github.io/2019/07/24/note/cyc2018/stream/方法引用/</id>
    <published>2019-07-24T14:19:23.000Z</published>
    <updated>2019-07-24T06:24:44.427Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-思维导图">1. 思维导图</a></li><li><a href="#2-方法引用">2. 方法引用</a><ul><li><a href="#21-概念">2.1. 概念</a><ul><li><a href="#211-目的">2.1.1. 目的</a></li><li><a href="#212-使用场景">2.1.2. 使用场景</a></li></ul></li><li><a href="#22-如何引用">2.2. 如何引用</a><ul><li><a href="#221-通过对象名引用成员方法">2.2.1. 通过对象名引用成员方法</a></li><li><a href="#222-通过类名称引用静态方法">2.2.2. 通过类名称引用静态方法</a></li><li><a href="#223-通过super引用成员方法">2.2.3. 通过super引用成员方法</a></li><li><a href="#224-通过this引用成员方法">2.2.4. 通过this引用成员方法</a></li><li><a href="#225-类的构造器引用">2.2.5. 类的构造器引用</a></li><li><a href="#226-数组的构造器引用">2.2.6. 数组的构造器引用</a></li></ul></li><li><a href="#23-方法引用练习">2.3. 方法引用练习</a></li></ul></li></ul><!-- /TOC --><h1 id="1-思维导图"><a href="#1-思维导图" class="headerlink" title="1. 思维导图"></a>1. 思维导图</h1><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/cyc/image/%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8.png" alt="思维导图"></p><h1 id="2-方法引用"><a href="#2-方法引用" class="headerlink" title="2. 方法引用"></a>2. 方法引用</h1><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1. 概念"></a>2.1. 概念</h2><blockquote><p>双冒号::为引用运算符，它所在的表达式被称为方法引用。如果Lambda要表达的函数方案已经存在于某个方法的实现中，那么则可以通过双冒号来引用该方法作为Lambda的替代者。</p></blockquote><h3 id="2-1-1-目的"><a href="#2-1-1-目的" class="headerlink" title="2.1.1. 目的"></a>2.1.1. 目的</h3><ul><li>简化代码, 避免写重复逻辑</li></ul><h3 id="2-1-2-使用场景"><a href="#2-1-2-使用场景" class="headerlink" title="2.1.2. 使用场景"></a>2.1.2. 使用场景</h3><ul><li>如果lambda所要表达的函数方案已经存在与某个方法的实现中, 则可以通过双冒号来引用该方法作为Lambda的替代者. 其实你想表达的lambda已经有人帮你实现了, 就没有必要自己再写一遍, 直接引用即可</li></ul><h2 id="2-2-如何引用"><a href="#2-2-如何引用" class="headerlink" title="2.2. 如何引用"></a>2.2. 如何引用</h2><h3 id="2-2-1-通过对象名引用成员方法"><a href="#2-2-1-通过对象名引用成员方法" class="headerlink" title="2.2.1. 通过对象名引用成员方法"></a>2.2.1. 通过对象名引用成员方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodRefObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">      System.out.println(str.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable lambda)</span> </span>&#123;</span><br><span class="line">      lambda.print(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MethodRefObject obj = <span class="keyword">new</span> MethodRefObject();</span><br><span class="line">        printString(obj::printUpperCase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-通过类名称引用静态方法"><a href="#2-2-2-通过类名称引用静态方法" class="headerlink" title="2.2.2. 通过类名称引用静态方法"></a>2.2.2. 通过类名称引用静态方法</h3><h3 id="2-2-3-通过super引用成员方法"><a href="#2-2-3-通过super引用成员方法" class="headerlink" title="2.2.3. 通过super引用成员方法"></a>2.2.3. 通过super引用成员方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Greetable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大家好,我是Man!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法method,参数传递Greetable接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Greetable g)</span></span>&#123;</span><br><span class="line">        g.greet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        method(<span class="keyword">super</span>::sayHello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-通过this引用成员方法"><a href="#2-2-4-通过this引用成员方法" class="headerlink" title="2.2.4. 通过this引用成员方法"></a>2.2.4. 通过this引用成员方法</h3><h3 id="2-2-5-类的构造器引用"><a href="#2-2-5-类的构造器引用" class="headerlink" title="2.2.5. 类的构造器引用"></a>2.2.5. 类的构造器引用</h3><h3 id="2-2-6-数组的构造器引用"><a href="#2-2-6-数组的构造器引用" class="headerlink" title="2.2.6. 数组的构造器引用"></a>2.2.6. 数组的构造器引用</h3><h2 id="2-3-方法引用练习"><a href="#2-3-方法引用练习" class="headerlink" title="2.3. 方法引用练习"></a>2.3. 方法引用练习</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-思维导图&quot;&gt;1. 思维导图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-方法引用&quot;&gt;2. 方法引用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-概念&quot;&gt;2.1. 概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
      <category term="java基础" scheme="https://wangdaye7.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>stream与函数式接口</title>
    <link href="https://wangdaye7.github.io/2019/07/24/note/cyc2018/stream/stream%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>https://wangdaye7.github.io/2019/07/24/note/cyc2018/stream/stream与函数式接口/</id>
    <published>2019-07-24T14:03:02.000Z</published>
    <updated>2019-07-24T06:35:53.710Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-%e6%80%9d%e7%bb%b4%e5%af%bc%e5%9b%be">1. 思维导图</a></li><li><a href="#2-stream-%e4%b8%8e%e5%87%bd%e6%95%b0%e5%bc%8f%e6%8e%a5%e5%8f%a3">2. Stream 与函数式接口</a><ul><li><a href="#21-%e8%8e%b7%e5%8f%96%e6%b5%81">2.1. 获取流</a></li><li><a href="#22-%e6%b5%81%e7%9a%84%e6%96%b9%e6%b3%95">2.2. 流的方法</a><ul><li><a href="#221-foreach">2.2.1. forEach</a></li><li><a href="#222-filter">2.2.2. filter</a></li><li><a href="#223-map">2.2.3. map</a></li><li><a href="#224-count">2.2.4. count</a></li><li><a href="#225-limit">2.2.5. limit</a></li><li><a href="#226-skip">2.2.6. skip</a></li><li><a href="#227-concat">2.2.7. concat</a></li></ul></li><li><a href="#23-collect-%e7%9a%84%e4%bd%bf%e7%94%a8">2.3. collect 的使用</a><ul><li><a href="#231-%e8%bd%ac%e6%8d%a2%e4%b8%ba-list">2.3.1. 转换为 list</a></li><li><a href="#232-%e8%bd%ac%e6%8d%a2%e4%b8%ba-map">2.3.2. 转换为 map</a></li></ul></li><li><a href="#24-%e6%b5%81%e7%9a%84%e6%96%b9%e6%b3%95%e7%bb%83%e4%b9%a0">2.4. 流的方法练习</a></li><li><a href="#25-%e5%87%bd%e6%95%b0%e5%bc%8f%e6%8e%a5%e5%8f%a3">2.5. 函数式接口</a><ul><li><a href="#251-suppliert">2.5.1. Supplier<t></t></a></li><li><a href="#252-consumert">2.5.2. Consumer<t></t></a></li><li><a href="#253-predicatet">2.5.3. Predicate<t></t></a></li><li><a href="#254-functiontr">2.5.4. Function&lt;T,R&gt;</a></li></ul></li><li><a href="#26-%e5%87%bd%e6%95%b0%e5%bc%8f%e6%8e%a5%e5%8f%a3%e6%96%b9%e6%b3%95%e7%bb%83%e4%b9%a0">2.6. 函数式接口方法练习</a><ul><li><a href="#261-%e6%af%94%e8%be%83%e5%99%a8">2.6.1. 比较器</a></li><li><a href="#262-consumer">2.6.2. consumer</a></li><li><a href="#263-supplier">2.6.3. supplier</a></li><li><a href="#264-function">2.6.4. function</a></li><li><a href="#265-predicate">2.6.5. predicate</a></li><li><a href="#266-lambda%e5%bb%b6%e8%bf%9f%e5%8a%a0%e8%bd%bd">2.6.6. lambda延迟加载</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-思维导图"><a href="#1-思维导图" class="headerlink" title="1. 思维导图"></a>1. 思维导图</h1><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/cyc/image/Stream%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.png" alt="思维导图"></p><h1 id="2-Stream-与函数式接口"><a href="#2-Stream-与函数式接口" class="headerlink" title="2. Stream 与函数式接口"></a>2. Stream 与函数式接口</h1><h2 id="2-1-获取流"><a href="#2-1-获取流" class="headerlink" title="2.1. 获取流"></a>2.1. 获取流</h2><ul><li>所有的 Collection 集合都可以通过 stream 默认方法获取流</li><li>Stream 接口的静态方法 of 可以获取数组对应的流</li><li>Map 不是集合类型，需要根据 key, value, entry 分别获取相应的流</li></ul><h2 id="2-2-流的方法"><a href="#2-2-流的方法" class="headerlink" title="2.2. 流的方法"></a>2.2. 流的方法</h2><h3 id="2-2-1-forEach"><a href="#2-2-1-forEach" class="headerlink" title="2.2.1. forEach"></a>2.2.1. forEach</h3><ul><li>void forEach(Consumer&lt;? super T&gt; action);</li></ul><h3 id="2-2-2-filter"><a href="#2-2-2-filter" class="headerlink" title="2.2.2. filter"></a>2.2.2. filter</h3><ul><li>Stream<t> filter(Predicate&lt;? super T&gt; predicate);</t></li></ul><h3 id="2-2-3-map"><a href="#2-2-3-map" class="headerlink" title="2.2.3. map"></a>2.2.3. map</h3><blockquote><p>将流中的元素映射到另一个流中，通常是用来转换成另一个类型</p></blockquote><ul><li><r> Stream<r> map(Function&lt;? super T, ? extends R&gt; mapper);</r></r></li></ul><h3 id="2-2-4-count"><a href="#2-2-4-count" class="headerlink" title="2.2.4. count"></a>2.2.4. count</h3><ul><li>long count();</li></ul><h3 id="2-2-5-limit"><a href="#2-2-5-limit" class="headerlink" title="2.2.5. limit"></a>2.2.5. limit</h3><ul><li>Stream<t> limit(long maxSize);</t></li></ul><h3 id="2-2-6-skip"><a href="#2-2-6-skip" class="headerlink" title="2.2.6. skip"></a>2.2.6. skip</h3><ul><li>Stream<t> skip(long n);</t></li></ul><h3 id="2-2-7-concat"><a href="#2-2-7-concat" class="headerlink" title="2.2.7. concat"></a>2.2.7. concat</h3><ul><li>static <t> Stream<t> concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</t></t></li></ul><h2 id="2-3-collect-的使用"><a href="#2-3-collect-的使用" class="headerlink" title="2.3. collect 的使用"></a>2.3. collect 的使用</h2><h3 id="2-3-1-转换为-list"><a href="#2-3-1-转换为-list" class="headerlink" title="2.3.1. 转换为 list"></a>2.3.1. 转换为 list</h3><ul><li>collect.()</li></ul><h3 id="2-3-2-转换为-map"><a href="#2-3-2-转换为-map" class="headerlink" title="2.3.2. 转换为 map"></a>2.3.2. 转换为 map</h3><blockquote><p>传入 key, value 即可</p></blockquote><ul><li>public static &lt;T,K,U&gt; Collector&lt;T,?,Map&lt;K,U&gt;&gt; toMap(Function&lt;? super T,? extends K&gt; keyMapper,<pre><code>Function&lt;? super T,? extends U&gt; valueMapper)</code></pre></li><li>例如：Stream.concat(one.stream(), two.stream()).collect(Collectors.toMap(s -&gt; s, s -&gt; new Person(s)));</li></ul><h2 id="2-4-流的方法练习"><a href="#2-4-流的方法练习" class="headerlink" title="2.4. 流的方法练习"></a>2.4. 流的方法练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/24 11:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAndFunctionalInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试流的各种方法结合常用函数式接口的使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        one.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        one.add(<span class="string">"宋远桥"</span>);</span><br><span class="line">        one.add(<span class="string">"苏星河"</span>);</span><br><span class="line">        one.add(<span class="string">"石破天"</span>);</span><br><span class="line">        one.add(<span class="string">"石中玉"</span>);</span><br><span class="line">        one.add(<span class="string">"老子"</span>);</span><br><span class="line">        one.add(<span class="string">"庄子"</span>);</span><br><span class="line">        one.add(<span class="string">"洪七公"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        two.add(<span class="string">"古力娜扎"</span>);</span><br><span class="line">        two.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        two.add(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        two.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        two.add(<span class="string">"尼古拉斯赵四"</span>);</span><br><span class="line">        two.add(<span class="string">"张天爱"</span>);</span><br><span class="line">        two.add(<span class="string">"张二狗"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. 第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。</span></span><br><span class="line">        one.stream().filter(s -&gt; s.length() == <span class="number">3</span>).collect(Collectors.toList()).forEach(s -&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 第一个队伍筛选之后只要前3个人；存储到一个新集合中。</span></span><br><span class="line">        one.stream().limit(<span class="number">3</span>).collect(Collectors.toList()).forEach(s -&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3. 第二个队伍只要姓张的成员姓名；存储到一个新集合中。</span></span><br><span class="line">        two.stream().filter(s -&gt; s.startsWith(<span class="string">"张"</span>)).collect(Collectors.toList()).forEach(s -&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4. 第二个队伍筛选之后不要前2个人；存储到一个新集合中。</span></span><br><span class="line">        two.stream().skip(<span class="number">2</span>).collect(Collectors.toList()).forEach(s -&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        5. 将两个队伍合并为一个队伍；存储到一个新集合中。</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.concat(one.stream(), two.stream());</span><br><span class="line"><span class="comment">//        stream.collect(Collectors.toList()).forEach(s -&gt; System.out.println(s));</span></span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        6. 根据姓名创建`Person`对象；存储到一个新集合中。</span></span><br><span class="line"><span class="comment">//        7. 打印整个队伍的Person对象信息。</span></span><br><span class="line">        stream.map(s -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(s);</span><br><span class="line">        &#125;).collect(Collectors.toList()).forEach(person -&gt; System.out.println(person.toString()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8. 补充, 将list映射为map</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Person&gt; map = Stream.concat(one.stream(), two.stream()).collect(Collectors.toMap(s -&gt; s, s -&gt; <span class="keyword">new</span> Person(s)));</span><br><span class="line">        <span class="keyword">final</span> Set&lt;Map.Entry&lt;String, Person&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Person&gt; entry : entries) &#123;</span><br><span class="line">            System.out.print(entry.getKey());</span><br><span class="line">            System.out.println(<span class="string">" : "</span> + entry.getValue().toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-函数式接口"><a href="#2-5-函数式接口" class="headerlink" title="2.5. 函数式接口"></a>2.5. 函数式接口</h2><blockquote><p>有且仅有一个抽象方法的接口</p></blockquote><h3 id="2-5-1-Supplier"><a href="#2-5-1-Supplier" class="headerlink" title="2.5.1. Supplier"></a>2.5.1. Supplier<t></t></h3><blockquote><p>生产一个数据</p></blockquote><ul><li>T get()</li></ul><h3 id="2-5-2-Consumer"><a href="#2-5-2-Consumer" class="headerlink" title="2.5.2. Consumer"></a>2.5.2. Consumer<t></t></h3><blockquote><p>是消费一个数据</p></blockquote><ul><li>void accept(T t)</li><li>默认方法：andThen</li></ul><h3 id="2-5-3-Predicate"><a href="#2-5-3-Predicate" class="headerlink" title="2.5.3. Predicate"></a>2.5.3. Predicate<t></t></h3><blockquote><p>对某种类型的数据进行判断</p></blockquote><ul><li>boolean test(T t)</li><li>默认方法：and or  negate</li></ul><h3 id="2-5-4-Function-lt-T-R-gt"><a href="#2-5-4-Function-lt-T-R-gt" class="headerlink" title="2.5.4. Function&lt;T,R&gt;"></a>2.5.4. Function&lt;T,R&gt;</h3><blockquote><p>根据一个类型的数据得到另一个类型的数据</p></blockquote><ul><li>R apply(T t)</li><li>默认方法：andThen</li></ul><h2 id="2-6-函数式接口方法练习"><a href="#2-6-函数式接口方法练习" class="headerlink" title="2.6. 函数式接口方法练习"></a>2.6. 函数式接口方法练习</h2><h3 id="2-6-1-比较器"><a href="#2-6-1-比较器" class="headerlink" title="2.6.1. 比较器"></a>2.6.1. 比较器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.functionalInterface.functionalInterfaceDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过lambda表达式 作为比较器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/22 9:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaForComparatorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123; <span class="string">"abc"</span>, <span class="string">"ab"</span>, <span class="string">"abcd"</span> &#125;;</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">        Arrays.sort(array, (a, b) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> a.length() - b.length();</span><br><span class="line">    &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-consumer"><a href="#2-6-2-consumer" class="headerlink" title="2.6.2. consumer"></a>2.6.2. consumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.functionalInterface.functionalInterfaceDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Consumer接口</span></span><br><span class="line"><span class="comment"> * 消费一个指定泛型的数据, 无返回值</span></span><br><span class="line"><span class="comment"> * 可通过andThen组合操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/22 11:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaForConsumerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumerString</span><span class="params">(String[] info, Consumer&lt;String&gt; con1, Consumer&lt;String&gt; con2, Consumer&lt;String&gt; con3)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : info) &#123;</span><br><span class="line">            con1.andThen(con2).andThen(con3).accept(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] array = &#123; <span class="string">"迪丽热巴,女, 14"</span>, <span class="string">"古力娜扎,女, 12"</span>, <span class="string">"马尔扎哈,男, 121"</span> &#125;;</span><br><span class="line"></span><br><span class="line">        consumerString(array,</span><br><span class="line">                s -&gt; System.out.print(<span class="string">"姓名: "</span> + s.split(<span class="string">","</span>)[<span class="number">0</span>]),</span><br><span class="line">                s -&gt; System.out.print(<span class="string">"性别: "</span> + s.split(<span class="string">","</span>)[<span class="number">1</span>]),</span><br><span class="line">                s -&gt; System.out.println(<span class="string">"年龄: "</span> + s.split(<span class="string">","</span>)[<span class="number">2</span>])</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-supplier"><a href="#2-6-3-supplier" class="headerlink" title="2.6.3. supplier"></a>2.6.3. supplier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.functionalInterface.functionalInterfaceDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Supplier接口</span></span><br><span class="line"><span class="comment"> * 包含一个无参的方法, 用来获取一个泛型参数指定类型的对象数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/22 9:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaForSupplierDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*String msgA = "Hello";</span></span><br><span class="line"><span class="comment">        String msgB = "World";</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(getString(() -&gt; msgA + msgB));*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">52</span>,<span class="number">333</span>,<span class="number">23</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(getMax(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">                max = i &gt; max ? i : max;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(Supplier&lt;Integer&gt; integerSupplier)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> integerSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(Supplier&lt;String&gt; stringSupplier)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-4-function"><a href="#2-6-4-function" class="headerlink" title="2.6.4. function"></a>2.6.4. function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.functionalInterface.functionalInterfaceDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过函数式结构练习function接口</span></span><br><span class="line"><span class="comment"> * 根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/22 13:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaForFunctionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据接口的泛型</span></span><br><span class="line"><span class="comment">     * apply方法中参数类型为String, 返回Integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integerFunction</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Function&lt;String, Integer&gt; integerFunction)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Integer apply = integerFunction.apply(<span class="string">"5"</span>);</span><br><span class="line">        System.out.println(apply + <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在前一个function的基础上再进行处理</span></span><br><span class="line"><span class="comment">     * 第二个function的第一个泛型必须为前一个function的后一个泛型</span></span><br><span class="line"><span class="comment">     * 相当于前一个的结果为Integer, 后一个就必须用Integer接收</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> f1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> f2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methood</span><span class="params">(Function&lt;String, Integer&gt; f1, Function&lt;Integer, Integer&gt; f2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Integer apply = f1.andThen(f2).apply(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(apply);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 截取数字部分, 得到的结果加上100返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> f1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> f2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getAgeNum</span><span class="params">(String str, Function&lt;String, Integer&gt; f1, Function&lt;Integer, Integer&gt; f2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f1.andThen(f2).apply(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        method((s) -&gt; Integer.parseInt(s));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        methood(s -&gt; Integer.parseInt(s)+1, i -&gt; i = ((int)Math.pow(i, 10)));</span></span><br><span class="line">        String str = <span class="string">"赵丽颖,20"</span>;</span><br><span class="line">        <span class="keyword">final</span> Integer ageNum = getAgeNum(str,</span><br><span class="line">                s -&gt; Integer.parseInt(s.split(<span class="string">","</span>)[<span class="number">1</span>]),</span><br><span class="line">                i -&gt; i = i + <span class="number">100</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        System.out.println(ageNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-5-predicate"><a href="#2-6-5-predicate" class="headerlink" title="2.6.5. predicate"></a>2.6.5. predicate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.functionalInterface.functionalInterfaceDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过函数式接口练习predicate相关的方法</span></span><br><span class="line"><span class="comment"> * 对泛型指定数据类型进行判断, 得到一个布尔值.</span></span><br><span class="line"><span class="comment"> * 包含与或非and, or, negate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/22 12:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaForPredicateDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">method</span><span class="params">( Predicate&lt;String&gt; stringPredicate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringPredicate.test(<span class="string">"helloWorld"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; p1, Predicate&lt;String&gt; p2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> helloWorld = p1.or(p2).test(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        System.out.println(helloWorld);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">filterString</span><span class="params">(String[] arr, Predicate&lt;String&gt; stringPredicate)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stringPredicate.test(s)) &#123;</span><br><span class="line">                list.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*System.out.println(method(s -&gt; &#123;</span></span><br><span class="line"><span class="comment">            return s.length() &gt; 5;</span></span><br><span class="line"><span class="comment">        &#125;));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        method(s -&gt; s.contains("el"), s -&gt; s.length() &gt; 10);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 筛选条件:</span></span><br><span class="line"><span class="comment">         * 必须为女生；</span></span><br><span class="line"><span class="comment">         * 姓名为4个字。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String[] array = &#123; <span class="string">"迪丽热巴,女"</span>, <span class="string">"古力娜扎,女"</span>, <span class="string">"马尔扎哈,男"</span>, <span class="string">"赵丽颖,女"</span> &#125;;</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;String&gt; arrayList = filterString(array, s -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> s.split(<span class="string">","</span>)[<span class="number">1</span>].equals(<span class="string">"女"</span>) &amp;&amp; s.split(<span class="string">","</span>)[<span class="number">0</span>].length() == <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (String s : arrayList) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-6-lambda延迟加载"><a href="#2-6-6-lambda延迟加载" class="headerlink" title="2.6.6. lambda延迟加载"></a>2.6.6. lambda延迟加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.functionalInterface.DelayForLambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> javaBase.functionalInterface.DelayForLambda.MessageBuilder.MAX_NUM;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试lambda表达式的延迟执行</span></span><br><span class="line"><span class="comment"> * 优化性能, 在不符合条件时, 不会执行lambda的内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/22 9:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayForLambdaDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> level, MessageBuilder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (level == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(builder.messageBuilder());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String msgA = <span class="string">"Hello"</span>;</span><br><span class="line">        String msgB = <span class="string">"World"</span>;</span><br><span class="line">        String msgC = <span class="string">"Java"</span>;</span><br><span class="line">        <span class="comment">//这里的拼接字符串 在条件不成立时不会执行</span></span><br><span class="line">        log(<span class="number">1</span>, () -&gt; msgA + msgB + msgC );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javaBase.functionalInterface.DelayForLambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/22 9:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> MAX_NUM = <span class="number">97</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试lambda延迟加载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">messageBuilder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%e6%80%9d%e7%bb%b4%e5%af%bc%e5%9b%be&quot;&gt;1. 思维导图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-stream-%e4%b8%8e%e5%87%bd%e6%95%b0%
      
    
    </summary>
    
      <category term="java基础" scheme="https://wangdaye7.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>socket网络编程</title>
    <link href="https://wangdaye7.github.io/2019/07/22/note/cyc2018/socket/socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://wangdaye7.github.io/2019/07/22/note/cyc2018/socket/socket网络编程/</id>
    <published>2019-07-21T19:37:33.000Z</published>
    <updated>2019-07-21T14:05:39.825Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-socket%E7%BC%96%E7%A8%8B">1. socket编程</a><ul><li><a href="#11-%E9%9D%A2%E5%90%91TCP%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B">1.1. 面向TCP的网络编程</a></li><li><a href="#12-%E7%AE%80%E5%8D%95%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%80%9A%E4%BF%A1">1.2. 简单的本地通信</a></li><li><a href="#13-%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">1.3. 简单的文件上传</a></li></ul></li><li><a href="#2-%E6%80%BB%E7%BB%93">2. 总结</a></li></ul><!-- /TOC --><h1 id="1-socket编程"><a href="#1-socket编程" class="headerlink" title="1. socket编程"></a>1. socket编程</h1><h2 id="1-1-面向TCP的网络编程"><a href="#1-1-面向TCP的网络编程" class="headerlink" title="1.1. 面向TCP的网络编程"></a>1.1. 面向TCP的网络编程</h2><p>今天学完socket编程, 发现其实java中的socket编程是非常简单的, 当然今天只接触了本地通信, 没有涉及到远端通信的问题. 不知道会不会牵扯到更多的东西. 其实只要把步骤理解清楚, 是非常容易的. 今天也没有接触到更深的关于tcp的东西, 所以学起来很简单. 主要记录的也是编程的一些步骤, 具体查阅API即可.</p><blockquote><ol><li>【服务端】启动,创建ServerSocket对象，等待连接。</li><li>【客户端】启动,创建Socket对象，请求连接。</li><li>【服务端】接收连接,调用accept方法，并返回一个Socket对象。</li><li>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</li><li>【服务端】Scoket对象，获取InputStream，读取客户端发送的数据。</li><li>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</li><li>【客户端】Scoket对象，获取InputStream，解析回写数据。</li><li>【客户端】释放资源，断开连接。</li></ol></blockquote><h2 id="1-2-简单的本地通信"><a href="#1-2-简单的本地通信" class="headerlink" title="1.2. 简单的本地通信"></a>1.2. 简单的本地通信</h2><p>为了方便, 在这里把客户端服务端写到了一起, 两个线程启用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 20:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpCommunication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建服务端线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.print(++count);</span><br><span class="line">            System.out.println(<span class="string">"服务器正在启动, 等待连接中"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1. 创建serverSocket对象, 等待连接</span></span><br><span class="line">                ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">                <span class="comment">//2. 连接成功, 返回Socket对象</span></span><br><span class="line">                Socket accept = serverSocket.accept();</span><br><span class="line">                <span class="comment">//3. 通过连接的socket获取输入流</span></span><br><span class="line">                InputStream inputStream = accept.getInputStream();</span><br><span class="line">                <span class="comment">//4. 解析输入流中数据</span></span><br><span class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> len = inputStream.read(b);</span><br><span class="line">                System.out.print(++count);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//5. 通过socket获取输出流</span></span><br><span class="line">                <span class="keyword">final</span> OutputStream outputStream = accept.getOutputStream();</span><br><span class="line">                <span class="comment">//6. 发送数据到客户端</span></span><br><span class="line">                System.out.print(++count);</span><br><span class="line">                outputStream.write(<span class="string">"这是服务端发送的数据"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">                outputStream.close();</span><br><span class="line">                inputStream.close();</span><br><span class="line">                serverSocket.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建客户端线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.print(++count);</span><br><span class="line">                System.out.println(<span class="string">"客户端启动成功"</span>);</span><br><span class="line">                <span class="comment">//1. 创建socket连接</span></span><br><span class="line">                Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">                <span class="comment">//2. 获取输出流</span></span><br><span class="line">                <span class="keyword">final</span> OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">                <span class="comment">//3. 发出数据</span></span><br><span class="line">                System.out.print(++count);</span><br><span class="line">                outputStream.write(<span class="string">"这是客户端发送的数据: hello"</span>.getBytes());</span><br><span class="line">                <span class="comment">//4. 获取输入流</span></span><br><span class="line">                <span class="keyword">final</span> InputStream inputStream = socket.getInputStream();</span><br><span class="line">                <span class="comment">//5. 显示接受到的数据</span></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> len = inputStream.read(bytes);</span><br><span class="line">                System.out.print(++count);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">                inputStream.close();</span><br><span class="line">                outputStream.close();</span><br><span class="line">                socket.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-简单的文件上传"><a href="#1-3-简单的文件上传" class="headerlink" title="1.3. 简单的文件上传"></a>1.3. 简单的文件上传</h2><blockquote><ol><li>【客户端】输入流，从硬盘读取文件数据到程序中。</li><li>【客户端】输出流，写出文件数据到服务端。</li><li>【服务端】输入流，读取文件数据到服务端程序。</li><li>【服务端】输出流，写出文件数据到服务器硬盘中。</li></ol></blockquote><ol><li>客户端实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.socket.fileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 20:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1. 连接服务器</span></span><br><span class="line">        <span class="keyword">final</span> Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 发送文件</span></span><br><span class="line">        <span class="comment">//2.1 读取本地文件</span></span><br><span class="line">        <span class="keyword">final</span> BufferedInputStream localBufferedIn = <span class="keyword">new</span> BufferedInputStream(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\jhmarryme\\Downloads\\未命名文件.png"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//2.2 创建远程输出流</span></span><br><span class="line">        <span class="keyword">final</span> BufferedOutputStream remoteBufferedOut = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.3 缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//2.4 上传到服务器</span></span><br><span class="line">        <span class="keyword">while</span> ( (len = localBufferedIn.read(bytes)) != -<span class="number">1</span> )&#123;</span><br><span class="line">            remoteBufferedOut.write(bytes, <span class="number">0</span>, len);</span><br><span class="line"><span class="comment">//            remoteBufferedOut.flush(); // 采用关闭输出流的方式通知服务端, 因此不需要这个了</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">//接收来自服务端的信息</span></span><br><span class="line">        <span class="keyword">final</span> InputStream remoteIn = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] back = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        remoteIn.read(back);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(back));</span><br><span class="line">        remoteIn.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        localBufferedIn.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>服务端实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.socket.fileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 20:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1. 创建服务器, 等待连接</span></span><br><span class="line">        <span class="keyword">final</span> ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">        String parent = <span class="string">"D:\\develop\\folderForDevelop\\"</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//2. 连接成功</span></span><br><span class="line">            <span class="keyword">final</span> Socket accept = serverSocket.accept();</span><br><span class="line">            <span class="comment">// 如果连接成功的话会继续进行.</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                        <span class="comment">//3.1 获取远程输入流</span></span><br><span class="line">                        BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                        <span class="comment">//3.2 获取本地输出流</span></span><br><span class="line">                        <span class="keyword">final</span> BufferedOutputStream out = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(parent + System.currentTimeMillis() + <span class="string">".txt"</span>)));</span><br><span class="line"></span><br><span class="line">                )&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//4. 保存文件到本地</span></span><br><span class="line">                    <span class="comment">//4.1 缓冲区</span></span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//4.2 保存</span></span><br><span class="line">                    <span class="keyword">while</span>( (len = in.read(bytes)) != -<span class="number">1</span> )&#123;</span><br><span class="line">                        out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//5. 回写数据</span></span><br><span class="line">                    <span class="keyword">final</span> OutputStream remoteOut = accept.getOutputStream();</span><br><span class="line">                    remoteOut.write(<span class="string">"上传成功"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//关闭资源</span></span><br><span class="line">                    accept.close();</span><br><span class="line">                    remoteOut.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h1><p>重点就是分清步骤, 其实总体来说很简单.<br>今天接触的知识比较浅, 没有做更深入的学习, 等以后学习了再进行补充.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-socket%E7%BC%96%E7%A8%8B&quot;&gt;1. socket编程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-%E9%9D%A2%E5%90%91TCP%E7%9A%84%E7%BD%91%E7%
      
    
    </summary>
    
      <category term="java基础" scheme="https://wangdaye7.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>几个简单的递归练习</title>
    <link href="https://wangdaye7.github.io/2019/07/21/note/cyc2018/recursion/%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%92%E5%BD%92%E7%BB%83%E4%B9%A0/"/>
    <id>https://wangdaye7.github.io/2019/07/21/note/cyc2018/recursion/几个简单的递归练习/</id>
    <published>2019-07-21T14:40:28.000Z</published>
    <updated>2019-07-21T06:41:51.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打印当前目录下所有文件及目录"><a href="#打印当前目录下所有文件及目录" class="headerlink" title="打印当前目录下所有文件及目录"></a>打印当前目录下所有文件及目录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.recursion;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 11:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintAllDirs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试打印当前目录下所有文件及目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        File dir  = <span class="keyword">new</span> File(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase"</span>);</span><br><span class="line"></span><br><span class="line">        printDir(dir);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; stringListEntry : map.entrySet()) &#123;</span><br><span class="line">            String key = stringListEntry.getKey();</span><br><span class="line">            System.out.println(key + <span class="string">": "</span>);</span><br><span class="line">            List&lt;String&gt; value = stringListEntry.getValue();</span><br><span class="line">            <span class="keyword">for</span> (String s : value) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当前目录下所有文件名及目录名 一一对应显示出来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">printDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先获取所有文件及目录</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">//如果是文件则直接存入</span></span><br><span class="line">            <span class="keyword">if</span> (file.isFile())&#123;</span><br><span class="line">                String parent = file.getParent();</span><br><span class="line"></span><br><span class="line">                List&lt;String&gt; strings = map.get(parent);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (strings == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    map.put(parent, strings);</span><br><span class="line">                &#125;</span><br><span class="line">                strings.add(file.getName());</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归求和-阶乘"><a href="#递归求和-阶乘" class="headerlink" title="递归求和, 阶乘"></a>递归求和, 阶乘</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.recursion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 11:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRecursionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getSumByRecursion(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(getFactorial(<span class="number">5L</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归求1~n的和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSumByRecursion</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n + getSumByRecursion(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归求阶乘</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">getFactorial</span><span class="params">(Long n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n * getFactorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;打印当前目录下所有文件及目录&quot;&gt;&lt;a href=&quot;#打印当前目录下所有文件及目录&quot; class=&quot;headerlink&quot; title=&quot;打印当前目录下所有文件及目录&quot;&gt;&lt;/a&gt;打印当前目录下所有文件及目录&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="java基础" scheme="https://wangdaye7.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wangdaye7.github.io/2019/07/21/note/%E7%96%91%E9%97%AE/"/>
    <id>https://wangdaye7.github.io/2019/07/21/note/疑问/</id>
    <published>2019-07-21T01:58:47.142Z</published>
    <updated>2019-06-27T07:30:08.178Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>ArrayList 与 List</p></li><li><p>equals与==<br>== 比较对象地址, equals比较值</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;ArrayList 与 List&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;equals与==&lt;br&gt;== 比较对象地址, equals比较值&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通用异常处理</title>
    <link href="https://wangdaye7.github.io/2019/07/19/note/temp/%E9%80%9A%E7%94%A8%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://wangdaye7.github.io/2019/07/19/note/temp/通用异常处理/</id>
    <published>2019-07-18T16:14:19.000Z</published>
    <updated>2019-09-08T14:23:31.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用异常处理"><a href="#通用异常处理" class="headerlink" title="通用异常处理"></a>通用异常处理</h2><p>处理异常信息时, 通过SpringMVC的AOP拦截异常, 返回错误信息</p><ol><li>环境<br>依赖: (不引用启动器, 版本由父工程管理)</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>自定义枚举类用于异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExceptionEnum &#123;</span><br><span class="line">    <span class="comment">//价格不能为空</span></span><br><span class="line">    PRICE_CANNOT_BE_NULL(<span class="number">400</span>, <span class="string">"价格不能为空"</span>)</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义信息类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Long timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExceptionResult</span><span class="params">(ExceptionEnum exceptionEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = exceptionEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message = exceptionEnum.getMessage();</span><br><span class="line">        <span class="keyword">this</span>.timestamp = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接受枚举作为参数</span></span><br><span class="line">    <span class="keyword">private</span> ExceptionEnum exceptionEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义通用异常拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要想该类被扫描到, 必须和应用启动器的类处于同一个包下 </span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(LyException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ExceptionResult&gt; <span class="title">handleException</span><span class="params">(LyException e)</span></span>&#123;</span><br><span class="line">        <span class="comment">//返回的是整个响应消息, 其中主要配置错误码和响应体</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(e.getExceptionEnum().getCode()).body(<span class="keyword">new</span> ExceptionResult(e.getExceptionEnum()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Item&gt; <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="comment">//校验价格</span></span><br><span class="line">        <span class="keyword">if</span> (item.getPrice() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//传递一个枚举变量</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.PRICE_CANNOT_BE_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>补充</p></li></ol><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/springboot%E5%BE%AE%E6%9C%8D%E5%8A%A1/tools/screen/7UN%7BX%7DW3G%40SMJ2K7R%5DJNGZ0.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通用异常处理&quot;&gt;&lt;a href=&quot;#通用异常处理&quot; class=&quot;headerlink&quot; title=&quot;通用异常处理&quot;&gt;&lt;/a&gt;通用异常处理&lt;/h2&gt;&lt;p&gt;处理异常信息时, 通过SpringMVC的AOP拦截异常, 返回错误信息&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;环境&lt;b
      
    
    </summary>
    
      <category term="待整理" scheme="https://wangdaye7.github.io/categories/%E5%BE%85%E6%95%B4%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>命令备忘</title>
    <link href="https://wangdaye7.github.io/2019/07/18/note/temp/%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/"/>
    <id>https://wangdaye7.github.io/2019/07/18/note/temp/命令备忘/</id>
    <published>2019-07-18T15:42:19.000Z</published>
    <updated>2019-09-08T14:23:21.084Z</updated>
    
    <content type="html"><![CDATA[<p>rabbitmq-server start<br>nginx -s reload<br>./elasticsearch</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;rabbitmq-server start&lt;br&gt;nginx -s reload&lt;br&gt;./elasticsearch&lt;/p&gt;

      
    
    </summary>
    
      <category term="待整理" scheme="https://wangdaye7.github.io/categories/%E5%BE%85%E6%95%B4%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>File与流</title>
    <link href="https://wangdaye7.github.io/2019/07/17/note/cyc2018/File/File%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%B5%81%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://wangdaye7.github.io/2019/07/17/note/cyc2018/File/File及基本流学习记录/</id>
    <published>2019-07-17T11:52:41.000Z</published>
    <updated>2019-07-24T13:30:35.958Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-思维导图">1. 思维导图</a></li><li><a href="#2-file类">2. File类</a><ul><li><a href="#21-新建打开文件">2.1. 新建/打开文件</a></li></ul></li><li><a href="#3-io流">3. IO流</a><ul><li><a href="#31-字节流">3.1. 字节流</a><ul><li><a href="#311-通过字节流复制文件">3.1.1. 通过字节流复制文件</a></li></ul></li><li><a href="#32-字符流">3.2. 字符流</a></li><li><a href="#33-io异常的处理">3.3. IO异常的处理</a></li></ul></li><li><a href="#4-缓冲流">4. 缓冲流</a><ul><li><a href="#41-字节缓冲流和字符缓冲流">4.1. 字节缓冲流和字符缓冲流</a><ul><li><a href="#411-字符缓冲流特有方法">4.1.1. 字符缓冲流特有方法</a></li><li><a href="#412-复制大文件">4.1.2. 复制大文件</a></li></ul></li></ul></li><li><a href="#5-转换流">5. 转换流</a></li><li><a href="#6-序列化">6. 序列化</a><ul><li><a href="#61-objectoutputstream类和objectinputstream类">6.1. ObjectOutputStream类和ObjectInputStream类</a><ul><li><a href="#611-主要方法">6.1.1. 主要方法</a></li></ul></li></ul></li><li><a href="#7-打印流">7. 打印流</a></li><li><a href="#8-总结">8. 总结</a></li></ul><!-- /TOC --><h1 id="1-思维导图"><a href="#1-思维导图" class="headerlink" title="1. 思维导图"></a>1. 思维导图</h1><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/cyc/fileStream/%E4%B8%8E%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E5%90%84%E7%A7%8D%E6%B5%81.png" alt></p><h1 id="2-File类"><a href="#2-File类" class="headerlink" title="2. File类"></a>2. File类</h1><p>以前对文件流的认识比较浅, 只是偶尔用到的时候查一下, 不懂的用法看一下. 但总归是经常需要使用到的东西, 这次就特地好好来学一下.</p><h2 id="2-1-新建-打开文件"><a href="#2-1-新建-打开文件" class="headerlink" title="2.1. 新建/打开文件"></a>2.1. 新建/打开文件</h2><p>这里的我的主要学习点在新建文件和打开已有的文件上, 知道常用的方法就够了, 至于很多的方法在使用的时候总结归纳一下, 翻阅API就够用了.</p><blockquote><p>new File()的使用方法有很多种, 可以通过绝对路径创建和结合File与相对路径使用等等, 无论文件是否存在都能新建成功, 所以最好先用exists()方法确认文件是否存在再进行下一步操作.<br>当文件不存在时, 通过createNewFile()创建.</p></blockquote><p>下面是代码练习:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/17 11:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\"</span>, <span class="string">"WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File"</span>);</span><br><span class="line">        System.out.println(file.isDirectory());</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            File hello = <span class="keyword">new</span> File(file, <span class="string">"hellWorld.java"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!hello.exists()) &#123;</span><br><span class="line">                System.out.println(hello.exists());</span><br><span class="line">                hello.createNewFile();</span><br><span class="line">                System.out.println(hello.exists());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查看</span></span><br><span class="line">        <span class="keyword">for</span> (String s : file.list()) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (File listFile : file.listFiles()) &#123;</span><br><span class="line">            System.out.println(listFile.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-IO流"><a href="#3-IO流" class="headerlink" title="3. IO流"></a>3. IO流</h1><h2 id="3-1-字节流"><a href="#3-1-字节流" class="headerlink" title="3.1. 字节流"></a>3.1. 字节流</h2><p>字节流的使用很简单, 感觉平常使用的也不多, 所以就简单测试了一下用法。</p><p><strong>重点也就是两个常用的输入输出流：OutputStream  InputStream</strong></p><blockquote><p>使用的也是两个子类 FileInputStream FileOutputStream</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 13:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReadAndWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        testFileWrite();</span></span><br><span class="line"></span><br><span class="line">        testReadFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File\\hellWorld.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            <span class="keyword">int</span> read;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            //无参read 返回的是int类型的数据, 转换为char可以显示</span></span><br><span class="line"><span class="comment">            while( (read = inputStream.read()) != -1 )&#123;</span></span><br><span class="line"><span class="comment">                System.out.print( ( char)read);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//用byte数组作为read的参数时, 返回的是读取的长度</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((read = inputStream.read(bytes) ) != -<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                System.out.print(<span class="keyword">new</span> String(bytes,<span class="number">0</span>, read));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            inputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件写入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFileWrite</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File\\hellWorld.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!file.isDirectory()) &#123;</span><br><span class="line">            System.out.println(file.getAbsolutePath());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//为true代表追加写入, 为false或不写则清空文件</span></span><br><span class="line">                FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line">                outputStream.write(<span class="string">"helloWorld"</span>.getBytes());</span><br><span class="line">                outputStream.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">                outputStream.write(<span class="number">97</span>);</span><br><span class="line"></span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-通过字节流复制文件"><a href="#3-1-1-通过字节流复制文件" class="headerlink" title="3.1.1. 通过字节流复制文件"></a>3.1.1. 通过字节流复制文件</h3><blockquote><p>打开文件流 -&gt; 循环读写 -&gt; 关闭文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试复制文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testCopyFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开源文件</span></span><br><span class="line">    FileInputStream source = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File\\hellWorld.txt"</span>);</span><br><span class="line">    <span class="comment">//打开目标文件, 不存在</span></span><br><span class="line">    FileOutputStream target = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File\\hellWorld-back.txt"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定缓冲数组大小</span></span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( (len = source.read(b)) != -<span class="number">1</span> )&#123;</span><br><span class="line">        target.write(b, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    source.close();</span><br><span class="line">    target.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-字符流"><a href="#3-2-字符流" class="headerlink" title="3.2. 字符流"></a>3.2. 字符流</h2><p>使用基本和字节流一致.</p><h2 id="3-3-IO异常的处理"><a href="#3-3-IO异常的处理" class="headerlink" title="3.3. IO异常的处理"></a>3.3. IO异常的处理</h2><p>JDK9的改进,无需手动close :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被final修饰的对象</span></span><br><span class="line"><span class="keyword">final</span> Resource resource1 = <span class="keyword">new</span> Resource(<span class="string">"resource1"</span>);</span><br><span class="line"><span class="comment">// 普通对象</span></span><br><span class="line">Resource resource2 = <span class="keyword">new</span> Resource(<span class="string">"resource2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入方式：直接引入</span></span><br><span class="line"><span class="keyword">try</span> (resource1; resource2) &#123;</span><br><span class="line">     <span class="comment">// 使用对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-缓冲流"><a href="#4-缓冲流" class="headerlink" title="4. 缓冲流"></a>4. 缓冲流</h1><h2 id="4-1-字节缓冲流和字符缓冲流"><a href="#4-1-字节缓冲流和字符缓冲流" class="headerlink" title="4.1. 字节缓冲流和字符缓冲流"></a>4.1. 字节缓冲流和字符缓冲流</h2><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><blockquote><p>使用方法很简单, 就是在已有的IO流上继续构建一个缓冲流<br>相比于普通的IO流, 缓冲流处理的速度非常快</p></blockquote><h3 id="4-1-1-字符缓冲流特有方法"><a href="#4-1-1-字符缓冲流特有方法" class="headerlink" title="4.1.1. 字符缓冲流特有方法"></a>4.1.1. 字符缓冲流特有方法</h3><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 </li></ul><h3 id="4-1-2-复制大文件"><a href="#4-1-2-复制大文件" class="headerlink" title="4.1.2. 复制大文件"></a>4.1.2. 复制大文件</h3><p>测试用法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReadByBufferdStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        copyFileByBufferedStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过缓冲流复制大文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFileByBufferedStream</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        String parent = <span class="string">"C:\\Users\\jhmarryme\\Downloads"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> currentTimeMillis = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> ( BufferedInputStream inputStream = <span class="keyword">new</span> BufferedInputStream(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(parent + <span class="string">"\\我是大哥大.Kyou.kara.Ore.wa.Ep08.Chi_Jap.HDTVrip.1280X720-ZhuixinFan.mp4"</span>));</span><br><span class="line">              BufferedOutputStream outputStream = <span class="keyword">new</span> BufferedOutputStream(</span><br><span class="line">                      <span class="keyword">new</span> FileOutputStream(parent + <span class="string">"\\dageda.mp4"</span>));</span><br><span class="line">              )&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span> * <span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ( (len = inputStream.read(bytes)) != -<span class="number">1</span> )&#123;</span><br><span class="line">                outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"复制所花费的时间"</span> + (System.currentTimeMillis() - currentTimeMillis));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-转换流"><a href="#5-转换流" class="headerlink" title="5. 转换流"></a>5. 转换流</h1><blockquote><p>InputStreamReader<br>OutputStreamWriter</p></blockquote><p>主要用来处理编码格式问题.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 15:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReadAndWriteByConversionStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        testRead();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取GB2312格式的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testRead</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line"><span class="comment">//                FileReader reader = new FileReader("D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File\\test.txt");</span></span><br><span class="line">                InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                        <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File\\test.txt"</span>), <span class="string">"GB2312"</span></span><br><span class="line">                );</span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="keyword">int</span> read;</span><br><span class="line">            <span class="keyword">while</span> ((read = reader.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)read);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-序列化"><a href="#6-序列化" class="headerlink" title="6. 序列化"></a>6. 序列化</h1><blockquote><p>Java 提供了一种对象序列化的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。</p></blockquote><h2 id="6-1-ObjectOutputStream类和ObjectInputStream类"><a href="#6-1-ObjectOutputStream类和ObjectInputStream类" class="headerlink" title="6.1. ObjectOutputStream类和ObjectInputStream类"></a>6.1. ObjectOutputStream类和ObjectInputStream类</h2><h3 id="6-1-1-主要方法"><a href="#6-1-1-主要方法" class="headerlink" title="6.1.1. 主要方法"></a>6.1.1. 主要方法</h3><ul><li><code>public ObjectOutputStream(OutputStream out)</code>： 创建一个指定OutputStream的ObjectOutputStream。</li><li><p><code>public ObjectInputStream(InputStream in)</code>： 创建一个指定InputStream的ObjectInputStream。</p></li><li><p><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</p></li><li><code>public final Object readObject ()</code> : 读取一个对象。</li></ul><p>实体类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8915532794959050340L</span>;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addressCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Address  check : "</span> + name + <span class="string">" -- "</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 16:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectSerializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        testSerializable();</span><br><span class="line">        testDeserializable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDeserializable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="keyword">final</span> ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File\\employee.txt"</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">            employee = (Employee) inputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(employee.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSerializable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setAge(<span class="number">23</span>);</span><br><span class="line">        employee.setName(<span class="string">"王豪"</span>);</span><br><span class="line">        employee.setAddress(<span class="string">"荣昌"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//序列化流对象</span></span><br><span class="line">                <span class="keyword">final</span> ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File\\employee.txt"</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">            outputStream.writeObject(employee);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="7-打印流"><a href="#7-打印流" class="headerlink" title="7. 打印流"></a>7. 打印流</h1><p>可以用来改变打印流向, 从控制台转向文件.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/21 16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PrintStream printStream = <span class="keyword">new</span> PrintStream(<span class="string">"D:\\WJH-workSpace\\code\\java\\new\\reading\\cyc2018\\src\\main\\java\\javaBase\\File\\test.txt"</span>);</span><br><span class="line">        System.setOut(printStream);</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h1><p>不管是字节流和字符流, 构造方法的参数可以为 <strong>路径或File对象</strong>. 字符流主要用来处理文本文件.<br>使用字符流的时候如果 未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。 字节流则不会. 但是可以通过<strong>flush</strong>方法强制刷新缓冲区.<br>字符流可以很方便的处理字符串.<br>字符流，只能操作文本文件，不能操作图片，视频等非文本文件。<br>缓冲流效率最佳.</p><p>学习完这些基本流后, 大概对文件的操作有了初步的认识. 合理的选择要使用的流. 在需要效率的时候选择缓冲流. 当文件格式需要处理的时候, 选择转换流进行处理. 正确的选择要使用的格式很重要. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-思维导图&quot;&gt;1. 思维导图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-file类&quot;&gt;2. File类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-新建打开文件&quot;&gt;2.1. 新建/打开文件&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="java基础" scheme="https://wangdaye7.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>生产者消费者问题简单模拟</title>
    <link href="https://wangdaye7.github.io/2019/07/15/note/cyc2018/thread/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F/"/>
    <id>https://wangdaye7.github.io/2019/07/15/note/cyc2018/thread/生产者消费者问题简单模拟/</id>
    <published>2019-07-15T11:34:56.000Z</published>
    <updated>2019-07-24T06:34:11.869Z</updated>
    
    <content type="html"><![CDATA[<p>一次简单的测试.</p><p>产品:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.thread.producerAndConsumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/15 11:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    String size;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.thread.producerAndConsumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/15 11:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Product product;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(String name, Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (product)&#123;</span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                <span class="keyword">if</span> (!product.flag) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        product.wait();</span><br><span class="line">                        System.out.println(name + <span class="string">" : 产品未生产, 正在等待"</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(name + <span class="string">"正在消费产品"</span> + product.color + product.size);</span><br><span class="line">                product.flag = <span class="keyword">false</span>;</span><br><span class="line">                product.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生产者:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.thread.producerAndConsumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/15 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Product product;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(String name, Product product)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (product)&#123;</span><br><span class="line">                <span class="comment">//存在未被消费的商品</span></span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                <span class="keyword">if</span> (product.flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(name + <span class="string">": 存在未被消费的商品, 正在等待"</span>);</span><br><span class="line">                        product.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(name + <span class="string">"开始生产产品"</span>);</span><br><span class="line">                <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    product.color = <span class="string">"绿色"</span>;</span><br><span class="line">                    product.size = <span class="string">"大号"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    product.color = <span class="string">"红色"</span>;</span><br><span class="line">                    product.size = <span class="string">"小号"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                product.flag = <span class="keyword">true</span>;</span><br><span class="line">                System.out.println(name + <span class="string">"生产商品成功"</span>);</span><br><span class="line">                System.out.println(name + <span class="string">"正在等待消费"</span>);</span><br><span class="line">                product.notify();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.thread.producerAndConsumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/15 11:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PCDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试生产者消费者问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product();</span><br><span class="line">        <span class="keyword">new</span> Producer(<span class="string">"生产者"</span>, product).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(<span class="string">"消费者"</span>, product).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一次简单的测试.&lt;/p&gt;
&lt;p&gt;产品:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="java基础" scheme="https://wangdaye7.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>lambda简单使用</title>
    <link href="https://wangdaye7.github.io/2019/07/15/note/cyc2018/lambda/lambda%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://wangdaye7.github.io/2019/07/15/note/cyc2018/lambda/lambda简单使用/</id>
    <published>2019-07-15T11:11:23.000Z</published>
    <updated>2019-07-24T06:34:32.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用法记录"><a href="#用法记录" class="headerlink" title="用法记录"></a>用法记录</h1><h2 id="Lambda表达式的标准格式为"><a href="#Lambda表达式的标准格式为" class="headerlink" title="Lambda表达式的标准格式为"></a>Lambda表达式的标准格式为</h2><blockquote><p>(参数类型 参数名称) -&gt; { 代码语句 }</p></blockquote><h2 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h2><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内<strong>有且仅有一个参</strong>，则小括号可以省略；</li><li>如果大括号内<strong>有且仅有一个语句</strong>，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li></ol><h2 id="Lambda的使用前提"><a href="#Lambda的使用前提" class="headerlink" title="Lambda的使用前提"></a>Lambda的使用前提</h2><ol><li>使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法</strong>。<br>无论是JDK内置的<code>Runnable</code>、<code>Comparator</code>接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</li><li>使用Lambda必须具有<strong>上下文推断</strong>。<br>也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li></ol><blockquote><p>备注：有且仅有一个抽象方法的接口，称为“函数式接口”。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用法记录&quot;&gt;&lt;a href=&quot;#用法记录&quot; class=&quot;headerlink&quot; title=&quot;用法记录&quot;&gt;&lt;/a&gt;用法记录&lt;/h1&gt;&lt;h2 id=&quot;Lambda表达式的标准格式为&quot;&gt;&lt;a href=&quot;#Lambda表达式的标准格式为&quot; class=&quot;header
      
    
    </summary>
    
      <category term="java基础" scheme="https://wangdaye7.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux补充</title>
    <link href="https://wangdaye7.github.io/2019/07/15/linux/Linux%E8%A1%A5%E5%85%85/"/>
    <id>https://wangdaye7.github.io/2019/07/15/linux/Linux补充/</id>
    <published>2019-07-14T20:34:03.000Z</published>
    <updated>2019-09-08T14:25:18.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><ol><li>查看当前系统shell版本<br>echo $SHELL</li><li>查看支持的所有shell<br>cat /etc/shells</li><li>切换shell版本<br>chsh -s 版本  实际切换无效.</li></ol><h2 id="查找特定的文件"><a href="#查找特定的文件" class="headerlink" title="查找特定的文件"></a>查找特定的文件</h2><blockquote><p>find path [options] params</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ~ -name "JsonToString*" 从用户家目录下查找</span><br><span class="line">find / -name "JsonToString*" 从根目录下查找</span><br><span class="line">find -name "JsonToString*" 从当前目录下</span><br></pre></td></tr></table></figure><p>参数-iname 则表示忽略大小写</p><h2 id="检索文件内容"><a href="#检索文件内容" class="headerlink" title="检索文件内容"></a>检索文件内容</h2><blockquote><p>grep [options] pattern file</p></blockquote><p>全称: Global Regular Expression Print<br>作用: 查找文件里符合条件的字符串</p><p>| 可以结合管道操作符使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">grep "moo" targe* 查找以targe开头的文件并内容包含moo的文件</span><br><span class="line"></span><br><span class="line">find ~ | grep "target" 等同于 find ~ -name "target*"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grep "partial\[ture\]" log.info 查看日志中包含"partial[true]"的行 其中[] 需要转义</span><br><span class="line"></span><br><span class="line">grep "partial\[true\]" log.info | grep -o "engine\[[[:alnum:]]*\]" 再次进行过滤, 只显示"partial[true]"并且包含"engine[任意数字字母]"的行的 engine[xxxx] 部分, -o 表示只显示匹配的部分</span><br><span class="line">grep "partial\[true\]" log.info | grep -o "engine\[[0-9a-z]*\]"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ps -ef | grep tomcat 查看tomcat信息  但是因为本条指令也在查询tomcat, 所以本条查询进程也会显示出来</span><br><span class="line"></span><br><span class="line">ps -ef | grep tomcat | grep -v "grep" 过滤掉该指令本身</span><br></pre></td></tr></table></figure><h2 id="对内容做统计"><a href="#对内容做统计" class="headerlink" title="对内容做统计"></a>对内容做统计</h2><blockquote><p>awk [options] ‘cmd’ file</p></blockquote><p>一次读取一行文本, 按分隔符进行切片<br>切片保存在内建的变量中 $1 $2 … $0为整行<br><strong>单引号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先从/var/<span class="built_in">log</span>目录下copy一份日志文件 这里选择的是dpkg.log</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看第一, 四列的数据</span></span><br><span class="line">awk '&#123;print $1 $4&#125;' dpkg.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 第二列满足条件 或 第一行的数据</span></span><br><span class="line">awk '($2=="14:42:45") || NR==1 &#123;print $0&#125;' dpkg.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据第二列的值统计出现过的次数</span></span><br><span class="line">awk '&#123;arr[$2]++&#125;END&#123;for(i in arr) print i "\t" arr[i]&#125;' dpkg.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h1&gt;&lt;h2 id=&quot;体系结构&quot;&gt;&lt;a href=&quot;#体系结构&quot; class=&quot;headerlink&quot; title=&quot;体系结构&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线程</title>
    <link href="https://wangdaye7.github.io/2019/07/09/note/cyc2018/thread/%E7%BA%BF%E7%A8%8B/"/>
    <id>https://wangdaye7.github.io/2019/07/09/note/cyc2018/thread/线程/</id>
    <published>2019-07-09T11:27:02.000Z</published>
    <updated>2019-09-08T14:24:07.649Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-概念">1. 概念</a><ul><li><a href="#11-基本概念">1.1. 基本概念</a></li><li><a href="#12-线程的状态">1.2. 线程的状态</a></li></ul></li><li><a href="#2-基本方法">2. 基本方法</a></li><li><a href="#3-线程的应用">3. 线程的应用</a><ul><li><a href="#31-线程的创建">3.1. 线程的创建</a><ul><li><a href="#311-两种创建的方式">3.1.1. 两种创建的方式</a></li><li><a href="#312-测试代码">3.1.2. 测试代码</a></li><li><a href="#313-thread和runnable的区别">3.1.3. Thread和Runnable的区别</a></li></ul></li><li><a href="#32-多线程">3.2. 多线程</a></li><li><a href="#33-线程的安全问题">3.3. 线程的安全问题</a><ul><li><a href="#331-出现问题的代码">3.3.1. 出现问题的代码</a></li><li><a href="#332-线程同步">3.3.2. 线程同步</a></li></ul></li></ul></li><li><a href="#4-线程池的使用">4. 线程池的使用</a></li></ul><!-- /TOC --><h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1. 基本概念"></a>1.1. 基本概念</h2><p><strong>1个程序至少有一个进程,一个进程至少有一个线程.</strong></p><ol><li><p>程序</p><blockquote><p>程序只是一组指令的有序集合，它本身没有任何运行的含义，它只是一个静态的实体</p></blockquote></li><li><p>进程</p><blockquote><p>是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></blockquote><p> 进程是”活的”.</p></li><li><p>线程</p><blockquote><p>线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程 中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</p></blockquote></li></ol><h2 id="1-2-线程的状态"><a href="#1-2-线程的状态" class="headerlink" title="1.2. 线程的状态"></a>1.2. 线程的状态</h2><p>在API中<code>java.lang.Thread.State</code>这个枚举中给出了六种线程状态：</p><table><thead><tr><th>线程状态</th><th>导致状态发生条件</th></tr></thead><tbody><tr><td>NEW(新建)</td><td>线程刚被创建，但是并未启动。还没调用start方法。</td></tr><tr><td>Runnable(可运行)</td><td>线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。</td></tr><tr><td>Blocked(锁阻塞)</td><td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td></tr><tr><td>Waiting(无限等待)</td><td>一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。</td></tr><tr><td>Timed Waiting(计时等待)</td><td>同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。</td></tr><tr><td>Teminated(被终止)</td><td>因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。</td></tr></tbody></table><h1 id="2-基本方法"><a href="#2-基本方法" class="headerlink" title="2. 基本方法"></a>2. 基本方法</h1><p><code>java.lang.Thread</code>类：</p><p><strong>构造方法：</strong></p><ul><li><code>public Thread()</code>:分配一个新的线程对象。</li><li><code>public Thread(String name)</code>:分配一个指定名字的新的线程对象。</li><li><code>public Thread(Runnable target)</code>:分配一个带有指定目标新的线程对象。</li><li><code>public Thread(Runnable target,String name)</code>:分配一个带有指定目标新的线程对象并指定名字。</li></ul><p><strong>常用方法：</strong></p><ul><li><code>public String getName()</code>:获取当前线程名称。</li><li><code>public void start()</code>:导致此线程开始执行; Java虚拟机调用此线程的run方法。</li><li><code>public void run()</code>:此线程要执行的任务在此处定义代码。</li><li><code>public static void sleep(long millis)</code>:使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</li><li><code>public static Thread currentThread()</code>:返回对当前正在执行的线程对象的引用。</li></ul><h1 id="3-线程的应用"><a href="#3-线程的应用" class="headerlink" title="3. 线程的应用"></a>3. 线程的应用</h1><h2 id="3-1-线程的创建"><a href="#3-1-线程的创建" class="headerlink" title="3.1. 线程的创建"></a>3.1. 线程的创建</h2><h3 id="3-1-1-两种创建的方式"><a href="#3-1-1-两种创建的方式" class="headerlink" title="3.1.1. 两种创建的方式"></a>3.1.1. 两种创建的方式</h3><ol><li><p>继承Thead并重写run方法</p></li><li><p>实现Runnable接口作为参数传递给Thead</p></li></ol><blockquote><p>可以使用匿名内部类或函数式编程</p></blockquote><h3 id="3-1-2-测试代码"><a href="#3-1-2-测试代码" class="headerlink" title="3.1.2. 测试代码"></a>3.1.2. 测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/14 9:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadFinalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*Thread th1 = new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void run() &#123;</span></span><br><span class="line"><span class="comment">                for (int i = 0; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println("thread1 -&gt; i = " + i);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        Thread th1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"thread1 -&gt; i = "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        th1.start();</span><br><span class="line">        Thread2 th2 = <span class="keyword">new</span> Thread2(<span class="string">"thread2"</span>);</span><br><span class="line">        th2.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main  thread -&gt; i = "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread2</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"thread2 -&gt; i = "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-Thread和Runnable的区别"><a href="#3-1-3-Thread和Runnable的区别" class="headerlink" title="3.1.3. Thread和Runnable的区别"></a>3.1.3. Thread和Runnable的区别</h3><p>一个类继承Thread，不适合资源共享。实现了Runable接口的话，很容易的实现资源共享。</p><p><strong>实现Runnable接口比继承Thread类所具有的优势：</strong></p><ol><li>适合多个相同的程序代码的线程去共享同一个资源。</li><li>可以避免java中的单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</li><li>线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类。</li></ol><blockquote><p>扩充：在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实在就是在操作系统中启动了一个进程。</p></blockquote><h2 id="3-2-多线程"><a href="#3-2-多线程" class="headerlink" title="3.2. 多线程"></a>3.2. 多线程</h2><p>多线程执行时，在栈内存中，其实每一个执行线程都有一片自己所属的栈内存空间。进行方法的压栈和弹栈。</p><h2 id="3-3-线程的安全问题"><a href="#3-3-线程的安全问题" class="headerlink" title="3.3. 线程的安全问题"></a>3.3. 线程的安全问题</h2><h3 id="3-3-1-出现问题的代码"><a href="#3-3-1-出现问题的代码" class="headerlink" title="3.3.1. 出现问题的代码"></a>3.3.1. 出现问题的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/14 10:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeFinalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Tickets tickets = <span class="keyword">new</span> Tickets();</span><br><span class="line">        Thread th1 = <span class="keyword">new</span> Thread(tickets, <span class="string">"窗口1"</span>);</span><br><span class="line">        Thread th3 = <span class="keyword">new</span> Thread(tickets, <span class="string">"窗口3"</span>);</span><br><span class="line">        Thread th2 = <span class="keyword">new</span> Thread(tickets, <span class="string">"窗口2"</span>);</span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line">        th3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tickets</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//模拟出票时间</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖第"</span> + (tickets--) + <span class="string">"张票"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现了票重复买和不存在的票的情况</p><blockquote><p>线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</p></blockquote><h3 id="3-3-2-线程同步"><a href="#3-3-2-线程同步" class="headerlink" title="3.3.2. 线程同步"></a>3.3.2. 线程同步</h3><ol><li><p>同步代码块</p><p> <strong>同步代码块</strong>：<code>synchronized</code>关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。</p><p> 格式: </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)&#123;</span><br><span class="line">    需要同步操作的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>同步锁</strong>:</p><p> 对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.</p><p> 锁对象 可以是任意类型。</p><p> 多个线程对象  要使用同一把锁。</p><blockquote><p>在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着(BLOCKED)。<br>任意new一个Object对象, 作为同步锁即可</p></blockquote></li><li><p>同步方法</p><p> <strong>同步方法</strong>:使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着。</p><blockquote><p>对于非static方法,同步锁就是this。<br>对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。</p></blockquote><p> 格式：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>锁机制</p><p> <code>java.util.concurrent.locks.Lock</code>机制提供了比<strong>synchronized</strong>代码块和<strong>synchronized</strong>方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象。</p><p> Lock锁也称同步锁，加锁与释放锁方法化了，如下：</p><ul><li><code>public void lock()</code>:加同步锁。</li><li><p><code>public void unlock()</code>:释放同步锁。</p><blockquote><p>Lock lock = new ReentrantLock()即可</p></blockquote></li></ul></li></ol><h1 id="4-线程池的使用"><a href="#4-线程池的使用" class="headerlink" title="4. 线程池的使用"></a>4. 线程池的使用</h1><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p><p>Executors类中有个创建线程池的方法如下：</p><ul><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</li></ul><p>一个使用线程池对象的方法如下：</p><ul><li><p><code>public Future&lt;?&gt; submit(Runnable task)</code>:获取线程池中的某一个线程对象，并执行</p><blockquote><p>Future接口：用来记录线程任务执行完毕后产生的结果。线程池创建与使用。</p></blockquote></li></ul><p>使用线程池中线程对象的步骤：</p><ol><li>创建线程池对象。</li><li>创建Runnable接口子类对象。(task)</li><li>提交Runnable接口子类对象。(take task)</li><li>关闭线程池(一般不做)。</li></ol><p>Runnable实现类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.thread.ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/17 11:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableForPool</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程准备"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" : 正在使用"</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"使用完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaBase.thread.ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/17 11:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">         <span class="comment">// 创建Runnable实例对象</span></span><br><span class="line">        RunnableForPool r = <span class="keyword">new</span> RunnableForPool();</span><br><span class="line">        <span class="comment">// 从线程池中获取线程对象,然后调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 再获取1个线程对象，调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-概念&quot;&gt;1. 概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-基本概念&quot;&gt;1.1. 基本概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12-线程的状态&quot;&gt;1.2. 线程的状态&lt;/a&gt;&lt;/li&gt;
&lt;/
      
    
    </summary>
    
      <category term="java基础" scheme="https://wangdaye7.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>异常学习及简单应用</title>
    <link href="https://wangdaye7.github.io/2019/07/09/note/cyc2018/exception/%E5%BC%82%E5%B8%B8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
    <id>https://wangdaye7.github.io/2019/07/09/note/cyc2018/exception/异常学习及简单应用/</id>
    <published>2019-07-09T11:27:02.000Z</published>
    <updated>2019-07-24T13:13:45.812Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-异常">1. 异常</a><ul><li><a href="#11-异常概念">1.1. 异常概念</a></li><li><a href="#12-异常体系">1.2. 异常体系</a></li><li><a href="#13-异常分类">1.3. 异常分类</a></li><li><a href="#14-异常的处理">1.4. 异常的处理</a></li><li><a href="#15-自定义异常">1.5. 自定义异常</a></li></ul></li><li><a href="#2-异常补充">2. 异常补充</a><ul><li><a href="#21-通用异常处理">2.1. 通用异常处理</a></li></ul></li></ul><!-- /TOC --><h1 id="1-异常"><a href="#1-异常" class="headerlink" title="1. 异常"></a>1. 异常</h1><h2 id="1-1-异常概念"><a href="#1-1-异常概念" class="headerlink" title="1.1. 异常概念"></a>1.1. 异常概念</h2><ul><li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</li></ul><p>在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。</p><blockquote><p>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.</p></blockquote><h2 id="1-2-异常体系"><a href="#1-2-异常体系" class="headerlink" title="1.2. 异常体系"></a>1.2. 异常体系</h2><p>异常的根类是<code>java.lang.Throwable</code>，其下有两个子类：<code>java.lang.Error</code>与<code>java.lang.Exception</code>，一般来说的异常指<code>java.lang.Exception</code>。</p><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/cyc/exception.png" alt="异常体系"></p><p><strong>Throwable体系：</strong></p><ul><li><strong>Error</strong>:严重错误Error，无法通过处理的错误，只能事先避免。</li><li><strong>Exception</strong>:表示异常，可做处理。</li></ul><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>:打印异常的详细信息。</p><p><em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em></p></li><li><p><code>public String getMessage()</code>:获取发生异常的原因。</p><p><em>提示给用户的时候,就提示错误原因。</em></p></li><li><p><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</p></li></ul><h2 id="1-3-异常分类"><a href="#1-3-异常分类" class="headerlink" title="1.3. 异常分类"></a>1.3. 异常分类</h2><p><strong>异常(Exception)的分类</strong>:</p><ul><li><strong>编译时期异常</strong>:checked异常。在编译时期,就会检查,如果没有处理异常,则编译失败。(如日期格式化异常)</li><li><strong>运行时期异常</strong>:runtime异常。在运行时期,检查异常.在编译时期,运行异常不会编译器检测(不报错)。(如数学异常)</li></ul><p>​<img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/cyc/exceptionCategory.png" alt="异常分类"></p><h2 id="1-4-异常的处理"><a href="#1-4-异常的处理" class="headerlink" title="1.4. 异常的处理"></a>1.4. 异常的处理</h2><p>Java异常处理的五个关键字：try、catch、ﬁnally、throw、throws</p><h2 id="1-5-自定义异常"><a href="#1-5-自定义异常" class="headerlink" title="1.5. 自定义异常"></a>1.5. 自定义异常</h2><p><strong>异常类定义:</strong></p><ol><li>自定义一个编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。</li><li>自定义一个运行时期的异常类:自定义类 并继承于<code>java.lang.RuntimeException</code>。</li></ol><h1 id="2-异常补充"><a href="#2-异常补充" class="headerlink" title="2. 异常补充"></a>2. 异常补充</h1><h2 id="2-1-通用异常处理"><a href="#2-1-通用异常处理" class="headerlink" title="2.1. 通用异常处理"></a>2.1. 通用异常处理</h2><p>处理异常信息时, 通过SpringMVC的AOP拦截异常, 返回错误信息</p><ol><li><p>环境</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依赖: (不引用启动器, 版本由父工程管理)</span></span><br><span class="line">``` yml</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>自定义枚举类用于异常信息</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ExceptionEnum &#123;</span><br><span class="line">    <span class="comment">//价格不能为空</span></span><br><span class="line">    PRICE_CANNOT_BE_NULL(<span class="number">400</span>, <span class="string">"价格不能为空"</span>)</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义信息类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Long timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExceptionResult</span><span class="params">(ExceptionEnum exceptionEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = exceptionEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message = exceptionEnum.getMessage();</span><br><span class="line">        <span class="keyword">this</span>.timestamp = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义异常类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接受枚举作为参数</span></span><br><span class="line">    <span class="keyword">private</span> ExceptionEnum exceptionEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义通用异常拦截器</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要想该类被扫描到, 必须和应用启动器的类处于同一个包下 </span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(LyException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ExceptionResult&gt; <span class="title">handleException</span><span class="params">(LyException e)</span></span>&#123;</span><br><span class="line">        <span class="comment">//返回的是整个响应消息, 其中主要配置错误码和响应体</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(e.getExceptionEnum().getCode()).body(<span class="keyword">new</span> ExceptionResult(e.getExceptionEnum()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Item&gt; <span class="title">saveItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">        <span class="comment">//校验价格</span></span><br><span class="line">        <span class="keyword">if</span> (item.getPrice() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//传递一个枚举变量</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LyException(ExceptionEnum.PRICE_CANNOT_BE_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-异常&quot;&gt;1. 异常&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-异常概念&quot;&gt;1.1. 异常概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12-异常体系&quot;&gt;1.2. 异常体系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="java基础" scheme="https://wangdaye7.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>绪论</title>
    <link href="https://wangdaye7.github.io/2019/06/21/note/dataStructure/%E7%BB%AA%E8%AE%BA/"/>
    <id>https://wangdaye7.github.io/2019/06/21/note/dataStructure/绪论/</id>
    <published>2019-06-20T20:03:19.000Z</published>
    <updated>2019-09-08T14:23:57.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构和算法的简单认识"><a href="#数据结构和算法的简单认识" class="headerlink" title="数据结构和算法的简单认识"></a>数据结构和算法的简单认识</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ol><li><p>基本概念</p><ol><li>数据<br>描述客观事物的符号.  可以输入, 可被处理.</li><li>数据元素<br>组成数据的, 有一定意义的基本单位. 也被称为记录. 由若干个数据项构成.</li><li>数据项<br>数据项是数据不可分割的最小单位.</li><li>数据对象<br>性质相同的数据元素的集合, 是数据的子集.</li><li>数据结构<br>相互之间存在一种或多种特定关系的数据元素的集合.</li></ol></li><li><p>逻辑结构与物理结构</p><ul><li>逻辑结构<br>数据对象中数据元素之间的相互关系.<ul><li>集合结构</li><li>线性结构</li><li>树形结构</li><li>图形结构</li></ul></li><li>物理结构<br>数据的逻辑结构在计算机中的存储形式<ul><li>顺序存储结构</li><li>链式存储结构</li></ul></li></ul></li><li><p>数据类型<br> 指一组性质相同的值得结合及定义在此集合上的一些操作的总称.</p><ol><li>原子类型<br>不可再分解.</li><li>结构类型<br>若干个类型组合.</li></ol></li><li><p>抽象数据类型<br> Abstract Data Type ADT, 指一个数学模型及定义在该模型上的一组操作.</p></li><li><p>总结<br> 数据 -&gt; 数据对象 -&gt; 数据元素 -&gt; 数据项</p></li></ol><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ol><li><p>定义<br> 是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令</p></li><li><p>特性</p><ul><li>输入输入</li><li>可行性</li><li>确定性</li><li>有穷性</li></ul></li><li><p>设计要求</p><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>时间效率高和存储量低</li></ul></li><li><p>函数的渐进增长</p><ul><li>主要关心的是最高阶项的阶数</li><li>数据规模不同, 优劣性不同</li></ul></li><li><p>时间复杂度</p><ul><li>定义<br>用来度量算法的运行时间，记作: T(n) = O(f(n))。它表示随着 输入大小n 的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。</li><li>推导大O阶<br>只要高阶项, 不要低阶项, 也不要高阶项系数</li><li><p>常数阶</p></li><li><p>线性阶</p></li><li><p>对数阶</p></li><li><p>平方阶</p></li></ul></li><li><p>常见时间复杂度</p><p> -最坏情况与平均情况</p></li><li><p>空间复杂度</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据结构和算法的简单认识&quot;&gt;&lt;a href=&quot;#数据结构和算法的简单认识&quot; class=&quot;headerlink&quot; title=&quot;数据结构和算法的简单认识&quot;&gt;&lt;/a&gt;数据结构和算法的简单认识&lt;/h2&gt;&lt;h3 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; cla
      
    
    </summary>
    
      <category term="数据结构" scheme="https://wangdaye7.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>HeadFirst设计模式读书笔记</title>
    <link href="https://wangdaye7.github.io/2019/06/21/note/designPattern/HFDesignPattern1/"/>
    <id>https://wangdaye7.github.io/2019/06/21/note/designPattern/HFDesignPattern1/</id>
    <published>2019-06-20T16:48:57.000Z</published>
    <updated>2019-07-04T01:42:00.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol><li></li><li></li><li></li><li>类应该对扩展开放, 对修改关闭.</li></ol><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><ol><li>继承设计-&gt;编译时静态决定, 组合-&gt;运行时动态扩展</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;&gt;&lt;/a&gt;设计原则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;类应该对扩展开放, 对修改关闭.&lt;/li&gt;
&lt;/ol
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wangdaye7.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>记录一次jdk编译-ubuntu16.04编译JDK7</title>
    <link href="https://wangdaye7.github.io/2019/06/20/note/jvm/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1jdk%E7%BC%96%E8%AF%91/"/>
    <id>https://wangdaye7.github.io/2019/06/20/note/jvm/记录一次jdk编译/</id>
    <published>2019-06-19T20:23:15.000Z</published>
    <updated>2019-07-24T13:39:55.578Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#01-%e8%8e%b7%e5%8f%96%e6%ba%90%e7%a0%81">0.1. 获取源码</a></li><li><a href="#02-%e9%85%8d%e7%bd%ae">0.2. 配置</a></li><li><a href="#03-%e7%bc%96%e8%af%91%e6%ba%90%e7%a0%81">0.3. 编译源码</a></li><li><a href="#04-%e9%94%99%e8%af%af%e5%8f%82%e8%80%83">0.4. 错误参考</a></li><li><a href="#05-%e8%87%b3%e6%ad%a4-%e7%bc%96%e8%af%91%e6%88%90%e5%8a%9f">0.5. 至此 编译成功</a></li><li><a href="#06-%e7%bc%96%e8%af%91%e5%ae%8c%e6%88%90%e4%b9%8b%e5%90%8e">0.6. 编译完成之后</a></li><li><a href="#07-%e6%80%bb%e7%bb%93">0.7. 总结</a></li></ul><!-- /TOC --><p>ubuntu16 环境下:</p><h2 id="0-1-获取源码"><a href="#0-1-获取源码" class="headerlink" title="0.1. 获取源码"></a>0.1. 获取源码</h2><ol><li><p>依赖<br> 先安装一些依赖:</p><p> 书上给出的依赖如下:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential gawk m4 openjdk-6-jdk libasound2-dev libcups2-dev libxrender-dev xorg-dev xutils-dev x11proto-print-dev binutils libmotif3 libmotif-dev ant</span><br></pre></td></tr></table></figure><p> 其中，openjdk-6-jdk 是不能直接apt-get 的，google以后Github-bmaupin给出了一个解决方案，我们可以直接去到<a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html" target="_blank" rel="noopener">openjdk</a>，选择合适的包下载。下载前还需要注册一个Oracle帐号。下载好jdk-6u45-linux-x64.bin后复制到想要的目录并运行，相同目录下就会创建一个包含有jdk的文件夹。</p><p> libmotif3也不能直接安装，需要从<a href="https://launchpad.net/ubuntu/xenial/amd64/libmotif3/2.3.4-8ubuntu1" target="_blank" rel="noopener">libmotif3</a>下载, 但是我是通过这种方式安装一直失败, 报错. 后来通过<strong>ubuntu的应用商店</strong>安装.</p><p> 网上查阅的依赖如下:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential gawk m4 libasound2-dev libcups2-dev libxrender-dev xorg-dev xutils-dev x11proto-print-dev binutils libmotif-common ant</span><br></pre></td></tr></table></figure><p> <strong>这里我两种依赖都运行过, 书上给的依赖问题比较多, 所以随后我又安装这个依赖</strong>  </p></li><li><p>这里通过下载好的源码进行:<br> 首先是openjdk:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/jhmarryme/workspace</span><br><span class="line">sudo apt-get install unar</span><br><span class="line">sudo unar openjdk-7-fcs-src-b147-27_jun_2011.zip</span><br><span class="line">sudo mv openjdk /usr/openjdk</span><br></pre></td></tr></table></figure><p> 运行jdk.bin:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod u+x jdk-6u45-linux-x64.bin</span><br><span class="line">sudo ./jdk-6u45-linux-x64.bin</span><br><span class="line">cd /usr</span><br><span class="line">sudo mkdir java</span><br><span class="line">cd -</span><br><span class="line">sudo mv jdk1.6.0_45 /usr/java/</span><br></pre></td></tr></table></figure></li></ol><h2 id="0-2-配置"><a href="#0-2-配置" class="headerlink" title="0.2. 配置"></a>0.2. 配置</h2><p>配置文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>在后面追加如下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#</span></span></span><br><span class="line">export LANG=C</span><br><span class="line"><span class="meta">#</span><span class="bash">BootStrap-JDK</span></span><br><span class="line">export ALT_BOOTDIR=/usr/java/jdk1.6.0_45</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleJDK</span></span><br><span class="line">export ALT_JDK_IMPORT_PATH=/usr/java/jdk1.6.0_45</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">export ALLOW_DOWNLOADS=true</span><br><span class="line"><span class="meta">#</span><span class="bash">与你的CPU核数对应即可</span></span><br><span class="line">export HOTSPOT_BUILD_JOBS=1</span><br><span class="line">export ALT_PARALLEL_COMPILE_JOBS=1</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">export USE_PRECOMPILED_HEADER=true</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">export BUILD_LANGTOOLS=true</span><br><span class="line">export BUILD_JAXWS=false</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> BUILD_JAXP=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> BUILD_CORBA=<span class="literal">false</span></span></span><br><span class="line">export BUILD_HOTSPOT=true</span><br><span class="line"></span><br><span class="line">export BUILD_JDK=true</span><br><span class="line"></span><br><span class="line">export SKIP_COMPARE_IMAGES=true</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">BUILD_DEPLOY=false</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">BUILD_INSTALL=false</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">export ALT_OUTPUTDIR=/usr/openjdk/build</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">unset JAVA_HOME</span><br><span class="line">unset CLASSPATH</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">make 2&gt;&amp;1 | tee $ALT_OUTPUTDIR/build.log</span><br></pre></td></tr></table></figure><h2 id="0-3-编译源码"><a href="#0-3-编译源码" class="headerlink" title="0.3. 编译源码"></a>0.3. 编译源码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/openjdk/</span><br><span class="line">make sanity</span><br></pre></td></tr></table></figure><p>末尾出现Sanity check passed. 则验证通过.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="0-4-错误参考"><a href="#0-4-错误参考" class="headerlink" title="0.4. 错误参考"></a>0.4. 错误参考</h2><p>编译期间遇到一大堆错误, 逐个解决, 参考如下:<br><a href="https://www.jianshu.com/p/32dc1a850e23" target="_blank" rel="noopener">主要安装参考1</a><br><a href="https://zhuanlan.zhihu.com/p/26088612" target="_blank" rel="noopener">参考2</a><br><a href="https://juejin.im/post/5c949a92f265da60e21bfc2f" target="_blank" rel="noopener">参考3</a> </p><p>需要注意的是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">错误</span></span><br><span class="line">error:"__LEAF"redefined [-Werror]</span><br><span class="line"><span class="meta">#</span><span class="bash">define __LEAF(result_type, header) \</span></span><br><span class="line">^</span><br></pre></td></tr></table></figure><p>网上都说是在openjdk/hotspot/src/share/vm/runtime/interfaceSupport.hpp文件后追加, 但我修改之后没有效果, <strong>我选择的是在该文件430行左右开始, 替换掉原本的定义. 不再报错.</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// LEAF routines do not lock, GC or throw exceptions </span><br><span class="line"><span class="meta">#</span><span class="bash">ifdef __LEAF </span></span><br><span class="line"><span class="meta">#</span><span class="bash">undef __LEAF </span></span><br><span class="line"><span class="meta">#</span><span class="bash">define __LEAF(result_type, header) \</span></span><br><span class="line">TRACE_CALL(result_type, header) \</span><br><span class="line">debug_only(NoHandleMark __hm;) \</span><br><span class="line">/* begin of body */ </span><br><span class="line"><span class="meta">#</span><span class="bash">endif</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">错误</span></span><br><span class="line">/usr/openjdk/hotspot/src/share/vm/oops/constantPoolOop.cpp:272:39: error: converting 'false' to pointer type 'methodOop &#123;aka methodOopDesc*&#125;' [-Werror=conversion-null]</span><br><span class="line">   if (cpool-&gt;cache() == NULL)  return false;  // nothing to load yet</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">错误</span></span><br><span class="line">/usr/openjdk/hotspot/src/share/vm/opto/loopnode.cpp:896:49: error: converting 'false' to pointer type 'Node*' [-Werror=conversion-null]</span><br><span class="line">   if (expr == NULL || expr-&gt;req() != 3)  return false;</span><br></pre></td></tr></table></figure><h2 id="0-5-至此-编译成功"><a href="#0-5-至此-编译成功" class="headerlink" title="0.5. 至此 编译成功"></a>0.5. 至此 编译成功</h2><p><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/javaVirtualMachine/Ubuntu-2019-06-20-10-47-08.png" alt="ubuntu"></p><h2 id="0-6-编译完成之后"><a href="#0-6-编译完成之后" class="headerlink" title="0.6. 编译完成之后"></a>0.6. 编译完成之后</h2><ol><li><p>相关设置: </p><p> 编译完成之后,进入OpenJDK源码下的build/j2sdk-image目录(或者build-debug、build- fastdebug这两个目录),这是整个JDK的完整编译结果,复制到JAVA_HOME目录,就可以作为一个完整的JDK使用,编译出来的虚拟机,在-version命令中带有用户的机器名。<br> 操作如下:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin</span><br><span class="line">ln -s -f /usr/openjdk/build/j2sdk-image/bin/java</span><br><span class="line">ln -s -f /usr/openjdk/build/j2sdk-image/bin/javac</span><br><span class="line">java -version</span><br><span class="line"><span class="meta">#</span><span class="bash">此时显示</span></span><br><span class="line">openjdk version "1.7.0-internal"</span><br><span class="line">OpenJDK Runtime Environment (build 1.7.0-internal-root_2019_06_20_02_16-b00)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 21.0-b17, mixed mode)</span><br></pre></td></tr></table></figure></li><li><p>运行虚拟机<br> 在product下边（看网上都是在jvmg下边，我的jvmg下边没有gamma）的env.sh下加入, 完整路径/usr/openjdk/build/hotspot/outputdir/linux_amd64_compiler2/product</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LD_LIBRARY_PATH=.:$&#123;JAVA_HOME&#125;/jre/lib/amd64/native_threads:$&#123;JAVA_HOME&#125;/jre/lib/amd64:</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><p> 我的是存在上述代码, 将export多余内容删除</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source ./env.sh</span><br><span class="line">./gamma -version</span><br><span class="line"><span class="meta">#</span><span class="bash">出现内容如下</span></span><br><span class="line">Using java runtime at: /usr/openjdk/build/j2sdk-image//jre</span><br><span class="line">openjdk version "1.7.0-internal"</span><br><span class="line">OpenJDK Runtime Environment (build 1.7.0-internal-root_2019_06_20_02_16-b00)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 21.0-b17, mixed mode)</span><br></pre></td></tr></table></figure></li></ol><h2 id="0-7-总结"><a href="#0-7-总结" class="headerlink" title="0.7. 总结"></a>0.7. 总结</h2><p>在选择获取jdk和openjdk源码时, 使用打包好的文件进行安装最为方便, 之前选用在线下载的方式时, 遇到了很多问题, 随后改为压缩包安装. 在整个编译的过程中, make的时候出现了很多问题, 我是一个一个去解决的, 其实这样太花时间了, 应该按照参考的错误解决方式全部修改后, 再次make. 会节约很多的时间.  </p><p>最好是不要修改/etc/profile文件, 容易产生很多问题, 而是通过用户的sh完成. 但这里我还是修改的profile文件.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#01-%e8%8e%b7%e5%8f%96%e6%ba%90%e7%a0%81&quot;&gt;0.1. 获取源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#02-%e9%85%8d%e7%bd%ae&quot;&gt;0.2. 配置&lt;/a&gt;
      
    
    </summary>
    
      <category term="java虚拟机读书笔记" scheme="https://wangdaye7.github.io/categories/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解java虚拟机读书笔记</title>
    <link href="https://wangdaye7.github.io/2019/06/17/note/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://wangdaye7.github.io/2019/06/17/note/jvm/深入理解java虚拟机读书笔记/</id>
    <published>2019-06-17T08:49:40.000Z</published>
    <updated>2019-06-20T08:40:45.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="走近java"><a href="#走近java" class="headerlink" title="走近java"></a>走近java</h2><ol><li>Java技术体系<br> sun官方定义Java包括以下组成部分:<ul><li>java程序设计语言</li><li>各种硬件平台上的java虚拟机</li><li>Class文件格式</li><li>JavaApi类库</li><li>第三方Java类库<br>JDK: 支持java程序开发最小环境.(语言, 虚拟机, API)<br>JRE: 支持java程序运行标准环境.(虚拟机, SE API子集)<br><img src="https://jhmarryme-1257584644.cos.ap-chengdu.myqcloud.com/java/javaVirtualMachine/Description-of-Java-Conceptual-Diagram.png" alt="Java"></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;走近java&quot;&gt;&lt;a href=&quot;#走近java&quot; class=&quot;headerlink&quot; title=&quot;走近java&quot;&gt;&lt;/a&gt;走近java&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Java技术体系&lt;br&gt; sun官方定义Java包括以下组成部分:&lt;ul&gt;
&lt;li&gt;java程序
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>牛客算法学习part1</title>
    <link href="https://wangdaye7.github.io/2019/06/17/note/algorithm/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://wangdaye7.github.io/2019/06/17/note/algorithm/牛客算法学习/</id>
    <published>2019-06-16T20:59:43.000Z</published>
    <updated>2019-07-28T11:34:26.083Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><!-- TOC --><ul><li><a href="#1-概念">1. 概念</a><ul><li><a href="#11-时间复杂度">1.1. 时间复杂度</a></li><li><a href="#12-空间复杂度">1.2. 空间复杂度</a></li><li><a href="#13-最优解">1.3. 最优解</a></li><li><a href="#14-排序的稳定性">1.4. 排序的稳定性</a></li></ul></li><li><a href="#2-数组排序">2. 数组排序</a><ul><li><a href="#21-时间复杂度on^2空间复杂度o1">2.1. 时间复杂度O(N^2),空间复杂度O(1)</a><ul><li><a href="#211-冒泡排序">2.1.1. 冒泡排序</a></li><li><a href="#212-选择排序">2.1.2. 选择排序</a></li><li><a href="#213-插入排序">2.1.3. 插入排序</a></li></ul></li><li><a href="#22-时间复杂度onlogn">2.2. 时间复杂度O(NlogN)</a><ul><li><a href="#221-归并排序">2.2.1. 归并排序</a></li><li><a href="#222-快速排序">2.2.2. 快速排序</a></li><li><a href="#223-堆排序">2.2.3. 堆排序</a></li><li><a href="#224-桶排序">2.2.4. 桶排序</a></li></ul></li></ul></li><li><a href="#3-延伸题型">3. 延伸题型</a><ul><li><a href="#31-区别">3.1. 区别</a><ul><li><a href="#311-merge与quick的区别">3.1.1. merge与quick的区别</a></li></ul></li><li><a href="#32-归并延伸">3.2. 归并延伸</a><ul><li><a href="#321-求小和">3.2.1. 求小和</a></li><li><a href="#322-降序对">3.2.2. 降序对</a></li></ul></li><li><a href="#33-桶排序">3.3. 桶排序</a><ul><li><a href="#331-排序之后的相邻最大差值">3.3.1. 排序之后的相邻最大差值</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h1><h2 id="1-1-时间复杂度"><a href="#1-1-时间复杂度" class="headerlink" title="1.1. 时间复杂度"></a>1.1. 时间复杂度</h2><ol><li><p><strong>概念</strong></p><ul><li><p>时间复杂度<br>为一个算法流程中, 常数操作数量的指标, 这个指标叫做O, big O.只要高阶项, 不要低阶项, 也不要高阶项系数,  剩下部分记为f(N), 时间复杂度为O(f(N))</p></li><li><p>常数操作<br>完成操作的时间与数据量无关</p></li></ul></li><li><p><strong>例子</strong></p><ol><li><p><strong>寻找数组(长度N)中最大值</strong><br>变量max = 系统最小值, 遍历数组, 时间复杂度为O(N)</p></li><li><p><strong>有序数组二分查找</strong><br>时间复杂度为O(logN) 默认以2为底</p></li><li><p><strong>两个有序数组寻找相同的部分, 长度为N, M</strong></p><ol><li><p>循环遍历两个数组<br>O(N * M)</p></li><li><p>遍历左边数组, 在右边数组二分查找<br>O(N * logM)</p></li><li><p>外排, 假定无重复<br>取两个数组的起始索引为P1, P2, 因为是寻找公共的部分且两个数组有序, 所以只有当a[P1] == a[p2]时指针才同时动, 如果当谁的值更小, 就单独移动谁的指针, 一直移动到两端值相等为止.<br>O(N + M)<br>最优解要根据实际的数据量进行确定, 当N的长度远小于M的时候, 通过第二种方法时间复杂度更小, 具体情况具体分析.</p></li></ol></li></ol></li></ol><h2 id="1-2-空间复杂度"><a href="#1-2-空间复杂度" class="headerlink" title="1.2. 空间复杂度"></a>1.2. 空间复杂度</h2><ol><li><p>概念</p><ul><li><strong>空间复杂度</strong><br>一般指额外空间复杂度, 不算上输入输出需要的空间.</li></ul></li><li><p>例子</p><ol><li><p><strong>数组中分成两个部分, 左右两个部分交换, 总长度为N</strong></p><blockquote><p>如12345 67, 交换为67 12345</p></blockquote><ul><li><p>通过一个辅助空间先存入67, 存入12345<br>  空间复杂度为O(N)</p></li><li><p>直接在原数组中进行操作<br>  通过一个辅助变量进行数组逆序, 得到7654321, 再对67单独逆序, 54321单独逆序, 得到结果6712345, 也可以先单独逆序, 再进行整体逆序<br>  这里的空间复杂度为O(1)</p></li></ul></li></ol></li></ol><h2 id="1-3-最优解"><a href="#1-3-最优解" class="headerlink" title="1.3. 最优解"></a>1.3. 最优解</h2><p>一般情况下 先满足时间复杂度最优, 再满足空间复杂度最优.</p><h2 id="1-4-排序的稳定性"><a href="#1-4-排序的稳定性" class="headerlink" title="1.4. 排序的稳定性"></a>1.4. 排序的稳定性</h2><p><strong>无序数组中值相同的部分 排成有序之后相对次序保持不变</strong></p><ul><li>可以做到稳定<ul><li>冒泡</li><li>插入</li><li>归并</li></ul></li><li>不可以做到稳定<ul><li>选择</li><li>快速 (可以做到, 论文级别, 很难 01 stable sort)</li></ul></li></ul><h1 id="2-数组排序"><a href="#2-数组排序" class="headerlink" title="2. 数组排序"></a>2. 数组排序</h1><h2 id="2-1-时间复杂度O-N-2-空间复杂度O-1"><a href="#2-1-时间复杂度O-N-2-空间复杂度O-1" class="headerlink" title="2.1. 时间复杂度O(N^2),空间复杂度O(1)"></a>2.1. 时间复杂度O(N^2),空间复杂度O(1)</h2><h3 id="2-1-1-冒泡排序"><a href="#2-1-1-冒泡排序" class="headerlink" title="2.1.1. 冒泡排序"></a>2.1.1. 冒泡排序</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> end = arr.length - <span class="number">1</span>; end &gt; <span class="number">0</span>; end--)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                DigitalArrayUtil.swap(arr, i , i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="2-1-2-选择排序"><a href="#2-1-2-选择排序" class="headerlink" title="2.1.2. 选择排序"></a>2.1.2. 选择排序</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minIndex;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            minIndex = (arr[minIndex] &lt; arr[j]) ? minIndex : j;</span><br><span class="line">        &#125;</span><br><span class="line">        DigitalArrayUtil.swap(arr, minIndex, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="2-1-3-插入排序"><a href="#2-1-3-插入排序" class="headerlink" title="2.1.3. 插入排序"></a>2.1.3. 插入排序</h3><blockquote><p>时间复杂度最好O(N), 最差O(N^2)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class="number">1</span>] ; j--) &#123;</span><br><span class="line">        DigitalArrayUtil.swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-时间复杂度O-NlogN"><a href="#2-2-时间复杂度O-NlogN" class="headerlink" title="2.2. 时间复杂度O(NlogN)"></a>2.2. 时间复杂度O(NlogN)</h2><h3 id="2-2-1-归并排序"><a href="#2-2-1-归并排序" class="headerlink" title="2.2.1. 归并排序"></a>2.2.1. 归并排序</h3><blockquote><p>例如7 9 8 4 6 2, 先划分为798  462两个部分, 左边再划分成 79 8 , 左边再到7 9, 最后左边到7, 此时只剩一个数了, 不用再划分, 再依次与右边的进行有序合并的, 一直递归向上, 最后排序完成.</p></blockquote><p>其实就是一个划分, 合并的过程.<br><strong>空间复杂度O(N)</strong><br><strong>归并排序内部缓存法实现空间复杂度O(1)</strong><br><strong>时间复杂度</strong>的计算过程<br>$$T(n)=aT(\frac{n}{b}) +O(n^{d})$$<br>其中:<br>$$ \log _b a &gt; d \Rightarrow O(n^{log _b a})$$<br>$$ \log _b a &lt; d \Rightarrow O(n^d)$$<br>$$ \log _b a = d \Rightarrow O(n^d * \log n)$$<br><strong>a 为递归中子递归个数， n/b 为子递归的数据规模。</strong>这里a = 2, b = 2, d = 1<br>其实就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sortProcess(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 归并</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> L</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> R</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortProcess</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == R)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (R - L) / <span class="number">2</span> + L;</span><br><span class="line">    sortProcess(arr, L, mid);</span><br><span class="line">    sortProcess(arr, mid + <span class="number">1</span>, R);</span><br><span class="line">    merge(arr, L, mid, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 外排合并</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> L</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> R</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> mid, <span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> p1 = L;</span><br><span class="line">    <span class="keyword">int</span> p2 = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= R)&#123;</span><br><span class="line">        help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只会有一个越界, 只会处理一个while循环</span></span><br><span class="line">    <span class="keyword">while</span>(p1 &lt;= mid)&#123;</span><br><span class="line">        help[i++] = arr[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p2 &lt;= R)&#123;</span><br><span class="line">        help[i++] = arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; help.length; j++) &#123;</span><br><span class="line">        arr[L + j] = help[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-快速排序"><a href="#2-2-2-快速排序" class="headerlink" title="2.2.2. 快速排序"></a>2.2.2. 快速排序</h3><blockquote><p>快速排序的思想基本上还是将问题划分, 然后递归进行.<br>总体上划分为三个区域, 大于区, 小于区, 等于区.<br>再接着在大于区和小于区上进行同样的划分, 最后排序成功</p></blockquote><p>最好的时间复杂度为O(NlogN), 最差为O(N²), 空间复杂度O(logN)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt; R)&#123;</span><br><span class="line">        <span class="comment">//随机快速排序</span></span><br><span class="line">        DigitalArrayUtil.swap(arr, L + (<span class="keyword">int</span>)(Math.random() * (R - L + <span class="number">1</span>)), R);</span><br><span class="line">        <span class="comment">//划分区域</span></span><br><span class="line">        <span class="keyword">int</span>[] partition = partition(arr, L, R);</span><br><span class="line">        quickSort(arr, L, partition[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, partition[<span class="number">1</span>] + <span class="number">1</span>, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] partition(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)&#123;</span><br><span class="line">    <span class="keyword">int</span> less = L - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//为了少用一个变量, 这里大于区域直接指向最后一位, 就避免了最后被改变, 但要在最后进行交换</span></span><br><span class="line">    <span class="keyword">int</span> more = R;</span><br><span class="line">    <span class="comment">//一直循环到大于区域为止</span></span><br><span class="line">    <span class="keyword">while</span>(L &lt; more)&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[L] &lt; arr[R]) &#123;</span><br><span class="line">            <span class="comment">//如果属于小于区域</span></span><br><span class="line">            DigitalArrayUtil.swap(arr, L++, ++less);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[L] &gt; arr[R])&#123;</span><br><span class="line">            <span class="comment">//如果属于大于区域, 因为此时所在的位置是等于区, 所以指针不动, 接着比较, 直到进入正确的大于区域</span></span><br><span class="line">            DigitalArrayUtil.swap(arr, L, --more);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//属于等于区域, 不做改变</span></span><br><span class="line">            L++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为之前的准备 做交换</span></span><br><span class="line">    DigitalArrayUtil.swap(arr, more, R);</span><br><span class="line">    <span class="comment">// 值得注意的是这里等于区域到more为止, 因为之前最后一位作为保留, 后又进行了交换, 所以大于区域的第一位实际是等于区的数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;less + <span class="number">1</span>, more&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-堆排序"><a href="#2-2-3-堆排序" class="headerlink" title="2.2.3. 堆排序"></a>2.2.3. 堆排序</h3><p>时间复杂度O(N*logN)，额外空间复杂度O(1)</p><blockquote><p>堆可以看成一个二叉树，所以可以考虑使用二叉树的表示方法来表示堆。但是因为堆中元素按照一定的优先顺序排列，因此可以使用更简单的方法——数组——来表示，这样可以节省子节点指针空间，并且可以快速访问每个节点。</p></blockquote><blockquote><p>如果只是建立堆的过程，时间复杂度为O(N)</p></blockquote><p>堆排序其实就是一个建立大根堆之后进行循环处理的过程, 在简单理解了堆的结构之后理解堆排序其实不难. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.DigitalArrayUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/4 10:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code_05_HeapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 堆排序</span></span><br><span class="line"><span class="comment">     * 1. 建立大根堆</span></span><br><span class="line"><span class="comment">     * 2. 堆循环处理</span></span><br><span class="line"><span class="comment">     *  2.1 首尾交换</span></span><br><span class="line"><span class="comment">     *  2.2 调整位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//建立大根堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            heapInsert(arr, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = arr.length;</span><br><span class="line">        <span class="keyword">while</span> (--size &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            DigitalArrayUtil.swap(arr, <span class="number">0</span>, size);</span><br><span class="line">            heapfiy(arr, <span class="number">0</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换首尾后的 堆排序处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heapSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapfiy</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index, <span class="keyword">int</span> heapSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; heapSize)&#123;</span><br><span class="line">            <span class="comment">// 当右节点存在且大于左节点时 取右节点</span></span><br><span class="line">            <span class="keyword">int</span> largest = left + <span class="number">1</span> &lt; heapSize &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left] ? left + <span class="number">1</span> : left;</span><br><span class="line">            largest = arr[index] &gt; arr[largest] ? index :largest;</span><br><span class="line">            <span class="keyword">if</span> (largest == index) &#123;</span><br><span class="line">                <span class="comment">// 代表子节点没有比自己大的了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            DigitalArrayUtil.swap(arr, index, largest);</span><br><span class="line">            index = largest;</span><br><span class="line">            left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立大根堆</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapInsert</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(arr[index] &gt; arr[(index - <span class="number">1</span>) / <span class="number">2</span>])&#123;</span><br><span class="line">            DigitalArrayUtil.swap(arr, index, (index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试堆排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> testTime = <span class="number">50000</span>;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; testTime; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr1 = DigitalArrayUtil.generateRandomArray(size, value);</span><br><span class="line">            <span class="keyword">int</span>[] arr2 = Arrays.copyOf(arr1, arr1.length);</span><br><span class="line"></span><br><span class="line">            heapSort(arr1);</span><br><span class="line">            DigitalArrayUtil.comparator(arr2);</span><br><span class="line">            <span class="keyword">if</span> (!DigitalArrayUtil.isEqual(arr1, arr2)) &#123;</span><br><span class="line">                success = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> l2 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"success = "</span> + success);</span><br><span class="line">        System.out.println(<span class="string">"运行时间 = "</span> + (l2 - l));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-桶排序"><a href="#2-2-4-桶排序" class="headerlink" title="2.2.4. 桶排序"></a>2.2.4. 桶排序</h3><blockquote><p>不是基于比较的算法</p></blockquote><blockquote><p>例如有几亿个数, 范围是0~200, 那么只需要准备201个桶, 遍历一遍数组把对应的数字放入桶内, 最后再将桶内的数字依次倒出来组成新的数组.</p></blockquote><blockquote><p>但是虽然很快, 但实际用的不多. 实际应用中一般需要排序的很少是基本类型, 都是自定义的类型. 而桶排序需要分析数据的状况, 不具备通用性.</p></blockquote><blockquote><p>容器类型决定稳定性, 使用队列结构作为容器是稳定的, 栈结构就不稳定</p></blockquote><ul><li>计数排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.DigitalArrayUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jhmarryme.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/28 10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code_06_BucketSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            max = Math.max(i, max);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            bucket[i]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(bucket[i]-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                arr[index++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试桶排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> testTime = <span class="number">50000</span>;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; testTime; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="keyword">int</span>) ((size + <span class="number">1</span>) * Math.random())];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr1.length; j++) &#123;</span><br><span class="line">                arr1[j] = ((<span class="keyword">int</span>)(Math.random() * <span class="number">201</span>));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] arr2 = Arrays.copyOf(arr1, arr1.length);</span><br><span class="line"></span><br><span class="line">            bucketSort(arr1);</span><br><span class="line">            DigitalArrayUtil.comparator(arr2);</span><br><span class="line">            <span class="keyword">if</span> (!DigitalArrayUtil.isEqual(arr1, arr2)) &#123;</span><br><span class="line">                success = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> l2 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"success = "</span> + success);</span><br><span class="line">        System.out.println(<span class="string">"运行时间 = "</span> + (l2 - l));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基数排序</li></ul><h1 id="3-延伸题型"><a href="#3-延伸题型" class="headerlink" title="3. 延伸题型"></a>3. 延伸题型</h1><h2 id="3-1-区别"><a href="#3-1-区别" class="headerlink" title="3.1. 区别"></a>3.1. 区别</h2><h3 id="3-1-1-merge与quick的区别"><a href="#3-1-1-merge与quick的区别" class="headerlink" title="3.1.1. merge与quick的区别"></a>3.1.1. merge与quick的区别</h3><blockquote><p>系统中基础类型使用quick, 自定义class类型用merge类型</p></blockquote><p><strong>稳定性</strong>, 基础类型排序不考虑稳定性所以用quick, merge是稳定的.</p><h2 id="3-2-归并延伸"><a href="#3-2-归并延伸" class="headerlink" title="3.2. 归并延伸"></a>3.2. 归并延伸</h2><h3 id="3-2-1-求小和"><a href="#3-2-1-求小和" class="headerlink" title="3.2.1. 求小和"></a>3.2.1. 求小和</h3><blockquote><p>利用归并排序的特点, 在进行排序过程中计算小和的总和.</p></blockquote><h3 id="3-2-2-降序对"><a href="#3-2-2-降序对" class="headerlink" title="3.2.2. 降序对"></a>3.2.2. 降序对</h3><blockquote><p>也是利用归并排序, 求降序对. </p></blockquote><h2 id="3-3-桶排序"><a href="#3-3-桶排序" class="headerlink" title="3.3. 桶排序"></a>3.3. 桶排序</h2><h3 id="3-3-1-排序之后的相邻最大差值"><a href="#3-3-1-排序之后的相邻最大差值" class="headerlink" title="3.3.1. 排序之后的相邻最大差值"></a>3.3.1. 排序之后的相邻最大差值</h3><blockquote><p>给定一个数组，求如果排序之后，相邻两数的最大差值，要求时 间复杂度O(N)，且要求不能用非基于比较的排序</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
      <category term="算法" scheme="https://wangdaye7.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
